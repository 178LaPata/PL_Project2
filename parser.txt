Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    CASE
    CONST
    DOTDOT
    DOWNTO
    FILE
    GOTO
    IN
    LABEL
    LBRACKET
    NIL
    OF
    PACKED
    PROCEDURE
    RBRACKET
    READ
    RECORD
    REPEAT
    SET
    TYPE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMI declarations functions BEGIN statement_list END DOT
Rule 2     program -> PROGRAM ID SEMI declarations BEGIN statement_list END DOT
Rule 3     declarations -> VAR var_declaration_list
Rule 4     declarations -> empty
Rule 5     var_declaration_list -> var_declaration_list var_declaration
Rule 6     var_declaration_list -> var_declaration
Rule 7     var_declaration -> id_list COLON type SEMI
Rule 8     id_list -> ID
Rule 9     id_list -> ID COMMA id_list
Rule 10    type -> INTEGER
Rule 11    type -> BOOLEAN
Rule 12    type -> STRING
Rule 13    type -> REAL
Rule 14    functions -> function functions
Rule 15    functions -> empty
Rule 16    function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI
Rule 17    param_list -> ID COLON type
Rule 18    param_list -> param_list SEMI ID COLON type
Rule 19    argument_list -> expression
Rule 20    argument_list -> argument_list COMMA expression
Rule 21    expression -> ID LPAREN argument_list RPAREN
Rule 22    statement_list -> statement
Rule 23    statement_list -> statement SEMI statement_list
Rule 24    statement_list -> SEMI statement_list
Rule 25    statement_list -> empty
Rule 26    statement -> assignment_statement
Rule 27    statement -> writeln_statement
Rule 28    statement -> write_statement
Rule 29    statement -> readln_statement
Rule 30    statement -> for_statement
Rule 31    statement -> if_statement
Rule 32    statement -> while_statement
Rule 33    statement -> statement_compound
Rule 34    assignment_statement -> ID ASSIGN expression SEMI
Rule 35    writeln_statement -> WRITELN LPAREN writelist RPAREN SEMI
Rule 36    write_statement -> WRITE LPAREN writelist RPAREN SEMI
Rule 37    writelist -> writelist COMMA writeitem
Rule 38    writelist -> writeitem
Rule 39    writeitem -> STRING_LITERAL
Rule 40    writeitem -> expression
Rule 41    readln_statement -> READLN LPAREN ID RPAREN SEMI
Rule 42    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 43    expression -> TRUE
Rule 44    expression -> FALSE
Rule 45    expression -> expression AND expression
Rule 46    expression -> expression OR expression
Rule 47    expression -> NOT expression
Rule 48    expression -> expression LT expression
Rule 49    expression -> expression LE expression
Rule 50    expression -> expression GT expression
Rule 51    expression -> expression GE expression
Rule 52    expression -> expression EQ expression
Rule 53    expression -> expression NEQ expression
Rule 54    expression -> LPAREN expression RPAREN
Rule 55    expression -> expression DIV expression
Rule 56    expression -> expression MOD expression
Rule 57    statement_compound -> BEGIN statement_list END
Rule 58    if_statement -> IF expression THEN statement
Rule 59    if_statement -> IF expression THEN statement ELSE statement
Rule 60    while_statement -> WHILE expression DO statement
Rule 61    expression -> expression PLUS expression
Rule 62    expression -> expression MINUS expression
Rule 63    expression -> expression TIMES expression
Rule 64    expression -> expression DIVIDE expression
Rule 65    expression -> ID
Rule 66    expression -> NUMBER
Rule 67    expression -> REAL
Rule 68    empty -> <empty>

Terminals, with rules where they appear

AND                  : 45
ARRAY                : 
ASSIGN               : 34 42
BEGIN                : 1 2 16 57
BOOLEAN              : 11
CASE                 : 
COLON                : 7 16 17 18
COMMA                : 9 20 37
CONST                : 
DIV                  : 55
DIVIDE               : 64
DO                   : 42 60
DOT                  : 1 2
DOTDOT               : 
DOWNTO               : 
ELSE                 : 59
END                  : 1 2 16 57
EQ                   : 52
FALSE                : 44
FILE                 : 
FOR                  : 42
FUNCTION             : 16
GE                   : 51
GOTO                 : 
GT                   : 50
ID                   : 1 2 8 9 16 17 18 21 34 41 42 65
IF                   : 58 59
IN                   : 
INTEGER              : 10
LABEL                : 
LBRACKET             : 
LE                   : 49
LPAREN               : 16 21 35 36 41 54
LT                   : 48
MINUS                : 62
MOD                  : 56
NEQ                  : 53
NIL                  : 
NOT                  : 47
NUMBER               : 66
OF                   : 
OR                   : 46
PACKED               : 
PLUS                 : 61
PROCEDURE            : 
PROGRAM              : 1 2
RBRACKET             : 
READ                 : 
READLN               : 41
REAL                 : 13 67
RECORD               : 
REPEAT               : 
RPAREN               : 16 21 35 36 41 54
SEMI                 : 1 2 7 16 16 18 23 24 34 35 36 41
SET                  : 
STRING               : 12
STRING_LITERAL       : 39
THEN                 : 58 59
TIMES                : 63
TO                   : 42
TRUE                 : 43
TYPE                 : 
UNTIL                : 
VAR                  : 3
WHILE                : 60
WITH                 : 
WRITE                : 36
WRITELN              : 35
error                : 

Nonterminals, with rules where they appear

argument_list        : 20 21
assignment_statement : 26
declarations         : 1 2 16
empty                : 4 15 25
expression           : 19 20 34 40 42 42 45 45 46 46 47 48 48 49 49 50 50 51 51 52 52 53 53 54 55 55 56 56 58 59 60 61 61 62 62 63 63 64 64
for_statement        : 30
function             : 14
functions            : 1 14
id_list              : 7 9
if_statement         : 31
param_list           : 16 18
program              : 0
readln_statement     : 29
statement            : 22 23 42 58 59 59 60
statement_compound   : 33
statement_list       : 1 2 16 23 24 57
type                 : 7 16 17 18
var_declaration      : 5 6
var_declaration_list : 3 5
while_statement      : 32
write_statement      : 28
writeitem            : 37 38
writelist            : 35 36 37
writeln_statement    : 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMI declarations functions BEGIN statement_list END DOT
    (2) program -> . PROGRAM ID SEMI declarations BEGIN statement_list END DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMI declarations functions BEGIN statement_list END DOT
    (2) program -> PROGRAM . ID SEMI declarations BEGIN statement_list END DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMI declarations functions BEGIN statement_list END DOT
    (2) program -> PROGRAM ID . SEMI declarations BEGIN statement_list END DOT

    SEMI            shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMI . declarations functions BEGIN statement_list END DOT
    (2) program -> PROGRAM ID SEMI . declarations BEGIN statement_list END DOT
    (3) declarations -> . VAR var_declaration_list
    (4) declarations -> . empty
    (68) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 68 (empty -> .)
    FUNCTION        reduce using rule 68 (empty -> .)

    declarations                   shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMI declarations . functions BEGIN statement_list END DOT
    (2) program -> PROGRAM ID SEMI declarations . BEGIN statement_list END DOT
    (14) functions -> . function functions
    (15) functions -> . empty
    (16) function -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI
    (68) empty -> .

  ! shift/reduce conflict for BEGIN resolved as shift
    BEGIN           shift and go to state 9
    FUNCTION        shift and go to state 12

  ! BEGIN           [ reduce using rule 68 (empty -> .) ]

    functions                      shift and go to state 8
    function                       shift and go to state 10
    empty                          shift and go to state 11

state 6

    (3) declarations -> VAR . var_declaration_list
    (5) var_declaration_list -> . var_declaration_list var_declaration
    (6) var_declaration_list -> . var_declaration
    (7) var_declaration -> . id_list COLON type SEMI
    (8) id_list -> . ID
    (9) id_list -> . ID COMMA id_list

    ID              shift and go to state 16

    var_declaration_list           shift and go to state 13
    var_declaration                shift and go to state 14
    id_list                        shift and go to state 15

state 7

    (4) declarations -> empty .

    BEGIN           reduce using rule 4 (declarations -> empty .)
    FUNCTION        reduce using rule 4 (declarations -> empty .)


state 8

    (1) program -> PROGRAM ID SEMI declarations functions . BEGIN statement_list END DOT

    BEGIN           shift and go to state 17


state 9

    (2) program -> PROGRAM ID SEMI declarations BEGIN . statement_list END DOT
    (22) statement_list -> . statement
    (23) statement_list -> . statement SEMI statement_list
    (24) statement_list -> . SEMI statement_list
    (25) statement_list -> . empty
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (68) empty -> .
    (34) assignment_statement -> . ID ASSIGN expression SEMI
    (35) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (36) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (41) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (42) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (58) if_statement -> . IF expression THEN statement
    (59) if_statement -> . IF expression THEN statement ELSE statement
    (60) while_statement -> . WHILE expression DO statement
    (57) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 19
    END             reduce using rule 68 (empty -> .)
    ID              shift and go to state 18
    WRITELN         shift and go to state 32
    WRITE           shift and go to state 33
    READLN          shift and go to state 34
    FOR             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    BEGIN           shift and go to state 20

    statement_list                 shift and go to state 21
    statement                      shift and go to state 22
    empty                          shift and go to state 23
    assignment_statement           shift and go to state 24
    writeln_statement              shift and go to state 25
    write_statement                shift and go to state 26
    readln_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    statement_compound             shift and go to state 31

state 10

    (14) functions -> function . functions
    (14) functions -> . function functions
    (15) functions -> . empty
    (16) function -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI
    (68) empty -> .

    FUNCTION        shift and go to state 12
    BEGIN           reduce using rule 68 (empty -> .)

    function                       shift and go to state 10
    functions                      shift and go to state 38
    empty                          shift and go to state 11

state 11

    (15) functions -> empty .

    BEGIN           reduce using rule 15 (functions -> empty .)


state 12

    (16) function -> FUNCTION . ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI

    ID              shift and go to state 39


state 13

    (3) declarations -> VAR var_declaration_list .
    (5) var_declaration_list -> var_declaration_list . var_declaration
    (7) var_declaration -> . id_list COLON type SEMI
    (8) id_list -> . ID
    (9) id_list -> . ID COMMA id_list

    BEGIN           reduce using rule 3 (declarations -> VAR var_declaration_list .)
    FUNCTION        reduce using rule 3 (declarations -> VAR var_declaration_list .)
    ID              shift and go to state 16

    var_declaration                shift and go to state 40
    id_list                        shift and go to state 15

state 14

    (6) var_declaration_list -> var_declaration .

    ID              reduce using rule 6 (var_declaration_list -> var_declaration .)
    BEGIN           reduce using rule 6 (var_declaration_list -> var_declaration .)
    FUNCTION        reduce using rule 6 (var_declaration_list -> var_declaration .)


state 15

    (7) var_declaration -> id_list . COLON type SEMI

    COLON           shift and go to state 41


state 16

    (8) id_list -> ID .
    (9) id_list -> ID . COMMA id_list

    COLON           reduce using rule 8 (id_list -> ID .)
    COMMA           shift and go to state 42


state 17

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN . statement_list END DOT
    (22) statement_list -> . statement
    (23) statement_list -> . statement SEMI statement_list
    (24) statement_list -> . SEMI statement_list
    (25) statement_list -> . empty
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (68) empty -> .
    (34) assignment_statement -> . ID ASSIGN expression SEMI
    (35) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (36) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (41) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (42) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (58) if_statement -> . IF expression THEN statement
    (59) if_statement -> . IF expression THEN statement ELSE statement
    (60) while_statement -> . WHILE expression DO statement
    (57) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 19
    END             reduce using rule 68 (empty -> .)
    ID              shift and go to state 18
    WRITELN         shift and go to state 32
    WRITE           shift and go to state 33
    READLN          shift and go to state 34
    FOR             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    BEGIN           shift and go to state 20

    statement_list                 shift and go to state 43
    statement                      shift and go to state 22
    empty                          shift and go to state 23
    assignment_statement           shift and go to state 24
    writeln_statement              shift and go to state 25
    write_statement                shift and go to state 26
    readln_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    statement_compound             shift and go to state 31

state 18

    (34) assignment_statement -> ID . ASSIGN expression SEMI

    ASSIGN          shift and go to state 44


state 19

    (24) statement_list -> SEMI . statement_list
    (22) statement_list -> . statement
    (23) statement_list -> . statement SEMI statement_list
    (24) statement_list -> . SEMI statement_list
    (25) statement_list -> . empty
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (68) empty -> .
    (34) assignment_statement -> . ID ASSIGN expression SEMI
    (35) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (36) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (41) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (42) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (58) if_statement -> . IF expression THEN statement
    (59) if_statement -> . IF expression THEN statement ELSE statement
    (60) while_statement -> . WHILE expression DO statement
    (57) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 19
    END             reduce using rule 68 (empty -> .)
    ID              shift and go to state 18
    WRITELN         shift and go to state 32
    WRITE           shift and go to state 33
    READLN          shift and go to state 34
    FOR             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    BEGIN           shift and go to state 20

    statement_list                 shift and go to state 45
    statement                      shift and go to state 22
    empty                          shift and go to state 23
    assignment_statement           shift and go to state 24
    writeln_statement              shift and go to state 25
    write_statement                shift and go to state 26
    readln_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    statement_compound             shift and go to state 31

state 20

    (57) statement_compound -> BEGIN . statement_list END
    (22) statement_list -> . statement
    (23) statement_list -> . statement SEMI statement_list
    (24) statement_list -> . SEMI statement_list
    (25) statement_list -> . empty
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (68) empty -> .
    (34) assignment_statement -> . ID ASSIGN expression SEMI
    (35) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (36) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (41) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (42) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (58) if_statement -> . IF expression THEN statement
    (59) if_statement -> . IF expression THEN statement ELSE statement
    (60) while_statement -> . WHILE expression DO statement
    (57) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 19
    END             reduce using rule 68 (empty -> .)
    ID              shift and go to state 18
    WRITELN         shift and go to state 32
    WRITE           shift and go to state 33
    READLN          shift and go to state 34
    FOR             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    BEGIN           shift and go to state 20

    statement_list                 shift and go to state 46
    statement                      shift and go to state 22
    empty                          shift and go to state 23
    assignment_statement           shift and go to state 24
    writeln_statement              shift and go to state 25
    write_statement                shift and go to state 26
    readln_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    statement_compound             shift and go to state 31

state 21

    (2) program -> PROGRAM ID SEMI declarations BEGIN statement_list . END DOT

    END             shift and go to state 47


state 22

    (22) statement_list -> statement .
    (23) statement_list -> statement . SEMI statement_list

    END             reduce using rule 22 (statement_list -> statement .)
    SEMI            shift and go to state 48


state 23

    (25) statement_list -> empty .

    END             reduce using rule 25 (statement_list -> empty .)


state 24

    (26) statement -> assignment_statement .

    SEMI            reduce using rule 26 (statement -> assignment_statement .)
    END             reduce using rule 26 (statement -> assignment_statement .)
    ELSE            reduce using rule 26 (statement -> assignment_statement .)


state 25

    (27) statement -> writeln_statement .

    SEMI            reduce using rule 27 (statement -> writeln_statement .)
    END             reduce using rule 27 (statement -> writeln_statement .)
    ELSE            reduce using rule 27 (statement -> writeln_statement .)


state 26

    (28) statement -> write_statement .

    SEMI            reduce using rule 28 (statement -> write_statement .)
    END             reduce using rule 28 (statement -> write_statement .)
    ELSE            reduce using rule 28 (statement -> write_statement .)


state 27

    (29) statement -> readln_statement .

    SEMI            reduce using rule 29 (statement -> readln_statement .)
    END             reduce using rule 29 (statement -> readln_statement .)
    ELSE            reduce using rule 29 (statement -> readln_statement .)


state 28

    (30) statement -> for_statement .

    SEMI            reduce using rule 30 (statement -> for_statement .)
    END             reduce using rule 30 (statement -> for_statement .)
    ELSE            reduce using rule 30 (statement -> for_statement .)


state 29

    (31) statement -> if_statement .

    SEMI            reduce using rule 31 (statement -> if_statement .)
    END             reduce using rule 31 (statement -> if_statement .)
    ELSE            reduce using rule 31 (statement -> if_statement .)


state 30

    (32) statement -> while_statement .

    SEMI            reduce using rule 32 (statement -> while_statement .)
    END             reduce using rule 32 (statement -> while_statement .)
    ELSE            reduce using rule 32 (statement -> while_statement .)


state 31

    (33) statement -> statement_compound .

    SEMI            reduce using rule 33 (statement -> statement_compound .)
    END             reduce using rule 33 (statement -> statement_compound .)
    ELSE            reduce using rule 33 (statement -> statement_compound .)


state 32

    (35) writeln_statement -> WRITELN . LPAREN writelist RPAREN SEMI

    LPAREN          shift and go to state 49


state 33

    (36) write_statement -> WRITE . LPAREN writelist RPAREN SEMI

    LPAREN          shift and go to state 50


state 34

    (41) readln_statement -> READLN . LPAREN ID RPAREN SEMI

    LPAREN          shift and go to state 51


state 35

    (42) for_statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 52


state 36

    (58) if_statement -> IF . expression THEN statement
    (59) if_statement -> IF . expression THEN statement ELSE statement
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 53

state 37

    (60) while_statement -> WHILE . expression DO statement
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 61

state 38

    (14) functions -> function functions .

    BEGIN           reduce using rule 14 (functions -> function functions .)


state 39

    (16) function -> FUNCTION ID . LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI

    LPAREN          shift and go to state 62


state 40

    (5) var_declaration_list -> var_declaration_list var_declaration .

    ID              reduce using rule 5 (var_declaration_list -> var_declaration_list var_declaration .)
    BEGIN           reduce using rule 5 (var_declaration_list -> var_declaration_list var_declaration .)
    FUNCTION        reduce using rule 5 (var_declaration_list -> var_declaration_list var_declaration .)


state 41

    (7) var_declaration -> id_list COLON . type SEMI
    (10) type -> . INTEGER
    (11) type -> . BOOLEAN
    (12) type -> . STRING
    (13) type -> . REAL

    INTEGER         shift and go to state 64
    BOOLEAN         shift and go to state 65
    STRING          shift and go to state 66
    REAL            shift and go to state 67

    type                           shift and go to state 63

state 42

    (9) id_list -> ID COMMA . id_list
    (8) id_list -> . ID
    (9) id_list -> . ID COMMA id_list

    ID              shift and go to state 16

    id_list                        shift and go to state 68

state 43

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statement_list . END DOT

    END             shift and go to state 69


state 44

    (34) assignment_statement -> ID ASSIGN . expression SEMI
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 70

state 45

    (24) statement_list -> SEMI statement_list .

    END             reduce using rule 24 (statement_list -> SEMI statement_list .)


state 46

    (57) statement_compound -> BEGIN statement_list . END

    END             shift and go to state 71


state 47

    (2) program -> PROGRAM ID SEMI declarations BEGIN statement_list END . DOT

    DOT             shift and go to state 72


state 48

    (23) statement_list -> statement SEMI . statement_list
    (22) statement_list -> . statement
    (23) statement_list -> . statement SEMI statement_list
    (24) statement_list -> . SEMI statement_list
    (25) statement_list -> . empty
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (68) empty -> .
    (34) assignment_statement -> . ID ASSIGN expression SEMI
    (35) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (36) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (41) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (42) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (58) if_statement -> . IF expression THEN statement
    (59) if_statement -> . IF expression THEN statement ELSE statement
    (60) while_statement -> . WHILE expression DO statement
    (57) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 19
    END             reduce using rule 68 (empty -> .)
    ID              shift and go to state 18
    WRITELN         shift and go to state 32
    WRITE           shift and go to state 33
    READLN          shift and go to state 34
    FOR             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    BEGIN           shift and go to state 20

    statement                      shift and go to state 22
    statement_list                 shift and go to state 73
    empty                          shift and go to state 23
    assignment_statement           shift and go to state 24
    writeln_statement              shift and go to state 25
    write_statement                shift and go to state 26
    readln_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    statement_compound             shift and go to state 31

state 49

    (35) writeln_statement -> WRITELN LPAREN . writelist RPAREN SEMI
    (37) writelist -> . writelist COMMA writeitem
    (38) writelist -> . writeitem
    (39) writeitem -> . STRING_LITERAL
    (40) writeitem -> . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    STRING_LITERAL  shift and go to state 76
    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    writelist                      shift and go to state 74
    writeitem                      shift and go to state 75
    expression                     shift and go to state 77

state 50

    (36) write_statement -> WRITE LPAREN . writelist RPAREN SEMI
    (37) writelist -> . writelist COMMA writeitem
    (38) writelist -> . writeitem
    (39) writeitem -> . STRING_LITERAL
    (40) writeitem -> . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    STRING_LITERAL  shift and go to state 76
    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    writelist                      shift and go to state 78
    writeitem                      shift and go to state 75
    expression                     shift and go to state 77

state 51

    (41) readln_statement -> READLN LPAREN . ID RPAREN SEMI

    ID              shift and go to state 79


state 52

    (42) for_statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 80


state 53

    (58) if_statement -> IF expression . THEN statement
    (59) if_statement -> IF expression . THEN statement ELSE statement
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 54

    (21) expression -> ID . LPAREN argument_list RPAREN
    (65) expression -> ID .

    LPAREN          shift and go to state 96
    THEN            reduce using rule 65 (expression -> ID .)
    AND             reduce using rule 65 (expression -> ID .)
    OR              reduce using rule 65 (expression -> ID .)
    LT              reduce using rule 65 (expression -> ID .)
    LE              reduce using rule 65 (expression -> ID .)
    GT              reduce using rule 65 (expression -> ID .)
    GE              reduce using rule 65 (expression -> ID .)
    EQ              reduce using rule 65 (expression -> ID .)
    NEQ             reduce using rule 65 (expression -> ID .)
    DIV             reduce using rule 65 (expression -> ID .)
    MOD             reduce using rule 65 (expression -> ID .)
    PLUS            reduce using rule 65 (expression -> ID .)
    MINUS           reduce using rule 65 (expression -> ID .)
    TIMES           reduce using rule 65 (expression -> ID .)
    DIVIDE          reduce using rule 65 (expression -> ID .)
    DO              reduce using rule 65 (expression -> ID .)
    SEMI            reduce using rule 65 (expression -> ID .)
    RPAREN          reduce using rule 65 (expression -> ID .)
    COMMA           reduce using rule 65 (expression -> ID .)
    TO              reduce using rule 65 (expression -> ID .)


state 55

    (54) expression -> LPAREN . expression RPAREN
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 97

state 56

    (43) expression -> TRUE .

    THEN            reduce using rule 43 (expression -> TRUE .)
    AND             reduce using rule 43 (expression -> TRUE .)
    OR              reduce using rule 43 (expression -> TRUE .)
    LT              reduce using rule 43 (expression -> TRUE .)
    LE              reduce using rule 43 (expression -> TRUE .)
    GT              reduce using rule 43 (expression -> TRUE .)
    GE              reduce using rule 43 (expression -> TRUE .)
    EQ              reduce using rule 43 (expression -> TRUE .)
    NEQ             reduce using rule 43 (expression -> TRUE .)
    DIV             reduce using rule 43 (expression -> TRUE .)
    MOD             reduce using rule 43 (expression -> TRUE .)
    PLUS            reduce using rule 43 (expression -> TRUE .)
    MINUS           reduce using rule 43 (expression -> TRUE .)
    TIMES           reduce using rule 43 (expression -> TRUE .)
    DIVIDE          reduce using rule 43 (expression -> TRUE .)
    DO              reduce using rule 43 (expression -> TRUE .)
    SEMI            reduce using rule 43 (expression -> TRUE .)
    RPAREN          reduce using rule 43 (expression -> TRUE .)
    COMMA           reduce using rule 43 (expression -> TRUE .)
    TO              reduce using rule 43 (expression -> TRUE .)


state 57

    (44) expression -> FALSE .

    THEN            reduce using rule 44 (expression -> FALSE .)
    AND             reduce using rule 44 (expression -> FALSE .)
    OR              reduce using rule 44 (expression -> FALSE .)
    LT              reduce using rule 44 (expression -> FALSE .)
    LE              reduce using rule 44 (expression -> FALSE .)
    GT              reduce using rule 44 (expression -> FALSE .)
    GE              reduce using rule 44 (expression -> FALSE .)
    EQ              reduce using rule 44 (expression -> FALSE .)
    NEQ             reduce using rule 44 (expression -> FALSE .)
    DIV             reduce using rule 44 (expression -> FALSE .)
    MOD             reduce using rule 44 (expression -> FALSE .)
    PLUS            reduce using rule 44 (expression -> FALSE .)
    MINUS           reduce using rule 44 (expression -> FALSE .)
    TIMES           reduce using rule 44 (expression -> FALSE .)
    DIVIDE          reduce using rule 44 (expression -> FALSE .)
    DO              reduce using rule 44 (expression -> FALSE .)
    SEMI            reduce using rule 44 (expression -> FALSE .)
    RPAREN          reduce using rule 44 (expression -> FALSE .)
    COMMA           reduce using rule 44 (expression -> FALSE .)
    TO              reduce using rule 44 (expression -> FALSE .)


state 58

    (47) expression -> NOT . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 98

state 59

    (66) expression -> NUMBER .

    THEN            reduce using rule 66 (expression -> NUMBER .)
    AND             reduce using rule 66 (expression -> NUMBER .)
    OR              reduce using rule 66 (expression -> NUMBER .)
    LT              reduce using rule 66 (expression -> NUMBER .)
    LE              reduce using rule 66 (expression -> NUMBER .)
    GT              reduce using rule 66 (expression -> NUMBER .)
    GE              reduce using rule 66 (expression -> NUMBER .)
    EQ              reduce using rule 66 (expression -> NUMBER .)
    NEQ             reduce using rule 66 (expression -> NUMBER .)
    DIV             reduce using rule 66 (expression -> NUMBER .)
    MOD             reduce using rule 66 (expression -> NUMBER .)
    PLUS            reduce using rule 66 (expression -> NUMBER .)
    MINUS           reduce using rule 66 (expression -> NUMBER .)
    TIMES           reduce using rule 66 (expression -> NUMBER .)
    DIVIDE          reduce using rule 66 (expression -> NUMBER .)
    DO              reduce using rule 66 (expression -> NUMBER .)
    SEMI            reduce using rule 66 (expression -> NUMBER .)
    RPAREN          reduce using rule 66 (expression -> NUMBER .)
    COMMA           reduce using rule 66 (expression -> NUMBER .)
    TO              reduce using rule 66 (expression -> NUMBER .)


state 60

    (67) expression -> REAL .

    THEN            reduce using rule 67 (expression -> REAL .)
    AND             reduce using rule 67 (expression -> REAL .)
    OR              reduce using rule 67 (expression -> REAL .)
    LT              reduce using rule 67 (expression -> REAL .)
    LE              reduce using rule 67 (expression -> REAL .)
    GT              reduce using rule 67 (expression -> REAL .)
    GE              reduce using rule 67 (expression -> REAL .)
    EQ              reduce using rule 67 (expression -> REAL .)
    NEQ             reduce using rule 67 (expression -> REAL .)
    DIV             reduce using rule 67 (expression -> REAL .)
    MOD             reduce using rule 67 (expression -> REAL .)
    PLUS            reduce using rule 67 (expression -> REAL .)
    MINUS           reduce using rule 67 (expression -> REAL .)
    TIMES           reduce using rule 67 (expression -> REAL .)
    DIVIDE          reduce using rule 67 (expression -> REAL .)
    DO              reduce using rule 67 (expression -> REAL .)
    SEMI            reduce using rule 67 (expression -> REAL .)
    RPAREN          reduce using rule 67 (expression -> REAL .)
    COMMA           reduce using rule 67 (expression -> REAL .)
    TO              reduce using rule 67 (expression -> REAL .)


state 61

    (60) while_statement -> WHILE expression . DO statement
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    DO              shift and go to state 99
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 62

    (16) function -> FUNCTION ID LPAREN . param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI
    (17) param_list -> . ID COLON type
    (18) param_list -> . param_list SEMI ID COLON type

    ID              shift and go to state 100

    param_list                     shift and go to state 101

state 63

    (7) var_declaration -> id_list COLON type . SEMI

    SEMI            shift and go to state 102


state 64

    (10) type -> INTEGER .

    SEMI            reduce using rule 10 (type -> INTEGER .)
    RPAREN          reduce using rule 10 (type -> INTEGER .)


state 65

    (11) type -> BOOLEAN .

    SEMI            reduce using rule 11 (type -> BOOLEAN .)
    RPAREN          reduce using rule 11 (type -> BOOLEAN .)


state 66

    (12) type -> STRING .

    SEMI            reduce using rule 12 (type -> STRING .)
    RPAREN          reduce using rule 12 (type -> STRING .)


state 67

    (13) type -> REAL .

    SEMI            reduce using rule 13 (type -> REAL .)
    RPAREN          reduce using rule 13 (type -> REAL .)


state 68

    (9) id_list -> ID COMMA id_list .

    COLON           reduce using rule 9 (id_list -> ID COMMA id_list .)


state 69

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statement_list END . DOT

    DOT             shift and go to state 103


state 70

    (34) assignment_statement -> ID ASSIGN expression . SEMI
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 104
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 71

    (57) statement_compound -> BEGIN statement_list END .

    SEMI            reduce using rule 57 (statement_compound -> BEGIN statement_list END .)
    END             reduce using rule 57 (statement_compound -> BEGIN statement_list END .)
    ELSE            reduce using rule 57 (statement_compound -> BEGIN statement_list END .)


state 72

    (2) program -> PROGRAM ID SEMI declarations BEGIN statement_list END DOT .

    $end            reduce using rule 2 (program -> PROGRAM ID SEMI declarations BEGIN statement_list END DOT .)


state 73

    (23) statement_list -> statement SEMI statement_list .

    END             reduce using rule 23 (statement_list -> statement SEMI statement_list .)


state 74

    (35) writeln_statement -> WRITELN LPAREN writelist . RPAREN SEMI
    (37) writelist -> writelist . COMMA writeitem

    RPAREN          shift and go to state 105
    COMMA           shift and go to state 106


state 75

    (38) writelist -> writeitem .

    RPAREN          reduce using rule 38 (writelist -> writeitem .)
    COMMA           reduce using rule 38 (writelist -> writeitem .)


state 76

    (39) writeitem -> STRING_LITERAL .

    RPAREN          reduce using rule 39 (writeitem -> STRING_LITERAL .)
    COMMA           reduce using rule 39 (writeitem -> STRING_LITERAL .)


state 77

    (40) writeitem -> expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 40 (writeitem -> expression .)
    COMMA           reduce using rule 40 (writeitem -> expression .)
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 78

    (36) write_statement -> WRITE LPAREN writelist . RPAREN SEMI
    (37) writelist -> writelist . COMMA writeitem

    RPAREN          shift and go to state 107
    COMMA           shift and go to state 106


state 79

    (41) readln_statement -> READLN LPAREN ID . RPAREN SEMI

    RPAREN          shift and go to state 108


state 80

    (42) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 109

state 81

    (58) if_statement -> IF expression THEN . statement
    (59) if_statement -> IF expression THEN . statement ELSE statement
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) assignment_statement -> . ID ASSIGN expression SEMI
    (35) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (36) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (41) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (42) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (58) if_statement -> . IF expression THEN statement
    (59) if_statement -> . IF expression THEN statement ELSE statement
    (60) while_statement -> . WHILE expression DO statement
    (57) statement_compound -> . BEGIN statement_list END

    ID              shift and go to state 18
    WRITELN         shift and go to state 32
    WRITE           shift and go to state 33
    READLN          shift and go to state 34
    FOR             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    BEGIN           shift and go to state 20

    statement                      shift and go to state 110
    assignment_statement           shift and go to state 24
    writeln_statement              shift and go to state 25
    write_statement                shift and go to state 26
    readln_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    statement_compound             shift and go to state 31

state 82

    (45) expression -> expression AND . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 111

state 83

    (46) expression -> expression OR . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 112

state 84

    (48) expression -> expression LT . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 113

state 85

    (49) expression -> expression LE . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 114

state 86

    (50) expression -> expression GT . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 115

state 87

    (51) expression -> expression GE . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 116

state 88

    (52) expression -> expression EQ . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 117

state 89

    (53) expression -> expression NEQ . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 118

state 90

    (55) expression -> expression DIV . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 119

state 91

    (56) expression -> expression MOD . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 120

state 92

    (61) expression -> expression PLUS . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 121

state 93

    (62) expression -> expression MINUS . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 122

state 94

    (63) expression -> expression TIMES . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 123

state 95

    (64) expression -> expression DIVIDE . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 124

state 96

    (21) expression -> ID LPAREN . argument_list RPAREN
    (19) argument_list -> . expression
    (20) argument_list -> . argument_list COMMA expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    argument_list                  shift and go to state 125
    expression                     shift and go to state 126

state 97

    (54) expression -> LPAREN expression . RPAREN
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 127
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 98

    (47) expression -> NOT expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 47 (expression -> NOT expression .)
    AND             reduce using rule 47 (expression -> NOT expression .)
    OR              reduce using rule 47 (expression -> NOT expression .)
    LT              reduce using rule 47 (expression -> NOT expression .)
    LE              reduce using rule 47 (expression -> NOT expression .)
    GT              reduce using rule 47 (expression -> NOT expression .)
    GE              reduce using rule 47 (expression -> NOT expression .)
    EQ              reduce using rule 47 (expression -> NOT expression .)
    NEQ             reduce using rule 47 (expression -> NOT expression .)
    DIV             reduce using rule 47 (expression -> NOT expression .)
    MOD             reduce using rule 47 (expression -> NOT expression .)
    PLUS            reduce using rule 47 (expression -> NOT expression .)
    MINUS           reduce using rule 47 (expression -> NOT expression .)
    TIMES           reduce using rule 47 (expression -> NOT expression .)
    DIVIDE          reduce using rule 47 (expression -> NOT expression .)
    DO              reduce using rule 47 (expression -> NOT expression .)
    SEMI            reduce using rule 47 (expression -> NOT expression .)
    RPAREN          reduce using rule 47 (expression -> NOT expression .)
    COMMA           reduce using rule 47 (expression -> NOT expression .)
    TO              reduce using rule 47 (expression -> NOT expression .)

  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! DIV             [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 99

    (60) while_statement -> WHILE expression DO . statement
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) assignment_statement -> . ID ASSIGN expression SEMI
    (35) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (36) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (41) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (42) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (58) if_statement -> . IF expression THEN statement
    (59) if_statement -> . IF expression THEN statement ELSE statement
    (60) while_statement -> . WHILE expression DO statement
    (57) statement_compound -> . BEGIN statement_list END

    ID              shift and go to state 18
    WRITELN         shift and go to state 32
    WRITE           shift and go to state 33
    READLN          shift and go to state 34
    FOR             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    BEGIN           shift and go to state 20

    statement                      shift and go to state 128
    assignment_statement           shift and go to state 24
    writeln_statement              shift and go to state 25
    write_statement                shift and go to state 26
    readln_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    statement_compound             shift and go to state 31

state 100

    (17) param_list -> ID . COLON type

    COLON           shift and go to state 129


state 101

    (16) function -> FUNCTION ID LPAREN param_list . RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI
    (18) param_list -> param_list . SEMI ID COLON type

    RPAREN          shift and go to state 130
    SEMI            shift and go to state 131


state 102

    (7) var_declaration -> id_list COLON type SEMI .

    ID              reduce using rule 7 (var_declaration -> id_list COLON type SEMI .)
    BEGIN           reduce using rule 7 (var_declaration -> id_list COLON type SEMI .)
    FUNCTION        reduce using rule 7 (var_declaration -> id_list COLON type SEMI .)


state 103

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statement_list END DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMI declarations functions BEGIN statement_list END DOT .)


state 104

    (34) assignment_statement -> ID ASSIGN expression SEMI .

    SEMI            reduce using rule 34 (assignment_statement -> ID ASSIGN expression SEMI .)
    END             reduce using rule 34 (assignment_statement -> ID ASSIGN expression SEMI .)
    ELSE            reduce using rule 34 (assignment_statement -> ID ASSIGN expression SEMI .)


state 105

    (35) writeln_statement -> WRITELN LPAREN writelist RPAREN . SEMI

    SEMI            shift and go to state 132


state 106

    (37) writelist -> writelist COMMA . writeitem
    (39) writeitem -> . STRING_LITERAL
    (40) writeitem -> . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    STRING_LITERAL  shift and go to state 76
    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    writeitem                      shift and go to state 133
    expression                     shift and go to state 77

state 107

    (36) write_statement -> WRITE LPAREN writelist RPAREN . SEMI

    SEMI            shift and go to state 134


state 108

    (41) readln_statement -> READLN LPAREN ID RPAREN . SEMI

    SEMI            shift and go to state 135


state 109

    (42) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    TO              shift and go to state 136
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 110

    (58) if_statement -> IF expression THEN statement .
    (59) if_statement -> IF expression THEN statement . ELSE statement

    SEMI            reduce using rule 58 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 58 (if_statement -> IF expression THEN statement .)
    ELSE            reduce using rule 58 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ shift and go to state 137 ]


state 111

    (45) expression -> expression AND expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 45 (expression -> expression AND expression .)
    AND             reduce using rule 45 (expression -> expression AND expression .)
    OR              reduce using rule 45 (expression -> expression AND expression .)
    DO              reduce using rule 45 (expression -> expression AND expression .)
    SEMI            reduce using rule 45 (expression -> expression AND expression .)
    RPAREN          reduce using rule 45 (expression -> expression AND expression .)
    COMMA           reduce using rule 45 (expression -> expression AND expression .)
    TO              reduce using rule 45 (expression -> expression AND expression .)
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! LT              [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 112

    (46) expression -> expression OR expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 46 (expression -> expression OR expression .)
    OR              reduce using rule 46 (expression -> expression OR expression .)
    DO              reduce using rule 46 (expression -> expression OR expression .)
    SEMI            reduce using rule 46 (expression -> expression OR expression .)
    RPAREN          reduce using rule 46 (expression -> expression OR expression .)
    COMMA           reduce using rule 46 (expression -> expression OR expression .)
    TO              reduce using rule 46 (expression -> expression OR expression .)
    AND             shift and go to state 82
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! AND             [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 83 ]


state 113

    (48) expression -> expression LT expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 48 (expression -> expression LT expression .)
    AND             reduce using rule 48 (expression -> expression LT expression .)
    OR              reduce using rule 48 (expression -> expression LT expression .)
    LT              reduce using rule 48 (expression -> expression LT expression .)
    LE              reduce using rule 48 (expression -> expression LT expression .)
    GT              reduce using rule 48 (expression -> expression LT expression .)
    GE              reduce using rule 48 (expression -> expression LT expression .)
    EQ              reduce using rule 48 (expression -> expression LT expression .)
    NEQ             reduce using rule 48 (expression -> expression LT expression .)
    DO              reduce using rule 48 (expression -> expression LT expression .)
    SEMI            reduce using rule 48 (expression -> expression LT expression .)
    RPAREN          reduce using rule 48 (expression -> expression LT expression .)
    COMMA           reduce using rule 48 (expression -> expression LT expression .)
    TO              reduce using rule 48 (expression -> expression LT expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 48 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 48 (expression -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 48 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 48 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression LT expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 114

    (49) expression -> expression LE expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 49 (expression -> expression LE expression .)
    AND             reduce using rule 49 (expression -> expression LE expression .)
    OR              reduce using rule 49 (expression -> expression LE expression .)
    LT              reduce using rule 49 (expression -> expression LE expression .)
    LE              reduce using rule 49 (expression -> expression LE expression .)
    GT              reduce using rule 49 (expression -> expression LE expression .)
    GE              reduce using rule 49 (expression -> expression LE expression .)
    EQ              reduce using rule 49 (expression -> expression LE expression .)
    NEQ             reduce using rule 49 (expression -> expression LE expression .)
    DO              reduce using rule 49 (expression -> expression LE expression .)
    SEMI            reduce using rule 49 (expression -> expression LE expression .)
    RPAREN          reduce using rule 49 (expression -> expression LE expression .)
    COMMA           reduce using rule 49 (expression -> expression LE expression .)
    TO              reduce using rule 49 (expression -> expression LE expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 49 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 49 (expression -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 49 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 49 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression LE expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 115

    (50) expression -> expression GT expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 50 (expression -> expression GT expression .)
    AND             reduce using rule 50 (expression -> expression GT expression .)
    OR              reduce using rule 50 (expression -> expression GT expression .)
    LT              reduce using rule 50 (expression -> expression GT expression .)
    LE              reduce using rule 50 (expression -> expression GT expression .)
    GT              reduce using rule 50 (expression -> expression GT expression .)
    GE              reduce using rule 50 (expression -> expression GT expression .)
    EQ              reduce using rule 50 (expression -> expression GT expression .)
    NEQ             reduce using rule 50 (expression -> expression GT expression .)
    DO              reduce using rule 50 (expression -> expression GT expression .)
    SEMI            reduce using rule 50 (expression -> expression GT expression .)
    RPAREN          reduce using rule 50 (expression -> expression GT expression .)
    COMMA           reduce using rule 50 (expression -> expression GT expression .)
    TO              reduce using rule 50 (expression -> expression GT expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 116

    (51) expression -> expression GE expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 51 (expression -> expression GE expression .)
    AND             reduce using rule 51 (expression -> expression GE expression .)
    OR              reduce using rule 51 (expression -> expression GE expression .)
    LT              reduce using rule 51 (expression -> expression GE expression .)
    LE              reduce using rule 51 (expression -> expression GE expression .)
    GT              reduce using rule 51 (expression -> expression GE expression .)
    GE              reduce using rule 51 (expression -> expression GE expression .)
    EQ              reduce using rule 51 (expression -> expression GE expression .)
    NEQ             reduce using rule 51 (expression -> expression GE expression .)
    DO              reduce using rule 51 (expression -> expression GE expression .)
    SEMI            reduce using rule 51 (expression -> expression GE expression .)
    RPAREN          reduce using rule 51 (expression -> expression GE expression .)
    COMMA           reduce using rule 51 (expression -> expression GE expression .)
    TO              reduce using rule 51 (expression -> expression GE expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 51 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 51 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression GE expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 117

    (52) expression -> expression EQ expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 52 (expression -> expression EQ expression .)
    AND             reduce using rule 52 (expression -> expression EQ expression .)
    OR              reduce using rule 52 (expression -> expression EQ expression .)
    LT              reduce using rule 52 (expression -> expression EQ expression .)
    LE              reduce using rule 52 (expression -> expression EQ expression .)
    GT              reduce using rule 52 (expression -> expression EQ expression .)
    GE              reduce using rule 52 (expression -> expression EQ expression .)
    EQ              reduce using rule 52 (expression -> expression EQ expression .)
    NEQ             reduce using rule 52 (expression -> expression EQ expression .)
    DO              reduce using rule 52 (expression -> expression EQ expression .)
    SEMI            reduce using rule 52 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 52 (expression -> expression EQ expression .)
    COMMA           reduce using rule 52 (expression -> expression EQ expression .)
    TO              reduce using rule 52 (expression -> expression EQ expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression EQ expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 118

    (53) expression -> expression NEQ expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 53 (expression -> expression NEQ expression .)
    AND             reduce using rule 53 (expression -> expression NEQ expression .)
    OR              reduce using rule 53 (expression -> expression NEQ expression .)
    LT              reduce using rule 53 (expression -> expression NEQ expression .)
    LE              reduce using rule 53 (expression -> expression NEQ expression .)
    GT              reduce using rule 53 (expression -> expression NEQ expression .)
    GE              reduce using rule 53 (expression -> expression NEQ expression .)
    EQ              reduce using rule 53 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 53 (expression -> expression NEQ expression .)
    DO              reduce using rule 53 (expression -> expression NEQ expression .)
    SEMI            reduce using rule 53 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 53 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 53 (expression -> expression NEQ expression .)
    TO              reduce using rule 53 (expression -> expression NEQ expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! PLUS            [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression NEQ expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 119

    (55) expression -> expression DIV expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 55 (expression -> expression DIV expression .)
    AND             reduce using rule 55 (expression -> expression DIV expression .)
    OR              reduce using rule 55 (expression -> expression DIV expression .)
    LT              reduce using rule 55 (expression -> expression DIV expression .)
    LE              reduce using rule 55 (expression -> expression DIV expression .)
    GT              reduce using rule 55 (expression -> expression DIV expression .)
    GE              reduce using rule 55 (expression -> expression DIV expression .)
    EQ              reduce using rule 55 (expression -> expression DIV expression .)
    NEQ             reduce using rule 55 (expression -> expression DIV expression .)
    DIV             reduce using rule 55 (expression -> expression DIV expression .)
    MOD             reduce using rule 55 (expression -> expression DIV expression .)
    PLUS            reduce using rule 55 (expression -> expression DIV expression .)
    MINUS           reduce using rule 55 (expression -> expression DIV expression .)
    TIMES           reduce using rule 55 (expression -> expression DIV expression .)
    DIVIDE          reduce using rule 55 (expression -> expression DIV expression .)
    DO              reduce using rule 55 (expression -> expression DIV expression .)
    SEMI            reduce using rule 55 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 55 (expression -> expression DIV expression .)
    COMMA           reduce using rule 55 (expression -> expression DIV expression .)
    TO              reduce using rule 55 (expression -> expression DIV expression .)

  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! DIV             [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 120

    (56) expression -> expression MOD expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 56 (expression -> expression MOD expression .)
    AND             reduce using rule 56 (expression -> expression MOD expression .)
    OR              reduce using rule 56 (expression -> expression MOD expression .)
    LT              reduce using rule 56 (expression -> expression MOD expression .)
    LE              reduce using rule 56 (expression -> expression MOD expression .)
    GT              reduce using rule 56 (expression -> expression MOD expression .)
    GE              reduce using rule 56 (expression -> expression MOD expression .)
    EQ              reduce using rule 56 (expression -> expression MOD expression .)
    NEQ             reduce using rule 56 (expression -> expression MOD expression .)
    DIV             reduce using rule 56 (expression -> expression MOD expression .)
    MOD             reduce using rule 56 (expression -> expression MOD expression .)
    PLUS            reduce using rule 56 (expression -> expression MOD expression .)
    MINUS           reduce using rule 56 (expression -> expression MOD expression .)
    TIMES           reduce using rule 56 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 56 (expression -> expression MOD expression .)
    DO              reduce using rule 56 (expression -> expression MOD expression .)
    SEMI            reduce using rule 56 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 56 (expression -> expression MOD expression .)
    COMMA           reduce using rule 56 (expression -> expression MOD expression .)
    TO              reduce using rule 56 (expression -> expression MOD expression .)

  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! DIV             [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 121

    (61) expression -> expression PLUS expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 61 (expression -> expression PLUS expression .)
    AND             reduce using rule 61 (expression -> expression PLUS expression .)
    OR              reduce using rule 61 (expression -> expression PLUS expression .)
    LT              reduce using rule 61 (expression -> expression PLUS expression .)
    LE              reduce using rule 61 (expression -> expression PLUS expression .)
    GT              reduce using rule 61 (expression -> expression PLUS expression .)
    GE              reduce using rule 61 (expression -> expression PLUS expression .)
    EQ              reduce using rule 61 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 61 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 61 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 61 (expression -> expression PLUS expression .)
    DO              reduce using rule 61 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 61 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 61 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 61 (expression -> expression PLUS expression .)
    TO              reduce using rule 61 (expression -> expression PLUS expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 61 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression PLUS expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]


state 122

    (62) expression -> expression MINUS expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 62 (expression -> expression MINUS expression .)
    AND             reduce using rule 62 (expression -> expression MINUS expression .)
    OR              reduce using rule 62 (expression -> expression MINUS expression .)
    LT              reduce using rule 62 (expression -> expression MINUS expression .)
    LE              reduce using rule 62 (expression -> expression MINUS expression .)
    GT              reduce using rule 62 (expression -> expression MINUS expression .)
    GE              reduce using rule 62 (expression -> expression MINUS expression .)
    EQ              reduce using rule 62 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 62 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 62 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 62 (expression -> expression MINUS expression .)
    DO              reduce using rule 62 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 62 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 62 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 62 (expression -> expression MINUS expression .)
    TO              reduce using rule 62 (expression -> expression MINUS expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 62 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 62 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 62 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression MINUS expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]


state 123

    (63) expression -> expression TIMES expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 63 (expression -> expression TIMES expression .)
    AND             reduce using rule 63 (expression -> expression TIMES expression .)
    OR              reduce using rule 63 (expression -> expression TIMES expression .)
    LT              reduce using rule 63 (expression -> expression TIMES expression .)
    LE              reduce using rule 63 (expression -> expression TIMES expression .)
    GT              reduce using rule 63 (expression -> expression TIMES expression .)
    GE              reduce using rule 63 (expression -> expression TIMES expression .)
    EQ              reduce using rule 63 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 63 (expression -> expression TIMES expression .)
    DIV             reduce using rule 63 (expression -> expression TIMES expression .)
    MOD             reduce using rule 63 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 63 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 63 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 63 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 63 (expression -> expression TIMES expression .)
    DO              reduce using rule 63 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 63 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 63 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 63 (expression -> expression TIMES expression .)
    TO              reduce using rule 63 (expression -> expression TIMES expression .)

  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! DIV             [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 124

    (64) expression -> expression DIVIDE expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    THEN            reduce using rule 64 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 64 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 64 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 64 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 64 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 64 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 64 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 64 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 64 (expression -> expression DIVIDE expression .)
    DIV             reduce using rule 64 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 64 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 64 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 64 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 64 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 64 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 64 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 64 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 64 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 64 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 64 (expression -> expression DIVIDE expression .)

  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! DIV             [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 125

    (21) expression -> ID LPAREN argument_list . RPAREN
    (20) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 138
    COMMA           shift and go to state 139


state 126

    (19) argument_list -> expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 19 (argument_list -> expression .)
    COMMA           reduce using rule 19 (argument_list -> expression .)
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 127

    (54) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 54 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 54 (expression -> LPAREN expression RPAREN .)


state 128

    (60) while_statement -> WHILE expression DO statement .

    SEMI            reduce using rule 60 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 60 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 60 (while_statement -> WHILE expression DO statement .)


state 129

    (17) param_list -> ID COLON . type
    (10) type -> . INTEGER
    (11) type -> . BOOLEAN
    (12) type -> . STRING
    (13) type -> . REAL

    INTEGER         shift and go to state 64
    BOOLEAN         shift and go to state 65
    STRING          shift and go to state 66
    REAL            shift and go to state 67

    type                           shift and go to state 140

state 130

    (16) function -> FUNCTION ID LPAREN param_list RPAREN . COLON type SEMI declarations BEGIN statement_list END SEMI

    COLON           shift and go to state 141


state 131

    (18) param_list -> param_list SEMI . ID COLON type

    ID              shift and go to state 142


state 132

    (35) writeln_statement -> WRITELN LPAREN writelist RPAREN SEMI .

    SEMI            reduce using rule 35 (writeln_statement -> WRITELN LPAREN writelist RPAREN SEMI .)
    END             reduce using rule 35 (writeln_statement -> WRITELN LPAREN writelist RPAREN SEMI .)
    ELSE            reduce using rule 35 (writeln_statement -> WRITELN LPAREN writelist RPAREN SEMI .)


state 133

    (37) writelist -> writelist COMMA writeitem .

    RPAREN          reduce using rule 37 (writelist -> writelist COMMA writeitem .)
    COMMA           reduce using rule 37 (writelist -> writelist COMMA writeitem .)


state 134

    (36) write_statement -> WRITE LPAREN writelist RPAREN SEMI .

    SEMI            reduce using rule 36 (write_statement -> WRITE LPAREN writelist RPAREN SEMI .)
    END             reduce using rule 36 (write_statement -> WRITE LPAREN writelist RPAREN SEMI .)
    ELSE            reduce using rule 36 (write_statement -> WRITE LPAREN writelist RPAREN SEMI .)


state 135

    (41) readln_statement -> READLN LPAREN ID RPAREN SEMI .

    SEMI            reduce using rule 41 (readln_statement -> READLN LPAREN ID RPAREN SEMI .)
    END             reduce using rule 41 (readln_statement -> READLN LPAREN ID RPAREN SEMI .)
    ELSE            reduce using rule 41 (readln_statement -> READLN LPAREN ID RPAREN SEMI .)


state 136

    (42) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 143

state 137

    (59) if_statement -> IF expression THEN statement ELSE . statement
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) assignment_statement -> . ID ASSIGN expression SEMI
    (35) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (36) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (41) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (42) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (58) if_statement -> . IF expression THEN statement
    (59) if_statement -> . IF expression THEN statement ELSE statement
    (60) while_statement -> . WHILE expression DO statement
    (57) statement_compound -> . BEGIN statement_list END

    ID              shift and go to state 18
    WRITELN         shift and go to state 32
    WRITE           shift and go to state 33
    READLN          shift and go to state 34
    FOR             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    BEGIN           shift and go to state 20

    statement                      shift and go to state 144
    assignment_statement           shift and go to state 24
    writeln_statement              shift and go to state 25
    write_statement                shift and go to state 26
    readln_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    statement_compound             shift and go to state 31

state 138

    (21) expression -> ID LPAREN argument_list RPAREN .

    THEN            reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    AND             reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    OR              reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    LT              reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    LE              reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    GT              reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    GE              reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    EQ              reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    NEQ             reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    DIV             reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    MOD             reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    DO              reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    SEMI            reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)
    TO              reduce using rule 21 (expression -> ID LPAREN argument_list RPAREN .)


state 139

    (20) argument_list -> argument_list COMMA . expression
    (21) expression -> . ID LPAREN argument_list RPAREN
    (43) expression -> . TRUE
    (44) expression -> . FALSE
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . NOT expression
    (48) expression -> . expression LT expression
    (49) expression -> . expression LE expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression GE expression
    (52) expression -> . expression EQ expression
    (53) expression -> . expression NEQ expression
    (54) expression -> . LPAREN expression RPAREN
    (55) expression -> . expression DIV expression
    (56) expression -> . expression MOD expression
    (61) expression -> . expression PLUS expression
    (62) expression -> . expression MINUS expression
    (63) expression -> . expression TIMES expression
    (64) expression -> . expression DIVIDE expression
    (65) expression -> . ID
    (66) expression -> . NUMBER
    (67) expression -> . REAL

    ID              shift and go to state 54
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NOT             shift and go to state 58
    LPAREN          shift and go to state 55
    NUMBER          shift and go to state 59
    REAL            shift and go to state 60

    expression                     shift and go to state 145

state 140

    (17) param_list -> ID COLON type .

    RPAREN          reduce using rule 17 (param_list -> ID COLON type .)
    SEMI            reduce using rule 17 (param_list -> ID COLON type .)


state 141

    (16) function -> FUNCTION ID LPAREN param_list RPAREN COLON . type SEMI declarations BEGIN statement_list END SEMI
    (10) type -> . INTEGER
    (11) type -> . BOOLEAN
    (12) type -> . STRING
    (13) type -> . REAL

    INTEGER         shift and go to state 64
    BOOLEAN         shift and go to state 65
    STRING          shift and go to state 66
    REAL            shift and go to state 67

    type                           shift and go to state 146

state 142

    (18) param_list -> param_list SEMI ID . COLON type

    COLON           shift and go to state 147


state 143

    (42) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    DO              shift and go to state 148
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 144

    (59) if_statement -> IF expression THEN statement ELSE statement .

    SEMI            reduce using rule 59 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 59 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 59 (if_statement -> IF expression THEN statement ELSE statement .)


state 145

    (20) argument_list -> argument_list COMMA expression .
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (48) expression -> expression . LT expression
    (49) expression -> expression . LE expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . GE expression
    (52) expression -> expression . EQ expression
    (53) expression -> expression . NEQ expression
    (55) expression -> expression . DIV expression
    (56) expression -> expression . MOD expression
    (61) expression -> expression . PLUS expression
    (62) expression -> expression . MINUS expression
    (63) expression -> expression . TIMES expression
    (64) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 20 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 20 (argument_list -> argument_list COMMA expression .)
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 146

    (16) function -> FUNCTION ID LPAREN param_list RPAREN COLON type . SEMI declarations BEGIN statement_list END SEMI

    SEMI            shift and go to state 149


state 147

    (18) param_list -> param_list SEMI ID COLON . type
    (10) type -> . INTEGER
    (11) type -> . BOOLEAN
    (12) type -> . STRING
    (13) type -> . REAL

    INTEGER         shift and go to state 64
    BOOLEAN         shift and go to state 65
    STRING          shift and go to state 66
    REAL            shift and go to state 67

    type                           shift and go to state 150

state 148

    (42) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) assignment_statement -> . ID ASSIGN expression SEMI
    (35) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (36) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (41) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (42) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (58) if_statement -> . IF expression THEN statement
    (59) if_statement -> . IF expression THEN statement ELSE statement
    (60) while_statement -> . WHILE expression DO statement
    (57) statement_compound -> . BEGIN statement_list END

    ID              shift and go to state 18
    WRITELN         shift and go to state 32
    WRITE           shift and go to state 33
    READLN          shift and go to state 34
    FOR             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    BEGIN           shift and go to state 20

    statement                      shift and go to state 151
    assignment_statement           shift and go to state 24
    writeln_statement              shift and go to state 25
    write_statement                shift and go to state 26
    readln_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    statement_compound             shift and go to state 31

state 149

    (16) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI . declarations BEGIN statement_list END SEMI
    (3) declarations -> . VAR var_declaration_list
    (4) declarations -> . empty
    (68) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 68 (empty -> .)

    declarations                   shift and go to state 152
    empty                          shift and go to state 7

state 150

    (18) param_list -> param_list SEMI ID COLON type .

    RPAREN          reduce using rule 18 (param_list -> param_list SEMI ID COLON type .)
    SEMI            reduce using rule 18 (param_list -> param_list SEMI ID COLON type .)


state 151

    (42) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    SEMI            reduce using rule 42 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    END             reduce using rule 42 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 42 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 152

    (16) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations . BEGIN statement_list END SEMI

    BEGIN           shift and go to state 153


state 153

    (16) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN . statement_list END SEMI
    (22) statement_list -> . statement
    (23) statement_list -> . statement SEMI statement_list
    (24) statement_list -> . SEMI statement_list
    (25) statement_list -> . empty
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (68) empty -> .
    (34) assignment_statement -> . ID ASSIGN expression SEMI
    (35) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (36) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (41) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (42) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (58) if_statement -> . IF expression THEN statement
    (59) if_statement -> . IF expression THEN statement ELSE statement
    (60) while_statement -> . WHILE expression DO statement
    (57) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 19
    END             reduce using rule 68 (empty -> .)
    ID              shift and go to state 18
    WRITELN         shift and go to state 32
    WRITE           shift and go to state 33
    READLN          shift and go to state 34
    FOR             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    BEGIN           shift and go to state 20

    statement_list                 shift and go to state 154
    statement                      shift and go to state 22
    empty                          shift and go to state 23
    assignment_statement           shift and go to state 24
    writeln_statement              shift and go to state 25
    write_statement                shift and go to state 26
    readln_statement               shift and go to state 27
    for_statement                  shift and go to state 28
    if_statement                   shift and go to state 29
    while_statement                shift and go to state 30
    statement_compound             shift and go to state 31

state 154

    (16) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list . END SEMI

    END             shift and go to state 155


state 155

    (16) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END . SEMI

    SEMI            shift and go to state 156


state 156

    (16) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI .

    FUNCTION        reduce using rule 16 (function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI .)
    BEGIN           reduce using rule 16 (function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BEGIN in state 5 resolved as shift
