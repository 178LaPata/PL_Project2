Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CASE
    CONST
    DOWNTO
    FILE
    GOTO
    IN
    LABEL
    NIL
    NOT
    PACKED
    PROCEDURE
    READ
    RECORD
    REPEAT
    SET
    TYPE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMI declarations functions BEGIN statements END DOT
Rule 2     declarations -> VAR var_declaration_list
Rule 3     declarations -> empty
Rule 4     var_declaration_list -> var_declaration_list var_declaration
Rule 5     var_declaration_list -> var_declaration
Rule 6     var_declaration -> id_list COLON type SEMI
Rule 7     id_list -> ID
Rule 8     id_list -> ID COMMA id_list
Rule 9     type -> simple_type
Rule 10    type -> array_type
Rule 11    simple_type -> INTEGER
Rule 12    simple_type -> BOOLEAN
Rule 13    simple_type -> STRING
Rule 14    simple_type -> REAL
Rule 15    array_type -> ARRAY LBRACKET index_range RBRACKET OF type
Rule 16    index_range -> NUMBER DOTDOT NUMBER
Rule 17    functions -> function functions
Rule 18    functions -> empty
Rule 19    function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
Rule 20    param_list -> ID COLON type
Rule 21    param_list -> param_list SEMI ID COLON type
Rule 22    argument_list -> expression
Rule 23    argument_list -> argument_list COMMA expression
Rule 24    expression -> ID LPAREN argument_list RPAREN
Rule 25    statements -> statement_sequence
Rule 26    statement_sequence -> statement
Rule 27    statement_sequence -> statement_sequence SEMI statement
Rule 28    statement -> assignment_statement
Rule 29    statement -> writeln_statement
Rule 30    statement -> write_statement
Rule 31    statement -> readln_statement
Rule 32    statement -> for_statement
Rule 33    statement -> if_statement
Rule 34    statement -> while_statement
Rule 35    statement -> statement_compound
Rule 36    statement -> concrete_empty_statement
Rule 37    concrete_empty_statement -> <empty>
Rule 38    assignment_statement -> ID ASSIGN expression
Rule 39    writeln_statement -> WRITELN LPAREN writelist RPAREN
Rule 40    write_statement -> WRITE LPAREN writelist RPAREN
Rule 41    writelist -> writelist COMMA writeitem
Rule 42    writelist -> writeitem
Rule 43    writeitem -> STRING_LITERAL
Rule 44    writeitem -> expression
Rule 45    readln_statement -> READLN LPAREN ID RPAREN
Rule 46    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 47    expression -> TRUE
Rule 48    expression -> FALSE
Rule 49    expression -> expression AND expression
Rule 50    expression -> expression OR expression
Rule 51    expression -> expression LT expression
Rule 52    expression -> expression LE expression
Rule 53    expression -> expression GT expression
Rule 54    expression -> expression GE expression
Rule 55    expression -> expression EQ expression
Rule 56    expression -> expression NEQ expression
Rule 57    expression -> LPAREN expression RPAREN
Rule 58    expression -> expression DIV expression
Rule 59    expression -> expression MOD expression
Rule 60    statement_compound -> BEGIN statements END
Rule 61    if_statement -> IF expression THEN statement
Rule 62    if_statement -> IF expression THEN statement ELSE statement
Rule 63    while_statement -> WHILE expression DO statement
Rule 64    expression -> expression PLUS expression
Rule 65    expression -> expression MINUS expression
Rule 66    expression -> expression TIMES expression
Rule 67    expression -> expression DIVIDE expression
Rule 68    expression -> ID
Rule 69    expression -> NUMBER
Rule 70    expression -> REAL
Rule 71    empty -> <empty>

Terminals, with rules where they appear

AND                  : 49
ARRAY                : 15
ASSIGN               : 38 46
BEGIN                : 1 19 60
BOOLEAN              : 12
CASE                 : 
COLON                : 6 19 20 21
COMMA                : 8 23 41
CONST                : 
DIV                  : 58
DIVIDE               : 67
DO                   : 46 63
DOT                  : 1
DOTDOT               : 16
DOWNTO               : 
ELSE                 : 62
END                  : 1 19 60
EQ                   : 55
FALSE                : 48
FILE                 : 
FOR                  : 46
FUNCTION             : 19
GE                   : 54
GOTO                 : 
GT                   : 53
ID                   : 1 7 8 19 20 21 24 38 45 46 68
IF                   : 61 62
IN                   : 
INTEGER              : 11
LABEL                : 
LBRACKET             : 15
LE                   : 52
LPAREN               : 19 24 39 40 45 57
LT                   : 51
MINUS                : 65
MOD                  : 59
NEQ                  : 56
NIL                  : 
NOT                  : 
NUMBER               : 16 16 69
OF                   : 15
OR                   : 50
PACKED               : 
PLUS                 : 64
PROCEDURE            : 
PROGRAM              : 1
RBRACKET             : 15
READ                 : 
READLN               : 45
REAL                 : 14 70
RECORD               : 
REPEAT               : 
RPAREN               : 19 24 39 40 45 57
SEMI                 : 1 6 19 19 21 27
SET                  : 
STRING               : 13
STRING_LITERAL       : 43
THEN                 : 61 62
TIMES                : 66
TO                   : 46
TRUE                 : 47
TYPE                 : 
UNTIL                : 
VAR                  : 2
WHILE                : 63
WITH                 : 
WRITE                : 40
WRITELN              : 39
error                : 

Nonterminals, with rules where they appear

argument_list        : 23 24
array_type           : 10
assignment_statement : 28
concrete_empty_statement : 36
declarations         : 1 19
empty                : 3 18
expression           : 22 23 38 44 46 46 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 58 58 59 59 61 62 63 64 64 65 65 66 66 67 67
for_statement        : 32
function             : 17
functions            : 1 17
id_list              : 6 8
if_statement         : 33
index_range          : 15
param_list           : 19 21
program              : 0
readln_statement     : 31
simple_type          : 9
statement            : 26 27 46 61 62 62 63
statement_compound   : 35
statement_sequence   : 25 27
statements           : 1 19 60
type                 : 6 15 19 20 21
var_declaration      : 4 5
var_declaration_list : 2 4
while_statement      : 34
write_statement      : 30
writeitem            : 41 42
writelist            : 39 40 41
writeln_statement    : 29

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMI declarations functions BEGIN statements END DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMI declarations functions BEGIN statements END DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMI declarations functions BEGIN statements END DOT

    SEMI            shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMI . declarations functions BEGIN statements END DOT
    (2) declarations -> . VAR var_declaration_list
    (3) declarations -> . empty
    (71) empty -> .

    VAR             shift and go to state 6
    FUNCTION        reduce using rule 71 (empty -> .)
    BEGIN           reduce using rule 71 (empty -> .)

    declarations                   shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMI declarations . functions BEGIN statements END DOT
    (17) functions -> . function functions
    (18) functions -> . empty
    (19) function -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (71) empty -> .

    FUNCTION        shift and go to state 11
    BEGIN           reduce using rule 71 (empty -> .)

    functions                      shift and go to state 8
    function                       shift and go to state 9
    empty                          shift and go to state 10

state 6

    (2) declarations -> VAR . var_declaration_list
    (4) var_declaration_list -> . var_declaration_list var_declaration
    (5) var_declaration_list -> . var_declaration
    (6) var_declaration -> . id_list COLON type SEMI
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    ID              shift and go to state 15

    var_declaration_list           shift and go to state 12
    var_declaration                shift and go to state 13
    id_list                        shift and go to state 14

state 7

    (3) declarations -> empty .

    FUNCTION        reduce using rule 3 (declarations -> empty .)
    BEGIN           reduce using rule 3 (declarations -> empty .)


state 8

    (1) program -> PROGRAM ID SEMI declarations functions . BEGIN statements END DOT

    BEGIN           shift and go to state 16


state 9

    (17) functions -> function . functions
    (17) functions -> . function functions
    (18) functions -> . empty
    (19) function -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (71) empty -> .

    FUNCTION        shift and go to state 11
    BEGIN           reduce using rule 71 (empty -> .)

    function                       shift and go to state 9
    functions                      shift and go to state 17
    empty                          shift and go to state 10

state 10

    (18) functions -> empty .

    BEGIN           reduce using rule 18 (functions -> empty .)


state 11

    (19) function -> FUNCTION . ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI

    ID              shift and go to state 18


state 12

    (2) declarations -> VAR var_declaration_list .
    (4) var_declaration_list -> var_declaration_list . var_declaration
    (6) var_declaration -> . id_list COLON type SEMI
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    FUNCTION        reduce using rule 2 (declarations -> VAR var_declaration_list .)
    BEGIN           reduce using rule 2 (declarations -> VAR var_declaration_list .)
    ID              shift and go to state 15

    var_declaration                shift and go to state 19
    id_list                        shift and go to state 14

state 13

    (5) var_declaration_list -> var_declaration .

    ID              reduce using rule 5 (var_declaration_list -> var_declaration .)
    FUNCTION        reduce using rule 5 (var_declaration_list -> var_declaration .)
    BEGIN           reduce using rule 5 (var_declaration_list -> var_declaration .)


state 14

    (6) var_declaration -> id_list . COLON type SEMI

    COLON           shift and go to state 20


state 15

    (7) id_list -> ID .
    (8) id_list -> ID . COMMA id_list

    COLON           reduce using rule 7 (id_list -> ID .)
    COMMA           shift and go to state 21


state 16

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN . statements END DOT
    (25) statements -> . statement_sequence
    (26) statement_sequence -> . statement
    (27) statement_sequence -> . statement_sequence SEMI statement
    (28) statement -> . assignment_statement
    (29) statement -> . writeln_statement
    (30) statement -> . write_statement
    (31) statement -> . readln_statement
    (32) statement -> . for_statement
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . statement_compound
    (36) statement -> . concrete_empty_statement
    (38) assignment_statement -> . ID ASSIGN expression
    (39) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (40) write_statement -> . WRITE LPAREN writelist RPAREN
    (45) readln_statement -> . READLN LPAREN ID RPAREN
    (46) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (61) if_statement -> . IF expression THEN statement
    (62) if_statement -> . IF expression THEN statement ELSE statement
    (63) while_statement -> . WHILE expression DO statement
    (60) statement_compound -> . BEGIN statements END
    (37) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 37 (concrete_empty_statement -> .)
    END             reduce using rule 37 (concrete_empty_statement -> .)

    statements                     shift and go to state 24
    statement_sequence             shift and go to state 25
    statement                      shift and go to state 26
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35

state 17

    (17) functions -> function functions .

    BEGIN           reduce using rule 17 (functions -> function functions .)


state 18

    (19) function -> FUNCTION ID . LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI

    LPAREN          shift and go to state 42


state 19

    (4) var_declaration_list -> var_declaration_list var_declaration .

    ID              reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)
    FUNCTION        reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)
    BEGIN           reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)


state 20

    (6) var_declaration -> id_list COLON . type SEMI
    (9) type -> . simple_type
    (10) type -> . array_type
    (11) simple_type -> . INTEGER
    (12) simple_type -> . BOOLEAN
    (13) simple_type -> . STRING
    (14) simple_type -> . REAL
    (15) array_type -> . ARRAY LBRACKET index_range RBRACKET OF type

    INTEGER         shift and go to state 46
    BOOLEAN         shift and go to state 47
    STRING          shift and go to state 48
    REAL            shift and go to state 49
    ARRAY           shift and go to state 50

    type                           shift and go to state 43
    simple_type                    shift and go to state 44
    array_type                     shift and go to state 45

state 21

    (8) id_list -> ID COMMA . id_list
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    ID              shift and go to state 15

    id_list                        shift and go to state 51

state 22

    (38) assignment_statement -> ID . ASSIGN expression

    ASSIGN          shift and go to state 52


state 23

    (60) statement_compound -> BEGIN . statements END
    (25) statements -> . statement_sequence
    (26) statement_sequence -> . statement
    (27) statement_sequence -> . statement_sequence SEMI statement
    (28) statement -> . assignment_statement
    (29) statement -> . writeln_statement
    (30) statement -> . write_statement
    (31) statement -> . readln_statement
    (32) statement -> . for_statement
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . statement_compound
    (36) statement -> . concrete_empty_statement
    (38) assignment_statement -> . ID ASSIGN expression
    (39) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (40) write_statement -> . WRITE LPAREN writelist RPAREN
    (45) readln_statement -> . READLN LPAREN ID RPAREN
    (46) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (61) if_statement -> . IF expression THEN statement
    (62) if_statement -> . IF expression THEN statement ELSE statement
    (63) while_statement -> . WHILE expression DO statement
    (60) statement_compound -> . BEGIN statements END
    (37) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 37 (concrete_empty_statement -> .)
    END             reduce using rule 37 (concrete_empty_statement -> .)

    statements                     shift and go to state 53
    statement_sequence             shift and go to state 25
    statement                      shift and go to state 26
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35

state 24

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statements . END DOT

    END             shift and go to state 54


state 25

    (25) statements -> statement_sequence .
    (27) statement_sequence -> statement_sequence . SEMI statement

    END             reduce using rule 25 (statements -> statement_sequence .)
    SEMI            shift and go to state 55


state 26

    (26) statement_sequence -> statement .

    SEMI            reduce using rule 26 (statement_sequence -> statement .)
    END             reduce using rule 26 (statement_sequence -> statement .)


state 27

    (28) statement -> assignment_statement .

    SEMI            reduce using rule 28 (statement -> assignment_statement .)
    END             reduce using rule 28 (statement -> assignment_statement .)
    ELSE            reduce using rule 28 (statement -> assignment_statement .)


state 28

    (29) statement -> writeln_statement .

    SEMI            reduce using rule 29 (statement -> writeln_statement .)
    END             reduce using rule 29 (statement -> writeln_statement .)
    ELSE            reduce using rule 29 (statement -> writeln_statement .)


state 29

    (30) statement -> write_statement .

    SEMI            reduce using rule 30 (statement -> write_statement .)
    END             reduce using rule 30 (statement -> write_statement .)
    ELSE            reduce using rule 30 (statement -> write_statement .)


state 30

    (31) statement -> readln_statement .

    SEMI            reduce using rule 31 (statement -> readln_statement .)
    END             reduce using rule 31 (statement -> readln_statement .)
    ELSE            reduce using rule 31 (statement -> readln_statement .)


state 31

    (32) statement -> for_statement .

    SEMI            reduce using rule 32 (statement -> for_statement .)
    END             reduce using rule 32 (statement -> for_statement .)
    ELSE            reduce using rule 32 (statement -> for_statement .)


state 32

    (33) statement -> if_statement .

    SEMI            reduce using rule 33 (statement -> if_statement .)
    END             reduce using rule 33 (statement -> if_statement .)
    ELSE            reduce using rule 33 (statement -> if_statement .)


state 33

    (34) statement -> while_statement .

    SEMI            reduce using rule 34 (statement -> while_statement .)
    END             reduce using rule 34 (statement -> while_statement .)
    ELSE            reduce using rule 34 (statement -> while_statement .)


state 34

    (35) statement -> statement_compound .

    SEMI            reduce using rule 35 (statement -> statement_compound .)
    END             reduce using rule 35 (statement -> statement_compound .)
    ELSE            reduce using rule 35 (statement -> statement_compound .)


state 35

    (36) statement -> concrete_empty_statement .

    SEMI            reduce using rule 36 (statement -> concrete_empty_statement .)
    END             reduce using rule 36 (statement -> concrete_empty_statement .)
    ELSE            reduce using rule 36 (statement -> concrete_empty_statement .)


state 36

    (39) writeln_statement -> WRITELN . LPAREN writelist RPAREN

    LPAREN          shift and go to state 56


state 37

    (40) write_statement -> WRITE . LPAREN writelist RPAREN

    LPAREN          shift and go to state 57


state 38

    (45) readln_statement -> READLN . LPAREN ID RPAREN

    LPAREN          shift and go to state 58


state 39

    (46) for_statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 59


state 40

    (61) if_statement -> IF . expression THEN statement
    (62) if_statement -> IF . expression THEN statement ELSE statement
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 60

state 41

    (63) while_statement -> WHILE . expression DO statement
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 67

state 42

    (19) function -> FUNCTION ID LPAREN . param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (20) param_list -> . ID COLON type
    (21) param_list -> . param_list SEMI ID COLON type

    ID              shift and go to state 68

    param_list                     shift and go to state 69

state 43

    (6) var_declaration -> id_list COLON type . SEMI

    SEMI            shift and go to state 70


state 44

    (9) type -> simple_type .

    SEMI            reduce using rule 9 (type -> simple_type .)
    RPAREN          reduce using rule 9 (type -> simple_type .)


state 45

    (10) type -> array_type .

    SEMI            reduce using rule 10 (type -> array_type .)
    RPAREN          reduce using rule 10 (type -> array_type .)


state 46

    (11) simple_type -> INTEGER .

    SEMI            reduce using rule 11 (simple_type -> INTEGER .)
    RPAREN          reduce using rule 11 (simple_type -> INTEGER .)


state 47

    (12) simple_type -> BOOLEAN .

    SEMI            reduce using rule 12 (simple_type -> BOOLEAN .)
    RPAREN          reduce using rule 12 (simple_type -> BOOLEAN .)


state 48

    (13) simple_type -> STRING .

    SEMI            reduce using rule 13 (simple_type -> STRING .)
    RPAREN          reduce using rule 13 (simple_type -> STRING .)


state 49

    (14) simple_type -> REAL .

    SEMI            reduce using rule 14 (simple_type -> REAL .)
    RPAREN          reduce using rule 14 (simple_type -> REAL .)


state 50

    (15) array_type -> ARRAY . LBRACKET index_range RBRACKET OF type

    LBRACKET        shift and go to state 71


state 51

    (8) id_list -> ID COMMA id_list .

    COLON           reduce using rule 8 (id_list -> ID COMMA id_list .)


state 52

    (38) assignment_statement -> ID ASSIGN . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 72

state 53

    (60) statement_compound -> BEGIN statements . END

    END             shift and go to state 73


state 54

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statements END . DOT

    DOT             shift and go to state 74


state 55

    (27) statement_sequence -> statement_sequence SEMI . statement
    (28) statement -> . assignment_statement
    (29) statement -> . writeln_statement
    (30) statement -> . write_statement
    (31) statement -> . readln_statement
    (32) statement -> . for_statement
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . statement_compound
    (36) statement -> . concrete_empty_statement
    (38) assignment_statement -> . ID ASSIGN expression
    (39) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (40) write_statement -> . WRITE LPAREN writelist RPAREN
    (45) readln_statement -> . READLN LPAREN ID RPAREN
    (46) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (61) if_statement -> . IF expression THEN statement
    (62) if_statement -> . IF expression THEN statement ELSE statement
    (63) while_statement -> . WHILE expression DO statement
    (60) statement_compound -> . BEGIN statements END
    (37) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 37 (concrete_empty_statement -> .)
    END             reduce using rule 37 (concrete_empty_statement -> .)

    statement                      shift and go to state 75
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35

state 56

    (39) writeln_statement -> WRITELN LPAREN . writelist RPAREN
    (41) writelist -> . writelist COMMA writeitem
    (42) writelist -> . writeitem
    (43) writeitem -> . STRING_LITERAL
    (44) writeitem -> . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    STRING_LITERAL  shift and go to state 78
    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    writelist                      shift and go to state 76
    writeitem                      shift and go to state 77
    expression                     shift and go to state 79

state 57

    (40) write_statement -> WRITE LPAREN . writelist RPAREN
    (41) writelist -> . writelist COMMA writeitem
    (42) writelist -> . writeitem
    (43) writeitem -> . STRING_LITERAL
    (44) writeitem -> . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    STRING_LITERAL  shift and go to state 78
    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    writelist                      shift and go to state 80
    writeitem                      shift and go to state 77
    expression                     shift and go to state 79

state 58

    (45) readln_statement -> READLN LPAREN . ID RPAREN

    ID              shift and go to state 81


state 59

    (46) for_statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 82


state 60

    (61) if_statement -> IF expression . THEN statement
    (62) if_statement -> IF expression . THEN statement ELSE statement
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97


state 61

    (24) expression -> ID . LPAREN argument_list RPAREN
    (68) expression -> ID .

    LPAREN          shift and go to state 98
    THEN            reduce using rule 68 (expression -> ID .)
    AND             reduce using rule 68 (expression -> ID .)
    OR              reduce using rule 68 (expression -> ID .)
    LT              reduce using rule 68 (expression -> ID .)
    LE              reduce using rule 68 (expression -> ID .)
    GT              reduce using rule 68 (expression -> ID .)
    GE              reduce using rule 68 (expression -> ID .)
    EQ              reduce using rule 68 (expression -> ID .)
    NEQ             reduce using rule 68 (expression -> ID .)
    DIV             reduce using rule 68 (expression -> ID .)
    MOD             reduce using rule 68 (expression -> ID .)
    PLUS            reduce using rule 68 (expression -> ID .)
    MINUS           reduce using rule 68 (expression -> ID .)
    TIMES           reduce using rule 68 (expression -> ID .)
    DIVIDE          reduce using rule 68 (expression -> ID .)
    DO              reduce using rule 68 (expression -> ID .)
    SEMI            reduce using rule 68 (expression -> ID .)
    END             reduce using rule 68 (expression -> ID .)
    ELSE            reduce using rule 68 (expression -> ID .)
    RPAREN          reduce using rule 68 (expression -> ID .)
    COMMA           reduce using rule 68 (expression -> ID .)
    TO              reduce using rule 68 (expression -> ID .)


state 62

    (57) expression -> LPAREN . expression RPAREN
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 99

state 63

    (47) expression -> TRUE .

    THEN            reduce using rule 47 (expression -> TRUE .)
    AND             reduce using rule 47 (expression -> TRUE .)
    OR              reduce using rule 47 (expression -> TRUE .)
    LT              reduce using rule 47 (expression -> TRUE .)
    LE              reduce using rule 47 (expression -> TRUE .)
    GT              reduce using rule 47 (expression -> TRUE .)
    GE              reduce using rule 47 (expression -> TRUE .)
    EQ              reduce using rule 47 (expression -> TRUE .)
    NEQ             reduce using rule 47 (expression -> TRUE .)
    DIV             reduce using rule 47 (expression -> TRUE .)
    MOD             reduce using rule 47 (expression -> TRUE .)
    PLUS            reduce using rule 47 (expression -> TRUE .)
    MINUS           reduce using rule 47 (expression -> TRUE .)
    TIMES           reduce using rule 47 (expression -> TRUE .)
    DIVIDE          reduce using rule 47 (expression -> TRUE .)
    DO              reduce using rule 47 (expression -> TRUE .)
    SEMI            reduce using rule 47 (expression -> TRUE .)
    END             reduce using rule 47 (expression -> TRUE .)
    ELSE            reduce using rule 47 (expression -> TRUE .)
    RPAREN          reduce using rule 47 (expression -> TRUE .)
    COMMA           reduce using rule 47 (expression -> TRUE .)
    TO              reduce using rule 47 (expression -> TRUE .)


state 64

    (48) expression -> FALSE .

    THEN            reduce using rule 48 (expression -> FALSE .)
    AND             reduce using rule 48 (expression -> FALSE .)
    OR              reduce using rule 48 (expression -> FALSE .)
    LT              reduce using rule 48 (expression -> FALSE .)
    LE              reduce using rule 48 (expression -> FALSE .)
    GT              reduce using rule 48 (expression -> FALSE .)
    GE              reduce using rule 48 (expression -> FALSE .)
    EQ              reduce using rule 48 (expression -> FALSE .)
    NEQ             reduce using rule 48 (expression -> FALSE .)
    DIV             reduce using rule 48 (expression -> FALSE .)
    MOD             reduce using rule 48 (expression -> FALSE .)
    PLUS            reduce using rule 48 (expression -> FALSE .)
    MINUS           reduce using rule 48 (expression -> FALSE .)
    TIMES           reduce using rule 48 (expression -> FALSE .)
    DIVIDE          reduce using rule 48 (expression -> FALSE .)
    DO              reduce using rule 48 (expression -> FALSE .)
    SEMI            reduce using rule 48 (expression -> FALSE .)
    END             reduce using rule 48 (expression -> FALSE .)
    ELSE            reduce using rule 48 (expression -> FALSE .)
    RPAREN          reduce using rule 48 (expression -> FALSE .)
    COMMA           reduce using rule 48 (expression -> FALSE .)
    TO              reduce using rule 48 (expression -> FALSE .)


state 65

    (69) expression -> NUMBER .

    THEN            reduce using rule 69 (expression -> NUMBER .)
    AND             reduce using rule 69 (expression -> NUMBER .)
    OR              reduce using rule 69 (expression -> NUMBER .)
    LT              reduce using rule 69 (expression -> NUMBER .)
    LE              reduce using rule 69 (expression -> NUMBER .)
    GT              reduce using rule 69 (expression -> NUMBER .)
    GE              reduce using rule 69 (expression -> NUMBER .)
    EQ              reduce using rule 69 (expression -> NUMBER .)
    NEQ             reduce using rule 69 (expression -> NUMBER .)
    DIV             reduce using rule 69 (expression -> NUMBER .)
    MOD             reduce using rule 69 (expression -> NUMBER .)
    PLUS            reduce using rule 69 (expression -> NUMBER .)
    MINUS           reduce using rule 69 (expression -> NUMBER .)
    TIMES           reduce using rule 69 (expression -> NUMBER .)
    DIVIDE          reduce using rule 69 (expression -> NUMBER .)
    DO              reduce using rule 69 (expression -> NUMBER .)
    SEMI            reduce using rule 69 (expression -> NUMBER .)
    END             reduce using rule 69 (expression -> NUMBER .)
    ELSE            reduce using rule 69 (expression -> NUMBER .)
    RPAREN          reduce using rule 69 (expression -> NUMBER .)
    COMMA           reduce using rule 69 (expression -> NUMBER .)
    TO              reduce using rule 69 (expression -> NUMBER .)


state 66

    (70) expression -> REAL .

    THEN            reduce using rule 70 (expression -> REAL .)
    AND             reduce using rule 70 (expression -> REAL .)
    OR              reduce using rule 70 (expression -> REAL .)
    LT              reduce using rule 70 (expression -> REAL .)
    LE              reduce using rule 70 (expression -> REAL .)
    GT              reduce using rule 70 (expression -> REAL .)
    GE              reduce using rule 70 (expression -> REAL .)
    EQ              reduce using rule 70 (expression -> REAL .)
    NEQ             reduce using rule 70 (expression -> REAL .)
    DIV             reduce using rule 70 (expression -> REAL .)
    MOD             reduce using rule 70 (expression -> REAL .)
    PLUS            reduce using rule 70 (expression -> REAL .)
    MINUS           reduce using rule 70 (expression -> REAL .)
    TIMES           reduce using rule 70 (expression -> REAL .)
    DIVIDE          reduce using rule 70 (expression -> REAL .)
    DO              reduce using rule 70 (expression -> REAL .)
    SEMI            reduce using rule 70 (expression -> REAL .)
    END             reduce using rule 70 (expression -> REAL .)
    ELSE            reduce using rule 70 (expression -> REAL .)
    RPAREN          reduce using rule 70 (expression -> REAL .)
    COMMA           reduce using rule 70 (expression -> REAL .)
    TO              reduce using rule 70 (expression -> REAL .)


state 67

    (63) while_statement -> WHILE expression . DO statement
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    DO              shift and go to state 100
    AND             shift and go to state 84
    OR              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97


state 68

    (20) param_list -> ID . COLON type

    COLON           shift and go to state 101


state 69

    (19) function -> FUNCTION ID LPAREN param_list . RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (21) param_list -> param_list . SEMI ID COLON type

    RPAREN          shift and go to state 102
    SEMI            shift and go to state 103


state 70

    (6) var_declaration -> id_list COLON type SEMI .

    ID              reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)
    FUNCTION        reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)
    BEGIN           reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)


state 71

    (15) array_type -> ARRAY LBRACKET . index_range RBRACKET OF type
    (16) index_range -> . NUMBER DOTDOT NUMBER

    NUMBER          shift and go to state 105

    index_range                    shift and go to state 104

state 72

    (38) assignment_statement -> ID ASSIGN expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    SEMI            reduce using rule 38 (assignment_statement -> ID ASSIGN expression .)
    END             reduce using rule 38 (assignment_statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 38 (assignment_statement -> ID ASSIGN expression .)
    AND             shift and go to state 84
    OR              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97


state 73

    (60) statement_compound -> BEGIN statements END .

    SEMI            reduce using rule 60 (statement_compound -> BEGIN statements END .)
    END             reduce using rule 60 (statement_compound -> BEGIN statements END .)
    ELSE            reduce using rule 60 (statement_compound -> BEGIN statements END .)


state 74

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statements END DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMI declarations functions BEGIN statements END DOT .)


state 75

    (27) statement_sequence -> statement_sequence SEMI statement .

    SEMI            reduce using rule 27 (statement_sequence -> statement_sequence SEMI statement .)
    END             reduce using rule 27 (statement_sequence -> statement_sequence SEMI statement .)


state 76

    (39) writeln_statement -> WRITELN LPAREN writelist . RPAREN
    (41) writelist -> writelist . COMMA writeitem

    RPAREN          shift and go to state 106
    COMMA           shift and go to state 107


state 77

    (42) writelist -> writeitem .

    RPAREN          reduce using rule 42 (writelist -> writeitem .)
    COMMA           reduce using rule 42 (writelist -> writeitem .)


state 78

    (43) writeitem -> STRING_LITERAL .

    RPAREN          reduce using rule 43 (writeitem -> STRING_LITERAL .)
    COMMA           reduce using rule 43 (writeitem -> STRING_LITERAL .)


state 79

    (44) writeitem -> expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 44 (writeitem -> expression .)
    COMMA           reduce using rule 44 (writeitem -> expression .)
    AND             shift and go to state 84
    OR              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97


state 80

    (40) write_statement -> WRITE LPAREN writelist . RPAREN
    (41) writelist -> writelist . COMMA writeitem

    RPAREN          shift and go to state 108
    COMMA           shift and go to state 107


state 81

    (45) readln_statement -> READLN LPAREN ID . RPAREN

    RPAREN          shift and go to state 109


state 82

    (46) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 110

state 83

    (61) if_statement -> IF expression THEN . statement
    (62) if_statement -> IF expression THEN . statement ELSE statement
    (28) statement -> . assignment_statement
    (29) statement -> . writeln_statement
    (30) statement -> . write_statement
    (31) statement -> . readln_statement
    (32) statement -> . for_statement
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . statement_compound
    (36) statement -> . concrete_empty_statement
    (38) assignment_statement -> . ID ASSIGN expression
    (39) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (40) write_statement -> . WRITE LPAREN writelist RPAREN
    (45) readln_statement -> . READLN LPAREN ID RPAREN
    (46) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (61) if_statement -> . IF expression THEN statement
    (62) if_statement -> . IF expression THEN statement ELSE statement
    (63) while_statement -> . WHILE expression DO statement
    (60) statement_compound -> . BEGIN statements END
    (37) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 37 (concrete_empty_statement -> .)
    SEMI            reduce using rule 37 (concrete_empty_statement -> .)
    END             reduce using rule 37 (concrete_empty_statement -> .)

    statement                      shift and go to state 111
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35

state 84

    (49) expression -> expression AND . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 112

state 85

    (50) expression -> expression OR . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 113

state 86

    (51) expression -> expression LT . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 114

state 87

    (52) expression -> expression LE . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 115

state 88

    (53) expression -> expression GT . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 116

state 89

    (54) expression -> expression GE . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 117

state 90

    (55) expression -> expression EQ . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 118

state 91

    (56) expression -> expression NEQ . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 119

state 92

    (58) expression -> expression DIV . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 120

state 93

    (59) expression -> expression MOD . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 121

state 94

    (64) expression -> expression PLUS . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 122

state 95

    (65) expression -> expression MINUS . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 123

state 96

    (66) expression -> expression TIMES . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 124

state 97

    (67) expression -> expression DIVIDE . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 125

state 98

    (24) expression -> ID LPAREN . argument_list RPAREN
    (22) argument_list -> . expression
    (23) argument_list -> . argument_list COMMA expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    argument_list                  shift and go to state 126
    expression                     shift and go to state 127

state 99

    (57) expression -> LPAREN expression . RPAREN
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 128
    AND             shift and go to state 84
    OR              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97


state 100

    (63) while_statement -> WHILE expression DO . statement
    (28) statement -> . assignment_statement
    (29) statement -> . writeln_statement
    (30) statement -> . write_statement
    (31) statement -> . readln_statement
    (32) statement -> . for_statement
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . statement_compound
    (36) statement -> . concrete_empty_statement
    (38) assignment_statement -> . ID ASSIGN expression
    (39) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (40) write_statement -> . WRITE LPAREN writelist RPAREN
    (45) readln_statement -> . READLN LPAREN ID RPAREN
    (46) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (61) if_statement -> . IF expression THEN statement
    (62) if_statement -> . IF expression THEN statement ELSE statement
    (63) while_statement -> . WHILE expression DO statement
    (60) statement_compound -> . BEGIN statements END
    (37) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 37 (concrete_empty_statement -> .)
    SEMI            reduce using rule 37 (concrete_empty_statement -> .)
    END             reduce using rule 37 (concrete_empty_statement -> .)

    statement                      shift and go to state 129
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35

state 101

    (20) param_list -> ID COLON . type
    (9) type -> . simple_type
    (10) type -> . array_type
    (11) simple_type -> . INTEGER
    (12) simple_type -> . BOOLEAN
    (13) simple_type -> . STRING
    (14) simple_type -> . REAL
    (15) array_type -> . ARRAY LBRACKET index_range RBRACKET OF type

    INTEGER         shift and go to state 46
    BOOLEAN         shift and go to state 47
    STRING          shift and go to state 48
    REAL            shift and go to state 49
    ARRAY           shift and go to state 50

    type                           shift and go to state 130
    simple_type                    shift and go to state 44
    array_type                     shift and go to state 45

state 102

    (19) function -> FUNCTION ID LPAREN param_list RPAREN . COLON type SEMI declarations BEGIN statements END SEMI

    COLON           shift and go to state 131


state 103

    (21) param_list -> param_list SEMI . ID COLON type

    ID              shift and go to state 132


state 104

    (15) array_type -> ARRAY LBRACKET index_range . RBRACKET OF type

    RBRACKET        shift and go to state 133


state 105

    (16) index_range -> NUMBER . DOTDOT NUMBER

    DOTDOT          shift and go to state 134


state 106

    (39) writeln_statement -> WRITELN LPAREN writelist RPAREN .

    SEMI            reduce using rule 39 (writeln_statement -> WRITELN LPAREN writelist RPAREN .)
    END             reduce using rule 39 (writeln_statement -> WRITELN LPAREN writelist RPAREN .)
    ELSE            reduce using rule 39 (writeln_statement -> WRITELN LPAREN writelist RPAREN .)


state 107

    (41) writelist -> writelist COMMA . writeitem
    (43) writeitem -> . STRING_LITERAL
    (44) writeitem -> . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    STRING_LITERAL  shift and go to state 78
    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    writeitem                      shift and go to state 135
    expression                     shift and go to state 79

state 108

    (40) write_statement -> WRITE LPAREN writelist RPAREN .

    SEMI            reduce using rule 40 (write_statement -> WRITE LPAREN writelist RPAREN .)
    END             reduce using rule 40 (write_statement -> WRITE LPAREN writelist RPAREN .)
    ELSE            reduce using rule 40 (write_statement -> WRITE LPAREN writelist RPAREN .)


state 109

    (45) readln_statement -> READLN LPAREN ID RPAREN .

    SEMI            reduce using rule 45 (readln_statement -> READLN LPAREN ID RPAREN .)
    END             reduce using rule 45 (readln_statement -> READLN LPAREN ID RPAREN .)
    ELSE            reduce using rule 45 (readln_statement -> READLN LPAREN ID RPAREN .)


state 110

    (46) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    TO              shift and go to state 136
    AND             shift and go to state 84
    OR              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97


state 111

    (61) if_statement -> IF expression THEN statement .
    (62) if_statement -> IF expression THEN statement . ELSE statement

    SEMI            reduce using rule 61 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 61 (if_statement -> IF expression THEN statement .)
    ELSE            shift and go to state 137

  ! ELSE            [ reduce using rule 61 (if_statement -> IF expression THEN statement .) ]


state 112

    (49) expression -> expression AND expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 49 (expression -> expression AND expression .)
    AND             reduce using rule 49 (expression -> expression AND expression .)
    OR              reduce using rule 49 (expression -> expression AND expression .)
    DO              reduce using rule 49 (expression -> expression AND expression .)
    SEMI            reduce using rule 49 (expression -> expression AND expression .)
    END             reduce using rule 49 (expression -> expression AND expression .)
    ELSE            reduce using rule 49 (expression -> expression AND expression .)
    RPAREN          reduce using rule 49 (expression -> expression AND expression .)
    COMMA           reduce using rule 49 (expression -> expression AND expression .)
    TO              reduce using rule 49 (expression -> expression AND expression .)
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97

  ! LT              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 113

    (50) expression -> expression OR expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 50 (expression -> expression OR expression .)
    OR              reduce using rule 50 (expression -> expression OR expression .)
    DO              reduce using rule 50 (expression -> expression OR expression .)
    SEMI            reduce using rule 50 (expression -> expression OR expression .)
    END             reduce using rule 50 (expression -> expression OR expression .)
    ELSE            reduce using rule 50 (expression -> expression OR expression .)
    RPAREN          reduce using rule 50 (expression -> expression OR expression .)
    COMMA           reduce using rule 50 (expression -> expression OR expression .)
    TO              reduce using rule 50 (expression -> expression OR expression .)
    AND             shift and go to state 84
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97

  ! AND             [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 85 ]


state 114

    (51) expression -> expression LT expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 51 (expression -> expression LT expression .)
    AND             reduce using rule 51 (expression -> expression LT expression .)
    OR              reduce using rule 51 (expression -> expression LT expression .)
    LT              reduce using rule 51 (expression -> expression LT expression .)
    LE              reduce using rule 51 (expression -> expression LT expression .)
    GT              reduce using rule 51 (expression -> expression LT expression .)
    GE              reduce using rule 51 (expression -> expression LT expression .)
    EQ              reduce using rule 51 (expression -> expression LT expression .)
    NEQ             reduce using rule 51 (expression -> expression LT expression .)
    DO              reduce using rule 51 (expression -> expression LT expression .)
    SEMI            reduce using rule 51 (expression -> expression LT expression .)
    END             reduce using rule 51 (expression -> expression LT expression .)
    ELSE            reduce using rule 51 (expression -> expression LT expression .)
    RPAREN          reduce using rule 51 (expression -> expression LT expression .)
    COMMA           reduce using rule 51 (expression -> expression LT expression .)
    TO              reduce using rule 51 (expression -> expression LT expression .)
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97

  ! DIV             [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]


state 115

    (52) expression -> expression LE expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 52 (expression -> expression LE expression .)
    AND             reduce using rule 52 (expression -> expression LE expression .)
    OR              reduce using rule 52 (expression -> expression LE expression .)
    LT              reduce using rule 52 (expression -> expression LE expression .)
    LE              reduce using rule 52 (expression -> expression LE expression .)
    GT              reduce using rule 52 (expression -> expression LE expression .)
    GE              reduce using rule 52 (expression -> expression LE expression .)
    EQ              reduce using rule 52 (expression -> expression LE expression .)
    NEQ             reduce using rule 52 (expression -> expression LE expression .)
    DO              reduce using rule 52 (expression -> expression LE expression .)
    SEMI            reduce using rule 52 (expression -> expression LE expression .)
    END             reduce using rule 52 (expression -> expression LE expression .)
    ELSE            reduce using rule 52 (expression -> expression LE expression .)
    RPAREN          reduce using rule 52 (expression -> expression LE expression .)
    COMMA           reduce using rule 52 (expression -> expression LE expression .)
    TO              reduce using rule 52 (expression -> expression LE expression .)
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97

  ! DIV             [ reduce using rule 52 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 52 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression LE expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]


state 116

    (53) expression -> expression GT expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 53 (expression -> expression GT expression .)
    AND             reduce using rule 53 (expression -> expression GT expression .)
    OR              reduce using rule 53 (expression -> expression GT expression .)
    LT              reduce using rule 53 (expression -> expression GT expression .)
    LE              reduce using rule 53 (expression -> expression GT expression .)
    GT              reduce using rule 53 (expression -> expression GT expression .)
    GE              reduce using rule 53 (expression -> expression GT expression .)
    EQ              reduce using rule 53 (expression -> expression GT expression .)
    NEQ             reduce using rule 53 (expression -> expression GT expression .)
    DO              reduce using rule 53 (expression -> expression GT expression .)
    SEMI            reduce using rule 53 (expression -> expression GT expression .)
    END             reduce using rule 53 (expression -> expression GT expression .)
    ELSE            reduce using rule 53 (expression -> expression GT expression .)
    RPAREN          reduce using rule 53 (expression -> expression GT expression .)
    COMMA           reduce using rule 53 (expression -> expression GT expression .)
    TO              reduce using rule 53 (expression -> expression GT expression .)
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97

  ! DIV             [ reduce using rule 53 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 53 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression GT expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]


state 117

    (54) expression -> expression GE expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 54 (expression -> expression GE expression .)
    AND             reduce using rule 54 (expression -> expression GE expression .)
    OR              reduce using rule 54 (expression -> expression GE expression .)
    LT              reduce using rule 54 (expression -> expression GE expression .)
    LE              reduce using rule 54 (expression -> expression GE expression .)
    GT              reduce using rule 54 (expression -> expression GE expression .)
    GE              reduce using rule 54 (expression -> expression GE expression .)
    EQ              reduce using rule 54 (expression -> expression GE expression .)
    NEQ             reduce using rule 54 (expression -> expression GE expression .)
    DO              reduce using rule 54 (expression -> expression GE expression .)
    SEMI            reduce using rule 54 (expression -> expression GE expression .)
    END             reduce using rule 54 (expression -> expression GE expression .)
    ELSE            reduce using rule 54 (expression -> expression GE expression .)
    RPAREN          reduce using rule 54 (expression -> expression GE expression .)
    COMMA           reduce using rule 54 (expression -> expression GE expression .)
    TO              reduce using rule 54 (expression -> expression GE expression .)
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97

  ! DIV             [ reduce using rule 54 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 54 (expression -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 54 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression GE expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]


state 118

    (55) expression -> expression EQ expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 55 (expression -> expression EQ expression .)
    AND             reduce using rule 55 (expression -> expression EQ expression .)
    OR              reduce using rule 55 (expression -> expression EQ expression .)
    LT              reduce using rule 55 (expression -> expression EQ expression .)
    LE              reduce using rule 55 (expression -> expression EQ expression .)
    GT              reduce using rule 55 (expression -> expression EQ expression .)
    GE              reduce using rule 55 (expression -> expression EQ expression .)
    EQ              reduce using rule 55 (expression -> expression EQ expression .)
    NEQ             reduce using rule 55 (expression -> expression EQ expression .)
    DO              reduce using rule 55 (expression -> expression EQ expression .)
    SEMI            reduce using rule 55 (expression -> expression EQ expression .)
    END             reduce using rule 55 (expression -> expression EQ expression .)
    ELSE            reduce using rule 55 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 55 (expression -> expression EQ expression .)
    COMMA           reduce using rule 55 (expression -> expression EQ expression .)
    TO              reduce using rule 55 (expression -> expression EQ expression .)
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97

  ! DIV             [ reduce using rule 55 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 55 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression EQ expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]


state 119

    (56) expression -> expression NEQ expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 56 (expression -> expression NEQ expression .)
    AND             reduce using rule 56 (expression -> expression NEQ expression .)
    OR              reduce using rule 56 (expression -> expression NEQ expression .)
    LT              reduce using rule 56 (expression -> expression NEQ expression .)
    LE              reduce using rule 56 (expression -> expression NEQ expression .)
    GT              reduce using rule 56 (expression -> expression NEQ expression .)
    GE              reduce using rule 56 (expression -> expression NEQ expression .)
    EQ              reduce using rule 56 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 56 (expression -> expression NEQ expression .)
    DO              reduce using rule 56 (expression -> expression NEQ expression .)
    SEMI            reduce using rule 56 (expression -> expression NEQ expression .)
    END             reduce using rule 56 (expression -> expression NEQ expression .)
    ELSE            reduce using rule 56 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 56 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 56 (expression -> expression NEQ expression .)
    TO              reduce using rule 56 (expression -> expression NEQ expression .)
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97

  ! DIV             [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! PLUS            [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression NEQ expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]


state 120

    (58) expression -> expression DIV expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 58 (expression -> expression DIV expression .)
    AND             reduce using rule 58 (expression -> expression DIV expression .)
    OR              reduce using rule 58 (expression -> expression DIV expression .)
    LT              reduce using rule 58 (expression -> expression DIV expression .)
    LE              reduce using rule 58 (expression -> expression DIV expression .)
    GT              reduce using rule 58 (expression -> expression DIV expression .)
    GE              reduce using rule 58 (expression -> expression DIV expression .)
    EQ              reduce using rule 58 (expression -> expression DIV expression .)
    NEQ             reduce using rule 58 (expression -> expression DIV expression .)
    DIV             reduce using rule 58 (expression -> expression DIV expression .)
    MOD             reduce using rule 58 (expression -> expression DIV expression .)
    PLUS            reduce using rule 58 (expression -> expression DIV expression .)
    MINUS           reduce using rule 58 (expression -> expression DIV expression .)
    TIMES           reduce using rule 58 (expression -> expression DIV expression .)
    DIVIDE          reduce using rule 58 (expression -> expression DIV expression .)
    DO              reduce using rule 58 (expression -> expression DIV expression .)
    SEMI            reduce using rule 58 (expression -> expression DIV expression .)
    END             reduce using rule 58 (expression -> expression DIV expression .)
    ELSE            reduce using rule 58 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 58 (expression -> expression DIV expression .)
    COMMA           reduce using rule 58 (expression -> expression DIV expression .)
    TO              reduce using rule 58 (expression -> expression DIV expression .)

  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]
  ! DIV             [ shift and go to state 92 ]
  ! MOD             [ shift and go to state 93 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]


state 121

    (59) expression -> expression MOD expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 59 (expression -> expression MOD expression .)
    AND             reduce using rule 59 (expression -> expression MOD expression .)
    OR              reduce using rule 59 (expression -> expression MOD expression .)
    LT              reduce using rule 59 (expression -> expression MOD expression .)
    LE              reduce using rule 59 (expression -> expression MOD expression .)
    GT              reduce using rule 59 (expression -> expression MOD expression .)
    GE              reduce using rule 59 (expression -> expression MOD expression .)
    EQ              reduce using rule 59 (expression -> expression MOD expression .)
    NEQ             reduce using rule 59 (expression -> expression MOD expression .)
    DIV             reduce using rule 59 (expression -> expression MOD expression .)
    MOD             reduce using rule 59 (expression -> expression MOD expression .)
    PLUS            reduce using rule 59 (expression -> expression MOD expression .)
    MINUS           reduce using rule 59 (expression -> expression MOD expression .)
    TIMES           reduce using rule 59 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 59 (expression -> expression MOD expression .)
    DO              reduce using rule 59 (expression -> expression MOD expression .)
    SEMI            reduce using rule 59 (expression -> expression MOD expression .)
    END             reduce using rule 59 (expression -> expression MOD expression .)
    ELSE            reduce using rule 59 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 59 (expression -> expression MOD expression .)
    COMMA           reduce using rule 59 (expression -> expression MOD expression .)
    TO              reduce using rule 59 (expression -> expression MOD expression .)

  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]
  ! DIV             [ shift and go to state 92 ]
  ! MOD             [ shift and go to state 93 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]


state 122

    (64) expression -> expression PLUS expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 64 (expression -> expression PLUS expression .)
    AND             reduce using rule 64 (expression -> expression PLUS expression .)
    OR              reduce using rule 64 (expression -> expression PLUS expression .)
    LT              reduce using rule 64 (expression -> expression PLUS expression .)
    LE              reduce using rule 64 (expression -> expression PLUS expression .)
    GT              reduce using rule 64 (expression -> expression PLUS expression .)
    GE              reduce using rule 64 (expression -> expression PLUS expression .)
    EQ              reduce using rule 64 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 64 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 64 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 64 (expression -> expression PLUS expression .)
    DO              reduce using rule 64 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 64 (expression -> expression PLUS expression .)
    END             reduce using rule 64 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 64 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 64 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 64 (expression -> expression PLUS expression .)
    TO              reduce using rule 64 (expression -> expression PLUS expression .)
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97

  ! DIV             [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]


state 123

    (65) expression -> expression MINUS expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 65 (expression -> expression MINUS expression .)
    AND             reduce using rule 65 (expression -> expression MINUS expression .)
    OR              reduce using rule 65 (expression -> expression MINUS expression .)
    LT              reduce using rule 65 (expression -> expression MINUS expression .)
    LE              reduce using rule 65 (expression -> expression MINUS expression .)
    GT              reduce using rule 65 (expression -> expression MINUS expression .)
    GE              reduce using rule 65 (expression -> expression MINUS expression .)
    EQ              reduce using rule 65 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 65 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 65 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 65 (expression -> expression MINUS expression .)
    DO              reduce using rule 65 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 65 (expression -> expression MINUS expression .)
    END             reduce using rule 65 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 65 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 65 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 65 (expression -> expression MINUS expression .)
    TO              reduce using rule 65 (expression -> expression MINUS expression .)
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97

  ! DIV             [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]


state 124

    (66) expression -> expression TIMES expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 66 (expression -> expression TIMES expression .)
    AND             reduce using rule 66 (expression -> expression TIMES expression .)
    OR              reduce using rule 66 (expression -> expression TIMES expression .)
    LT              reduce using rule 66 (expression -> expression TIMES expression .)
    LE              reduce using rule 66 (expression -> expression TIMES expression .)
    GT              reduce using rule 66 (expression -> expression TIMES expression .)
    GE              reduce using rule 66 (expression -> expression TIMES expression .)
    EQ              reduce using rule 66 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 66 (expression -> expression TIMES expression .)
    DIV             reduce using rule 66 (expression -> expression TIMES expression .)
    MOD             reduce using rule 66 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 66 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 66 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 66 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 66 (expression -> expression TIMES expression .)
    DO              reduce using rule 66 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 66 (expression -> expression TIMES expression .)
    END             reduce using rule 66 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 66 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 66 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 66 (expression -> expression TIMES expression .)
    TO              reduce using rule 66 (expression -> expression TIMES expression .)

  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]
  ! DIV             [ shift and go to state 92 ]
  ! MOD             [ shift and go to state 93 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]


state 125

    (67) expression -> expression DIVIDE expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    THEN            reduce using rule 67 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 67 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 67 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 67 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 67 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 67 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 67 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 67 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 67 (expression -> expression DIVIDE expression .)
    DIV             reduce using rule 67 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 67 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 67 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 67 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 67 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 67 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 67 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 67 (expression -> expression DIVIDE expression .)
    END             reduce using rule 67 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 67 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 67 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 67 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 67 (expression -> expression DIVIDE expression .)

  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LT              [ shift and go to state 86 ]
  ! LE              [ shift and go to state 87 ]
  ! GT              [ shift and go to state 88 ]
  ! GE              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]
  ! NEQ             [ shift and go to state 91 ]
  ! DIV             [ shift and go to state 92 ]
  ! MOD             [ shift and go to state 93 ]
  ! PLUS            [ shift and go to state 94 ]
  ! MINUS           [ shift and go to state 95 ]
  ! TIMES           [ shift and go to state 96 ]
  ! DIVIDE          [ shift and go to state 97 ]


state 126

    (24) expression -> ID LPAREN argument_list . RPAREN
    (23) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 138
    COMMA           shift and go to state 139


state 127

    (22) argument_list -> expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 22 (argument_list -> expression .)
    COMMA           reduce using rule 22 (argument_list -> expression .)
    AND             shift and go to state 84
    OR              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97


state 128

    (57) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 57 (expression -> LPAREN expression RPAREN .)


state 129

    (63) while_statement -> WHILE expression DO statement .

    SEMI            reduce using rule 63 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 63 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 63 (while_statement -> WHILE expression DO statement .)


state 130

    (20) param_list -> ID COLON type .

    RPAREN          reduce using rule 20 (param_list -> ID COLON type .)
    SEMI            reduce using rule 20 (param_list -> ID COLON type .)


state 131

    (19) function -> FUNCTION ID LPAREN param_list RPAREN COLON . type SEMI declarations BEGIN statements END SEMI
    (9) type -> . simple_type
    (10) type -> . array_type
    (11) simple_type -> . INTEGER
    (12) simple_type -> . BOOLEAN
    (13) simple_type -> . STRING
    (14) simple_type -> . REAL
    (15) array_type -> . ARRAY LBRACKET index_range RBRACKET OF type

    INTEGER         shift and go to state 46
    BOOLEAN         shift and go to state 47
    STRING          shift and go to state 48
    REAL            shift and go to state 49
    ARRAY           shift and go to state 50

    type                           shift and go to state 140
    simple_type                    shift and go to state 44
    array_type                     shift and go to state 45

state 132

    (21) param_list -> param_list SEMI ID . COLON type

    COLON           shift and go to state 141


state 133

    (15) array_type -> ARRAY LBRACKET index_range RBRACKET . OF type

    OF              shift and go to state 142


state 134

    (16) index_range -> NUMBER DOTDOT . NUMBER

    NUMBER          shift and go to state 143


state 135

    (41) writelist -> writelist COMMA writeitem .

    RPAREN          reduce using rule 41 (writelist -> writelist COMMA writeitem .)
    COMMA           reduce using rule 41 (writelist -> writelist COMMA writeitem .)


state 136

    (46) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 144

state 137

    (62) if_statement -> IF expression THEN statement ELSE . statement
    (28) statement -> . assignment_statement
    (29) statement -> . writeln_statement
    (30) statement -> . write_statement
    (31) statement -> . readln_statement
    (32) statement -> . for_statement
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . statement_compound
    (36) statement -> . concrete_empty_statement
    (38) assignment_statement -> . ID ASSIGN expression
    (39) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (40) write_statement -> . WRITE LPAREN writelist RPAREN
    (45) readln_statement -> . READLN LPAREN ID RPAREN
    (46) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (61) if_statement -> . IF expression THEN statement
    (62) if_statement -> . IF expression THEN statement ELSE statement
    (63) while_statement -> . WHILE expression DO statement
    (60) statement_compound -> . BEGIN statements END
    (37) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 37 (concrete_empty_statement -> .)
    SEMI            reduce using rule 37 (concrete_empty_statement -> .)
    END             reduce using rule 37 (concrete_empty_statement -> .)

    statement                      shift and go to state 145
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35

state 138

    (24) expression -> ID LPAREN argument_list RPAREN .

    THEN            reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    AND             reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    OR              reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    LT              reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    LE              reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    GT              reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    GE              reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    EQ              reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    NEQ             reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    DIV             reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    MOD             reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    DO              reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    SEMI            reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    END             reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    ELSE            reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)
    TO              reduce using rule 24 (expression -> ID LPAREN argument_list RPAREN .)


state 139

    (23) argument_list -> argument_list COMMA . expression
    (24) expression -> . ID LPAREN argument_list RPAREN
    (47) expression -> . TRUE
    (48) expression -> . FALSE
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression LE expression
    (53) expression -> . expression GT expression
    (54) expression -> . expression GE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression NEQ expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . expression DIV expression
    (59) expression -> . expression MOD expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression TIMES expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . ID
    (69) expression -> . NUMBER
    (70) expression -> . REAL

    ID              shift and go to state 61
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    LPAREN          shift and go to state 62
    NUMBER          shift and go to state 65
    REAL            shift and go to state 66

    expression                     shift and go to state 146

state 140

    (19) function -> FUNCTION ID LPAREN param_list RPAREN COLON type . SEMI declarations BEGIN statements END SEMI

    SEMI            shift and go to state 147


state 141

    (21) param_list -> param_list SEMI ID COLON . type
    (9) type -> . simple_type
    (10) type -> . array_type
    (11) simple_type -> . INTEGER
    (12) simple_type -> . BOOLEAN
    (13) simple_type -> . STRING
    (14) simple_type -> . REAL
    (15) array_type -> . ARRAY LBRACKET index_range RBRACKET OF type

    INTEGER         shift and go to state 46
    BOOLEAN         shift and go to state 47
    STRING          shift and go to state 48
    REAL            shift and go to state 49
    ARRAY           shift and go to state 50

    type                           shift and go to state 148
    simple_type                    shift and go to state 44
    array_type                     shift and go to state 45

state 142

    (15) array_type -> ARRAY LBRACKET index_range RBRACKET OF . type
    (9) type -> . simple_type
    (10) type -> . array_type
    (11) simple_type -> . INTEGER
    (12) simple_type -> . BOOLEAN
    (13) simple_type -> . STRING
    (14) simple_type -> . REAL
    (15) array_type -> . ARRAY LBRACKET index_range RBRACKET OF type

    INTEGER         shift and go to state 46
    BOOLEAN         shift and go to state 47
    STRING          shift and go to state 48
    REAL            shift and go to state 49
    ARRAY           shift and go to state 50

    type                           shift and go to state 149
    simple_type                    shift and go to state 44
    array_type                     shift and go to state 45

state 143

    (16) index_range -> NUMBER DOTDOT NUMBER .

    RBRACKET        reduce using rule 16 (index_range -> NUMBER DOTDOT NUMBER .)


state 144

    (46) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    DO              shift and go to state 150
    AND             shift and go to state 84
    OR              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97


state 145

    (62) if_statement -> IF expression THEN statement ELSE statement .

    SEMI            reduce using rule 62 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 62 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 62 (if_statement -> IF expression THEN statement ELSE statement .)


state 146

    (23) argument_list -> argument_list COMMA expression .
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . LE expression
    (53) expression -> expression . GT expression
    (54) expression -> expression . GE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . NEQ expression
    (58) expression -> expression . DIV expression
    (59) expression -> expression . MOD expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . TIMES expression
    (67) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 23 (argument_list -> argument_list COMMA expression .)
    AND             shift and go to state 84
    OR              shift and go to state 85
    LT              shift and go to state 86
    LE              shift and go to state 87
    GT              shift and go to state 88
    GE              shift and go to state 89
    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    DIV             shift and go to state 92
    MOD             shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    TIMES           shift and go to state 96
    DIVIDE          shift and go to state 97


state 147

    (19) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI . declarations BEGIN statements END SEMI
    (2) declarations -> . VAR var_declaration_list
    (3) declarations -> . empty
    (71) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 71 (empty -> .)

    declarations                   shift and go to state 151
    empty                          shift and go to state 7

state 148

    (21) param_list -> param_list SEMI ID COLON type .

    RPAREN          reduce using rule 21 (param_list -> param_list SEMI ID COLON type .)
    SEMI            reduce using rule 21 (param_list -> param_list SEMI ID COLON type .)


state 149

    (15) array_type -> ARRAY LBRACKET index_range RBRACKET OF type .

    SEMI            reduce using rule 15 (array_type -> ARRAY LBRACKET index_range RBRACKET OF type .)
    RPAREN          reduce using rule 15 (array_type -> ARRAY LBRACKET index_range RBRACKET OF type .)


state 150

    (46) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (28) statement -> . assignment_statement
    (29) statement -> . writeln_statement
    (30) statement -> . write_statement
    (31) statement -> . readln_statement
    (32) statement -> . for_statement
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . statement_compound
    (36) statement -> . concrete_empty_statement
    (38) assignment_statement -> . ID ASSIGN expression
    (39) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (40) write_statement -> . WRITE LPAREN writelist RPAREN
    (45) readln_statement -> . READLN LPAREN ID RPAREN
    (46) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (61) if_statement -> . IF expression THEN statement
    (62) if_statement -> . IF expression THEN statement ELSE statement
    (63) while_statement -> . WHILE expression DO statement
    (60) statement_compound -> . BEGIN statements END
    (37) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 37 (concrete_empty_statement -> .)
    SEMI            reduce using rule 37 (concrete_empty_statement -> .)
    END             reduce using rule 37 (concrete_empty_statement -> .)

    statement                      shift and go to state 152
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35

state 151

    (19) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations . BEGIN statements END SEMI

    BEGIN           shift and go to state 153


state 152

    (46) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    SEMI            reduce using rule 46 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    END             reduce using rule 46 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 46 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 153

    (19) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN . statements END SEMI
    (25) statements -> . statement_sequence
    (26) statement_sequence -> . statement
    (27) statement_sequence -> . statement_sequence SEMI statement
    (28) statement -> . assignment_statement
    (29) statement -> . writeln_statement
    (30) statement -> . write_statement
    (31) statement -> . readln_statement
    (32) statement -> . for_statement
    (33) statement -> . if_statement
    (34) statement -> . while_statement
    (35) statement -> . statement_compound
    (36) statement -> . concrete_empty_statement
    (38) assignment_statement -> . ID ASSIGN expression
    (39) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (40) write_statement -> . WRITE LPAREN writelist RPAREN
    (45) readln_statement -> . READLN LPAREN ID RPAREN
    (46) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (61) if_statement -> . IF expression THEN statement
    (62) if_statement -> . IF expression THEN statement ELSE statement
    (63) while_statement -> . WHILE expression DO statement
    (60) statement_compound -> . BEGIN statements END
    (37) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 37 (concrete_empty_statement -> .)
    END             reduce using rule 37 (concrete_empty_statement -> .)

    statements                     shift and go to state 154
    statement_sequence             shift and go to state 25
    statement                      shift and go to state 26
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35

state 154

    (19) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements . END SEMI

    END             shift and go to state 155


state 155

    (19) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END . SEMI

    SEMI            shift and go to state 156


state 156

    (19) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI .

    FUNCTION        reduce using rule 19 (function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI .)
    BEGIN           reduce using rule 19 (function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI .)

