
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocELSEnonassocIFXleftORleftANDnonassocEQNEQLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVMODrightNOTAND ARRAY ASSIGN BEGIN BOOLEAN CASE COLON COMMA CONST DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQ FALSE FILE FOR FUNCTION GE GOTO GT ID IF IN INTEGER LABEL LBRACKET LE LPAREN LT MINUS MOD NEQ NIL NOT NUMBER OF OR PACKED PLUS PROCEDURE PROGRAM RBRACKET READ READLN REAL RECORD REPEAT RPAREN SEMI SET STRING STRING_LITERAL THEN TIMES TO TRUE TYPE UNTIL VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMI declarations functions BEGIN statements END DOTdeclarations : VAR var_declaration_list\n                    | emptyvar_declaration_list : var_declaration_list var_declaration\n                            | var_declarationvar_declaration : id_list COLON type SEMIid_list : ID\n              | ID COMMA id_listtype : INTEGER\n            | BOOLEAN\n            | STRING\n            | REALfunctions : function functions\n                 | emptyfunction : FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMIparam_list : ID COLON typeparam_list : param_list SEMI ID COLON typeargument_list : expressionargument_list : argument_list COMMA expressionexpression : ID LPAREN argument_list RPARENstatements : statement_sequence\n                  | empty_statement_blockempty_statement_block : statement_sequence : statement\n                          | statement_sequence SEMI statementstatement : assignment_statement\n                 | writeln_statement\n                 | write_statement\n                 | readln_statement\n                 | for_statement\n                 | if_statement\n                 | while_statement\n                 | statement_compound\n                 | concrete_empty_statementconcrete_empty_statement :assignment_statement : ID ASSIGN expressionwriteln_statement : WRITELN LPAREN writelist RPARENwrite_statement : WRITE LPAREN writelist RPARENwritelist : writelist COMMA writeitem\n                 | writeitemwriteitem : STRING_LITERALwriteitem : expressionreadln_statement : READLN LPAREN ID RPARENfor_statement : FOR ID ASSIGN expression TO expression DO statementexpression : TRUE\n                  | FALSEexpression : expression AND expression\n                  | expression OR expressionexpression : expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression EQ expression\n                  | expression NEQ expressionexpression : LPAREN expression RPARENexpression : expression DIV expressionexpression : expression MOD expressionstatement_compound : BEGIN statements ENDif_statement : IF expression THEN statement %prec IFX\n                    | IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO statementexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : IDexpression : NUMBERexpression : REALempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,71,],[0,-1,]),'ID':([2,6,11,12,13,16,19,21,23,40,41,42,43,50,53,54,55,56,60,68,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,100,102,129,130,132,140,143,],[3,15,18,15,-5,22,-4,15,22,57,59,59,66,59,22,59,59,78,59,-6,59,22,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,22,127,59,59,22,59,22,22,]),'SEMI':([3,16,23,25,27,28,29,30,31,32,33,34,35,36,44,45,46,47,48,53,59,61,62,63,64,67,69,70,72,80,97,101,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,130,131,133,136,139,140,142,143,145,],[4,-35,-35,53,-24,-26,-27,-28,-29,-30,-31,-32,-33,-34,68,-9,-10,-11,-12,-35,-66,-45,-46,-67,-68,100,-36,-58,-25,-35,-35,-37,-38,-43,-59,-47,-48,-49,-50,-51,-52,-53,-54,-56,-57,-62,-63,-64,-65,-55,-61,-16,-35,-20,138,-60,-17,-35,-44,-35,146,]),'VAR':([4,138,],[6,6,]),'FUNCTION':([4,5,7,9,12,13,19,68,146,],[-69,11,-3,11,-2,-5,-4,-6,-15,]),'BEGIN':([4,5,7,8,9,10,12,13,16,17,19,23,53,68,80,97,130,138,140,141,143,146,],[-69,-69,-3,16,-69,-14,-2,-5,23,-13,-4,23,23,-6,23,23,23,-69,23,143,23,-15,]),'COLON':([14,15,49,66,99,127,],[20,-7,-8,98,126,134,]),'COMMA':([15,59,61,62,63,64,73,74,75,76,77,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,131,137,],[21,-66,-45,-46,-67,-68,102,-40,-41,-42,102,-47,-48,-49,-50,-51,-52,-53,-54,-56,-57,-62,-63,-64,-65,132,-18,-55,-39,-20,-19,]),'END':([16,23,24,25,26,27,28,29,30,31,32,33,34,35,36,51,53,59,61,62,63,64,69,70,72,80,97,101,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,130,131,136,140,142,143,144,],[-23,-23,52,-21,-22,-24,-26,-27,-28,-29,-30,-31,-32,-33,-34,70,-35,-66,-45,-46,-67,-68,-36,-58,-25,-35,-35,-37,-38,-43,-59,-47,-48,-49,-50,-51,-52,-53,-54,-56,-57,-62,-63,-64,-65,-55,-61,-35,-20,-60,-35,-44,-23,145,]),'WRITELN':([16,23,53,80,97,130,140,143,],[37,37,37,37,37,37,37,37,]),'WRITE':([16,23,53,80,97,130,140,143,],[38,38,38,38,38,38,38,38,]),'READLN':([16,23,53,80,97,130,140,143,],[39,39,39,39,39,39,39,39,]),'FOR':([16,23,53,80,97,130,140,143,],[40,40,40,40,40,40,40,40,]),'IF':([16,23,53,80,97,130,140,143,],[41,41,41,41,41,41,41,41,]),'WHILE':([16,23,53,80,97,130,140,143,],[42,42,42,42,42,42,42,42,]),'LPAREN':([18,37,38,39,41,42,50,54,55,59,60,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,129,132,],[43,54,55,56,60,60,60,60,60,95,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'INTEGER':([20,98,126,134,],[45,45,45,45,]),'BOOLEAN':([20,98,126,134,],[46,46,46,46,]),'STRING':([20,98,126,134,],[47,47,47,47,]),'REAL':([20,41,42,50,54,55,60,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,98,102,126,129,132,134,],[48,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,48,64,48,64,64,48,]),'ASSIGN':([22,57,],[50,79,]),'ELSE':([28,29,30,31,32,33,34,35,36,59,61,62,63,64,69,70,80,97,101,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,130,131,136,140,142,],[-26,-27,-28,-29,-30,-31,-32,-33,-34,-66,-45,-46,-67,-68,-36,-58,-35,-35,-37,-38,-43,-59,-47,-48,-49,-50,-51,-52,-53,-54,-56,-57,-62,-63,-64,-65,-55,-61,-35,-20,-60,-35,-44,]),'TRUE':([41,42,50,54,55,60,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,129,132,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'FALSE':([41,42,50,54,55,60,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,129,132,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'NUMBER':([41,42,50,54,55,60,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,129,132,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'RPAREN':([45,46,47,48,59,61,62,63,64,67,73,74,75,76,77,78,96,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,128,131,137,139,],[-9,-10,-11,-12,-66,-45,-46,-67,-68,99,101,-40,-41,-42,103,104,123,-47,-48,-49,-50,-51,-52,-53,-54,-56,-57,-62,-63,-64,-65,131,-18,-55,-16,-39,-20,-19,-17,]),'DOT':([52,],[71,]),'STRING_LITERAL':([54,55,102,],[75,75,75,]),'THEN':([58,59,61,62,63,64,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,131,],[80,-66,-45,-46,-67,-68,-47,-48,-49,-50,-51,-52,-53,-54,-56,-57,-62,-63,-64,-65,-55,-20,]),'AND':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[81,-66,-45,-46,-67,-68,81,81,81,81,81,-47,81,-49,-50,-51,-52,-53,-54,-56,-57,-62,-63,-64,-65,81,-55,-20,81,81,]),'OR':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[82,-66,-45,-46,-67,-68,82,82,82,82,82,-47,-48,-49,-50,-51,-52,-53,-54,-56,-57,-62,-63,-64,-65,82,-55,-20,82,82,]),'LT':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[83,-66,-45,-46,-67,-68,83,83,83,83,83,83,83,None,None,None,None,None,None,-56,-57,-62,-63,-64,-65,83,-55,-20,83,83,]),'LE':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[84,-66,-45,-46,-67,-68,84,84,84,84,84,84,84,None,None,None,None,None,None,-56,-57,-62,-63,-64,-65,84,-55,-20,84,84,]),'GT':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[85,-66,-45,-46,-67,-68,85,85,85,85,85,85,85,None,None,None,None,None,None,-56,-57,-62,-63,-64,-65,85,-55,-20,85,85,]),'GE':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[86,-66,-45,-46,-67,-68,86,86,86,86,86,86,86,None,None,None,None,None,None,-56,-57,-62,-63,-64,-65,86,-55,-20,86,86,]),'EQ':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[87,-66,-45,-46,-67,-68,87,87,87,87,87,87,87,None,None,None,None,None,None,-56,-57,-62,-63,-64,-65,87,-55,-20,87,87,]),'NEQ':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[88,-66,-45,-46,-67,-68,88,88,88,88,88,88,88,None,None,None,None,None,None,-56,-57,-62,-63,-64,-65,88,-55,-20,88,88,]),'DIV':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[89,-66,-45,-46,-67,-68,89,89,89,89,89,89,89,89,89,89,89,89,89,-56,-57,89,89,-64,-65,89,-55,-20,89,89,]),'MOD':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[90,-66,-45,-46,-67,-68,90,90,90,90,90,90,90,90,90,90,90,90,90,-56,-57,90,90,-64,-65,90,-55,-20,90,90,]),'PLUS':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[91,-66,-45,-46,-67,-68,91,91,91,91,91,91,91,91,91,91,91,91,91,-56,-57,-62,-63,-64,-65,91,-55,-20,91,91,]),'MINUS':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[92,-66,-45,-46,-67,-68,92,92,92,92,92,92,92,92,92,92,92,92,92,-56,-57,-62,-63,-64,-65,92,-55,-20,92,92,]),'TIMES':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[93,-66,-45,-46,-67,-68,93,93,93,93,93,93,93,93,93,93,93,93,93,-56,-57,93,93,-64,-65,93,-55,-20,93,93,]),'DIVIDE':([58,59,61,62,63,64,65,69,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,123,131,135,137,],[94,-66,-45,-46,-67,-68,94,94,94,94,94,94,94,94,94,94,94,94,94,-56,-57,94,94,-64,-65,94,-55,-20,94,94,]),'DO':([59,61,62,63,64,65,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,131,135,],[-66,-45,-46,-67,-68,97,-47,-48,-49,-50,-51,-52,-53,-54,-56,-57,-62,-63,-64,-65,-55,-20,140,]),'TO':([59,61,62,63,64,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,131,],[-66,-45,-46,-67,-68,129,-47,-48,-49,-50,-51,-52,-53,-54,-56,-57,-62,-63,-64,-65,-55,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([4,138,],[5,141,]),'empty':([4,5,9,138,],[7,10,10,7,]),'functions':([5,9,],[8,17,]),'function':([5,9,],[9,9,]),'var_declaration_list':([6,],[12,]),'var_declaration':([6,12,],[13,19,]),'id_list':([6,12,21,],[14,14,49,]),'statements':([16,23,143,],[24,51,144,]),'statement_sequence':([16,23,143,],[25,25,25,]),'empty_statement_block':([16,23,143,],[26,26,26,]),'statement':([16,23,53,80,97,130,140,143,],[27,27,72,106,124,136,142,27,]),'assignment_statement':([16,23,53,80,97,130,140,143,],[28,28,28,28,28,28,28,28,]),'writeln_statement':([16,23,53,80,97,130,140,143,],[29,29,29,29,29,29,29,29,]),'write_statement':([16,23,53,80,97,130,140,143,],[30,30,30,30,30,30,30,30,]),'readln_statement':([16,23,53,80,97,130,140,143,],[31,31,31,31,31,31,31,31,]),'for_statement':([16,23,53,80,97,130,140,143,],[32,32,32,32,32,32,32,32,]),'if_statement':([16,23,53,80,97,130,140,143,],[33,33,33,33,33,33,33,33,]),'while_statement':([16,23,53,80,97,130,140,143,],[34,34,34,34,34,34,34,34,]),'statement_compound':([16,23,53,80,97,130,140,143,],[35,35,35,35,35,35,35,35,]),'concrete_empty_statement':([16,23,53,80,97,130,140,143,],[36,36,36,36,36,36,36,36,]),'type':([20,98,126,134,],[44,125,133,139,]),'expression':([41,42,50,54,55,60,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,102,129,132,],[58,65,69,76,76,96,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,122,76,135,137,]),'param_list':([43,],[67,]),'writelist':([54,55,],[73,77,]),'writeitem':([54,55,102,],[74,74,128,]),'argument_list':([95,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMI declarations functions BEGIN statements END DOT','program',9,'p_program','pascal_gt.py',30),
  ('declarations -> VAR var_declaration_list','declarations',2,'p_declarations','pascal_gt.py',53),
  ('declarations -> empty','declarations',1,'p_declarations','pascal_gt.py',54),
  ('var_declaration_list -> var_declaration_list var_declaration','var_declaration_list',2,'p_var_declaration_list','pascal_gt.py',58),
  ('var_declaration_list -> var_declaration','var_declaration_list',1,'p_var_declaration_list','pascal_gt.py',59),
  ('var_declaration -> id_list COLON type SEMI','var_declaration',4,'p_var_declaration','pascal_gt.py',64),
  ('id_list -> ID','id_list',1,'p_id_list','pascal_gt.py',77),
  ('id_list -> ID COMMA id_list','id_list',3,'p_id_list','pascal_gt.py',78),
  ('type -> INTEGER','type',1,'p_type','pascal_gt.py',82),
  ('type -> BOOLEAN','type',1,'p_type','pascal_gt.py',83),
  ('type -> STRING','type',1,'p_type','pascal_gt.py',84),
  ('type -> REAL','type',1,'p_type','pascal_gt.py',85),
  ('functions -> function functions','functions',2,'p_functions','pascal_gt.py',89),
  ('functions -> empty','functions',1,'p_functions','pascal_gt.py',90),
  ('function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI','function',13,'p_function','pascal_gt.py',95),
  ('param_list -> ID COLON type','param_list',3,'p_param_list_single','pascal_gt.py',107),
  ('param_list -> param_list SEMI ID COLON type','param_list',5,'p_param_list_multiple','pascal_gt.py',112),
  ('argument_list -> expression','argument_list',1,'p_argument_list_single','pascal_gt.py',118),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list_multiple','pascal_gt.py',123),
  ('expression -> ID LPAREN argument_list RPAREN','expression',4,'p_expression_function_call','pascal_gt.py',130),
  ('statements -> statement_sequence','statements',1,'p_statements','pascal_gt.py',137),
  ('statements -> empty_statement_block','statements',1,'p_statements','pascal_gt.py',138),
  ('empty_statement_block -> <empty>','empty_statement_block',0,'p_empty_statement_block','pascal_gt.py',142),
  ('statement_sequence -> statement','statement_sequence',1,'p_statement_sequence','pascal_gt.py',146),
  ('statement_sequence -> statement_sequence SEMI statement','statement_sequence',3,'p_statement_sequence','pascal_gt.py',147),
  ('statement -> assignment_statement','statement',1,'p_statement','pascal_gt.py',166),
  ('statement -> writeln_statement','statement',1,'p_statement','pascal_gt.py',167),
  ('statement -> write_statement','statement',1,'p_statement','pascal_gt.py',168),
  ('statement -> readln_statement','statement',1,'p_statement','pascal_gt.py',169),
  ('statement -> for_statement','statement',1,'p_statement','pascal_gt.py',170),
  ('statement -> if_statement','statement',1,'p_statement','pascal_gt.py',171),
  ('statement -> while_statement','statement',1,'p_statement','pascal_gt.py',172),
  ('statement -> statement_compound','statement',1,'p_statement','pascal_gt.py',173),
  ('statement -> concrete_empty_statement','statement',1,'p_statement','pascal_gt.py',174),
  ('concrete_empty_statement -> <empty>','concrete_empty_statement',0,'p_concrete_empty_statement','pascal_gt.py',178),
  ('assignment_statement -> ID ASSIGN expression','assignment_statement',3,'p_assignment_statement','pascal_gt.py',183),
  ('writeln_statement -> WRITELN LPAREN writelist RPAREN','writeln_statement',4,'p_writeln_statement','pascal_gt.py',199),
  ('write_statement -> WRITE LPAREN writelist RPAREN','write_statement',4,'p_write_statement','pascal_gt.py',203),
  ('writelist -> writelist COMMA writeitem','writelist',3,'p_writelist','pascal_gt.py',208),
  ('writelist -> writeitem','writelist',1,'p_writelist','pascal_gt.py',209),
  ('writeitem -> STRING_LITERAL','writeitem',1,'p_writeitem_string','pascal_gt.py',213),
  ('writeitem -> expression','writeitem',1,'p_writeitem_expr','pascal_gt.py',217),
  ('readln_statement -> READLN LPAREN ID RPAREN','readln_statement',4,'p_readln_statement','pascal_gt.py',222),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','pascal_gt.py',237),
  ('expression -> TRUE','expression',1,'p_expression_boolean','pascal_gt.py',280),
  ('expression -> FALSE','expression',1,'p_expression_boolean','pascal_gt.py',281),
  ('expression -> expression AND expression','expression',3,'p_expression_logical','pascal_gt.py',285),
  ('expression -> expression OR expression','expression',3,'p_expression_logical','pascal_gt.py',286),
  ('expression -> expression LT expression','expression',3,'p_expression_relop','pascal_gt.py',298),
  ('expression -> expression LE expression','expression',3,'p_expression_relop','pascal_gt.py',299),
  ('expression -> expression GT expression','expression',3,'p_expression_relop','pascal_gt.py',300),
  ('expression -> expression GE expression','expression',3,'p_expression_relop','pascal_gt.py',301),
  ('expression -> expression EQ expression','expression',3,'p_expression_relop','pascal_gt.py',302),
  ('expression -> expression NEQ expression','expression',3,'p_expression_relop','pascal_gt.py',303),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','pascal_gt.py',323),
  ('expression -> expression DIV expression','expression',3,'p_expression_div','pascal_gt.py',327),
  ('expression -> expression MOD expression','expression',3,'p_expression_mod','pascal_gt.py',333),
  ('statement_compound -> BEGIN statements END','statement_compound',3,'p_statement_compound','pascal_gt.py',339),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','pascal_gt.py',343),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','pascal_gt.py',344),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','pascal_gt.py',376),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','pascal_gt.py',397),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','pascal_gt.py',398),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','pascal_gt.py',399),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','pascal_gt.py',400),
  ('expression -> ID','expression',1,'p_expression_variable','pascal_gt.py',439),
  ('expression -> NUMBER','expression',1,'p_expression_number','pascal_gt.py',450),
  ('expression -> REAL','expression',1,'p_expression_real','pascal_gt.py',454),
  ('empty -> <empty>','empty',0,'p_empty','pascal_gt.py',459),
]
