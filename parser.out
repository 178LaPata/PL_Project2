Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    CASE
    CONST
    DOTDOT
    DOWNTO
    FILE
    GOTO
    IN
    LABEL
    LBRACKET
    NIL
    OF
    PACKED
    PROCEDURE
    RBRACKET
    READ
    RECORD
    REPEAT
    SET
    TYPE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMI declarations functions BEGIN statement_list END DOT
Rule 2     declarations -> VAR var_declaration_list
Rule 3     declarations -> empty
Rule 4     var_declaration_list -> var_declaration_list var_declaration
Rule 5     var_declaration_list -> var_declaration
Rule 6     var_declaration -> id_list COLON type SEMI
Rule 7     id_list -> ID
Rule 8     id_list -> ID COMMA id_list
Rule 9     type -> INTEGER
Rule 10    type -> BOOLEAN
Rule 11    type -> STRING
Rule 12    type -> REAL
Rule 13    functions -> function functions
Rule 14    functions -> empty
Rule 15    function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI
Rule 16    param_list -> ID COLON type
Rule 17    param_list -> param_list SEMI ID COLON type
Rule 18    argument_list -> expression
Rule 19    argument_list -> argument_list COMMA expression
Rule 20    expression -> ID LPAREN argument_list RPAREN
Rule 21    statement_list -> statement
Rule 22    statement_list -> statement SEMI statement_list
Rule 23    statement_list -> SEMI statement_list
Rule 24    statement_list -> empty
Rule 25    statement -> assignment_statement
Rule 26    statement -> writeln_statement
Rule 27    statement -> write_statement
Rule 28    statement -> readln_statement
Rule 29    statement -> for_statement
Rule 30    statement -> if_statement
Rule 31    statement -> while_statement
Rule 32    statement -> statement_compound
Rule 33    assignment_statement -> ID ASSIGN expression SEMI
Rule 34    writeln_statement -> WRITELN LPAREN writelist RPAREN SEMI
Rule 35    write_statement -> WRITE LPAREN writelist RPAREN SEMI
Rule 36    writelist -> writelist COMMA writeitem
Rule 37    writelist -> writeitem
Rule 38    writeitem -> STRING_LITERAL
Rule 39    writeitem -> expression
Rule 40    readln_statement -> READLN LPAREN ID RPAREN SEMI
Rule 41    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 42    expression -> TRUE
Rule 43    expression -> FALSE
Rule 44    expression -> expression AND expression
Rule 45    expression -> expression OR expression
Rule 46    expression -> NOT expression
Rule 47    expression -> expression LT expression
Rule 48    expression -> expression LE expression
Rule 49    expression -> expression GT expression
Rule 50    expression -> expression GE expression
Rule 51    expression -> expression EQ expression
Rule 52    expression -> expression NEQ expression
Rule 53    expression -> LPAREN expression RPAREN
Rule 54    expression -> expression DIV expression
Rule 55    expression -> expression MOD expression
Rule 56    statement_compound -> BEGIN statement_list END
Rule 57    if_statement -> IF expression THEN statement
Rule 58    if_statement -> IF expression THEN statement ELSE statement
Rule 59    while_statement -> WHILE expression DO statement
Rule 60    expression -> expression PLUS expression
Rule 61    expression -> expression MINUS expression
Rule 62    expression -> expression TIMES expression
Rule 63    expression -> expression DIVIDE expression
Rule 64    expression -> ID
Rule 65    expression -> NUMBER
Rule 66    expression -> REAL
Rule 67    empty -> <empty>

Terminals, with rules where they appear

AND                  : 44
ARRAY                : 
ASSIGN               : 33 41
BEGIN                : 1 15 56
BOOLEAN              : 10
CASE                 : 
COLON                : 6 15 16 17
COMMA                : 8 19 36
CONST                : 
DIV                  : 54
DIVIDE               : 63
DO                   : 41 59
DOT                  : 1
DOTDOT               : 
DOWNTO               : 
ELSE                 : 58
END                  : 1 15 56
EQ                   : 51
FALSE                : 43
FILE                 : 
FOR                  : 41
FUNCTION             : 15
GE                   : 50
GOTO                 : 
GT                   : 49
ID                   : 1 7 8 15 16 17 20 33 40 41 64
IF                   : 57 58
IN                   : 
INTEGER              : 9
LABEL                : 
LBRACKET             : 
LE                   : 48
LPAREN               : 15 20 34 35 40 53
LT                   : 47
MINUS                : 61
MOD                  : 55
NEQ                  : 52
NIL                  : 
NOT                  : 46
NUMBER               : 65
OF                   : 
OR                   : 45
PACKED               : 
PLUS                 : 60
PROCEDURE            : 
PROGRAM              : 1
RBRACKET             : 
READ                 : 
READLN               : 40
REAL                 : 12 66
RECORD               : 
REPEAT               : 
RPAREN               : 15 20 34 35 40 53
SEMI                 : 1 6 15 15 17 22 23 33 34 35 40
SET                  : 
STRING               : 11
STRING_LITERAL       : 38
THEN                 : 57 58
TIMES                : 62
TO                   : 41
TRUE                 : 42
TYPE                 : 
UNTIL                : 
VAR                  : 2
WHILE                : 59
WITH                 : 
WRITE                : 35
WRITELN              : 34
error                : 

Nonterminals, with rules where they appear

argument_list        : 19 20
assignment_statement : 25
declarations         : 1 15
empty                : 3 14 24
expression           : 18 19 33 39 41 41 44 44 45 45 46 47 47 48 48 49 49 50 50 51 51 52 52 53 54 54 55 55 57 58 59 60 60 61 61 62 62 63 63
for_statement        : 29
function             : 13
functions            : 1 13
id_list              : 6 8
if_statement         : 30
param_list           : 15 17
program              : 0
readln_statement     : 28
statement            : 21 22 41 57 58 58 59
statement_compound   : 32
statement_list       : 1 15 22 23 56
type                 : 6 15 16 17
var_declaration      : 4 5
var_declaration_list : 2 4
while_statement      : 31
write_statement      : 27
writeitem            : 36 37
writelist            : 34 35 36
writeln_statement    : 26

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMI declarations functions BEGIN statement_list END DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMI declarations functions BEGIN statement_list END DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMI declarations functions BEGIN statement_list END DOT

    SEMI            shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMI . declarations functions BEGIN statement_list END DOT
    (2) declarations -> . VAR var_declaration_list
    (3) declarations -> . empty
    (67) empty -> .

    VAR             shift and go to state 6
    FUNCTION        reduce using rule 67 (empty -> .)
    BEGIN           reduce using rule 67 (empty -> .)

    declarations                   shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMI declarations . functions BEGIN statement_list END DOT
    (13) functions -> . function functions
    (14) functions -> . empty
    (15) function -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI
    (67) empty -> .

    FUNCTION        shift and go to state 11
    BEGIN           reduce using rule 67 (empty -> .)

    functions                      shift and go to state 8
    function                       shift and go to state 9
    empty                          shift and go to state 10

state 6

    (2) declarations -> VAR . var_declaration_list
    (4) var_declaration_list -> . var_declaration_list var_declaration
    (5) var_declaration_list -> . var_declaration
    (6) var_declaration -> . id_list COLON type SEMI
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    ID              shift and go to state 15

    var_declaration_list           shift and go to state 12
    var_declaration                shift and go to state 13
    id_list                        shift and go to state 14

state 7

    (3) declarations -> empty .

    FUNCTION        reduce using rule 3 (declarations -> empty .)
    BEGIN           reduce using rule 3 (declarations -> empty .)


state 8

    (1) program -> PROGRAM ID SEMI declarations functions . BEGIN statement_list END DOT

    BEGIN           shift and go to state 16


state 9

    (13) functions -> function . functions
    (13) functions -> . function functions
    (14) functions -> . empty
    (15) function -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI
    (67) empty -> .

    FUNCTION        shift and go to state 11
    BEGIN           reduce using rule 67 (empty -> .)

    function                       shift and go to state 9
    functions                      shift and go to state 17
    empty                          shift and go to state 10

state 10

    (14) functions -> empty .

    BEGIN           reduce using rule 14 (functions -> empty .)


state 11

    (15) function -> FUNCTION . ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI

    ID              shift and go to state 18


state 12

    (2) declarations -> VAR var_declaration_list .
    (4) var_declaration_list -> var_declaration_list . var_declaration
    (6) var_declaration -> . id_list COLON type SEMI
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    FUNCTION        reduce using rule 2 (declarations -> VAR var_declaration_list .)
    BEGIN           reduce using rule 2 (declarations -> VAR var_declaration_list .)
    ID              shift and go to state 15

    var_declaration                shift and go to state 19
    id_list                        shift and go to state 14

state 13

    (5) var_declaration_list -> var_declaration .

    ID              reduce using rule 5 (var_declaration_list -> var_declaration .)
    FUNCTION        reduce using rule 5 (var_declaration_list -> var_declaration .)
    BEGIN           reduce using rule 5 (var_declaration_list -> var_declaration .)


state 14

    (6) var_declaration -> id_list . COLON type SEMI

    COLON           shift and go to state 20


state 15

    (7) id_list -> ID .
    (8) id_list -> ID . COMMA id_list

    COLON           reduce using rule 7 (id_list -> ID .)
    COMMA           shift and go to state 21


state 16

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN . statement_list END DOT
    (21) statement_list -> . statement
    (22) statement_list -> . statement SEMI statement_list
    (23) statement_list -> . SEMI statement_list
    (24) statement_list -> . empty
    (25) statement -> . assignment_statement
    (26) statement -> . writeln_statement
    (27) statement -> . write_statement
    (28) statement -> . readln_statement
    (29) statement -> . for_statement
    (30) statement -> . if_statement
    (31) statement -> . while_statement
    (32) statement -> . statement_compound
    (67) empty -> .
    (33) assignment_statement -> . ID ASSIGN expression SEMI
    (34) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (35) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (40) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (41) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (57) if_statement -> . IF expression THEN statement
    (58) if_statement -> . IF expression THEN statement ELSE statement
    (59) while_statement -> . WHILE expression DO statement
    (56) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 23
    END             reduce using rule 67 (empty -> .)
    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 24

    statement_list                 shift and go to state 25
    statement                      shift and go to state 26
    empty                          shift and go to state 27
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35

state 17

    (13) functions -> function functions .

    BEGIN           reduce using rule 13 (functions -> function functions .)


state 18

    (15) function -> FUNCTION ID . LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI

    LPAREN          shift and go to state 42


state 19

    (4) var_declaration_list -> var_declaration_list var_declaration .

    ID              reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)
    FUNCTION        reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)
    BEGIN           reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)


state 20

    (6) var_declaration -> id_list COLON . type SEMI
    (9) type -> . INTEGER
    (10) type -> . BOOLEAN
    (11) type -> . STRING
    (12) type -> . REAL

    INTEGER         shift and go to state 44
    BOOLEAN         shift and go to state 45
    STRING          shift and go to state 46
    REAL            shift and go to state 47

    type                           shift and go to state 43

state 21

    (8) id_list -> ID COMMA . id_list
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    ID              shift and go to state 15

    id_list                        shift and go to state 48

state 22

    (33) assignment_statement -> ID . ASSIGN expression SEMI

    ASSIGN          shift and go to state 49


state 23

    (23) statement_list -> SEMI . statement_list
    (21) statement_list -> . statement
    (22) statement_list -> . statement SEMI statement_list
    (23) statement_list -> . SEMI statement_list
    (24) statement_list -> . empty
    (25) statement -> . assignment_statement
    (26) statement -> . writeln_statement
    (27) statement -> . write_statement
    (28) statement -> . readln_statement
    (29) statement -> . for_statement
    (30) statement -> . if_statement
    (31) statement -> . while_statement
    (32) statement -> . statement_compound
    (67) empty -> .
    (33) assignment_statement -> . ID ASSIGN expression SEMI
    (34) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (35) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (40) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (41) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (57) if_statement -> . IF expression THEN statement
    (58) if_statement -> . IF expression THEN statement ELSE statement
    (59) while_statement -> . WHILE expression DO statement
    (56) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 23
    END             reduce using rule 67 (empty -> .)
    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 24

    statement_list                 shift and go to state 50
    statement                      shift and go to state 26
    empty                          shift and go to state 27
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35

state 24

    (56) statement_compound -> BEGIN . statement_list END
    (21) statement_list -> . statement
    (22) statement_list -> . statement SEMI statement_list
    (23) statement_list -> . SEMI statement_list
    (24) statement_list -> . empty
    (25) statement -> . assignment_statement
    (26) statement -> . writeln_statement
    (27) statement -> . write_statement
    (28) statement -> . readln_statement
    (29) statement -> . for_statement
    (30) statement -> . if_statement
    (31) statement -> . while_statement
    (32) statement -> . statement_compound
    (67) empty -> .
    (33) assignment_statement -> . ID ASSIGN expression SEMI
    (34) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (35) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (40) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (41) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (57) if_statement -> . IF expression THEN statement
    (58) if_statement -> . IF expression THEN statement ELSE statement
    (59) while_statement -> . WHILE expression DO statement
    (56) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 23
    END             reduce using rule 67 (empty -> .)
    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 24

    statement_list                 shift and go to state 51
    statement                      shift and go to state 26
    empty                          shift and go to state 27
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35

state 25

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statement_list . END DOT

    END             shift and go to state 52


state 26

    (21) statement_list -> statement .
    (22) statement_list -> statement . SEMI statement_list

    END             reduce using rule 21 (statement_list -> statement .)
    SEMI            shift and go to state 53


state 27

    (24) statement_list -> empty .

    END             reduce using rule 24 (statement_list -> empty .)


state 28

    (25) statement -> assignment_statement .

    SEMI            reduce using rule 25 (statement -> assignment_statement .)
    END             reduce using rule 25 (statement -> assignment_statement .)
    ELSE            reduce using rule 25 (statement -> assignment_statement .)


state 29

    (26) statement -> writeln_statement .

    SEMI            reduce using rule 26 (statement -> writeln_statement .)
    END             reduce using rule 26 (statement -> writeln_statement .)
    ELSE            reduce using rule 26 (statement -> writeln_statement .)


state 30

    (27) statement -> write_statement .

    SEMI            reduce using rule 27 (statement -> write_statement .)
    END             reduce using rule 27 (statement -> write_statement .)
    ELSE            reduce using rule 27 (statement -> write_statement .)


state 31

    (28) statement -> readln_statement .

    SEMI            reduce using rule 28 (statement -> readln_statement .)
    END             reduce using rule 28 (statement -> readln_statement .)
    ELSE            reduce using rule 28 (statement -> readln_statement .)


state 32

    (29) statement -> for_statement .

    SEMI            reduce using rule 29 (statement -> for_statement .)
    END             reduce using rule 29 (statement -> for_statement .)
    ELSE            reduce using rule 29 (statement -> for_statement .)


state 33

    (30) statement -> if_statement .

    SEMI            reduce using rule 30 (statement -> if_statement .)
    END             reduce using rule 30 (statement -> if_statement .)
    ELSE            reduce using rule 30 (statement -> if_statement .)


state 34

    (31) statement -> while_statement .

    SEMI            reduce using rule 31 (statement -> while_statement .)
    END             reduce using rule 31 (statement -> while_statement .)
    ELSE            reduce using rule 31 (statement -> while_statement .)


state 35

    (32) statement -> statement_compound .

    SEMI            reduce using rule 32 (statement -> statement_compound .)
    END             reduce using rule 32 (statement -> statement_compound .)
    ELSE            reduce using rule 32 (statement -> statement_compound .)


state 36

    (34) writeln_statement -> WRITELN . LPAREN writelist RPAREN SEMI

    LPAREN          shift and go to state 54


state 37

    (35) write_statement -> WRITE . LPAREN writelist RPAREN SEMI

    LPAREN          shift and go to state 55


state 38

    (40) readln_statement -> READLN . LPAREN ID RPAREN SEMI

    LPAREN          shift and go to state 56


state 39

    (41) for_statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 57


state 40

    (57) if_statement -> IF . expression THEN statement
    (58) if_statement -> IF . expression THEN statement ELSE statement
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 58

state 41

    (59) while_statement -> WHILE . expression DO statement
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 66

state 42

    (15) function -> FUNCTION ID LPAREN . param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI
    (16) param_list -> . ID COLON type
    (17) param_list -> . param_list SEMI ID COLON type

    ID              shift and go to state 67

    param_list                     shift and go to state 68

state 43

    (6) var_declaration -> id_list COLON type . SEMI

    SEMI            shift and go to state 69


state 44

    (9) type -> INTEGER .

    SEMI            reduce using rule 9 (type -> INTEGER .)
    RPAREN          reduce using rule 9 (type -> INTEGER .)


state 45

    (10) type -> BOOLEAN .

    SEMI            reduce using rule 10 (type -> BOOLEAN .)
    RPAREN          reduce using rule 10 (type -> BOOLEAN .)


state 46

    (11) type -> STRING .

    SEMI            reduce using rule 11 (type -> STRING .)
    RPAREN          reduce using rule 11 (type -> STRING .)


state 47

    (12) type -> REAL .

    SEMI            reduce using rule 12 (type -> REAL .)
    RPAREN          reduce using rule 12 (type -> REAL .)


state 48

    (8) id_list -> ID COMMA id_list .

    COLON           reduce using rule 8 (id_list -> ID COMMA id_list .)


state 49

    (33) assignment_statement -> ID ASSIGN . expression SEMI
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 70

state 50

    (23) statement_list -> SEMI statement_list .

    END             reduce using rule 23 (statement_list -> SEMI statement_list .)


state 51

    (56) statement_compound -> BEGIN statement_list . END

    END             shift and go to state 71


state 52

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statement_list END . DOT

    DOT             shift and go to state 72


state 53

    (22) statement_list -> statement SEMI . statement_list
    (21) statement_list -> . statement
    (22) statement_list -> . statement SEMI statement_list
    (23) statement_list -> . SEMI statement_list
    (24) statement_list -> . empty
    (25) statement -> . assignment_statement
    (26) statement -> . writeln_statement
    (27) statement -> . write_statement
    (28) statement -> . readln_statement
    (29) statement -> . for_statement
    (30) statement -> . if_statement
    (31) statement -> . while_statement
    (32) statement -> . statement_compound
    (67) empty -> .
    (33) assignment_statement -> . ID ASSIGN expression SEMI
    (34) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (35) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (40) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (41) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (57) if_statement -> . IF expression THEN statement
    (58) if_statement -> . IF expression THEN statement ELSE statement
    (59) while_statement -> . WHILE expression DO statement
    (56) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 23
    END             reduce using rule 67 (empty -> .)
    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 24

    statement                      shift and go to state 26
    statement_list                 shift and go to state 73
    empty                          shift and go to state 27
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35

state 54

    (34) writeln_statement -> WRITELN LPAREN . writelist RPAREN SEMI
    (36) writelist -> . writelist COMMA writeitem
    (37) writelist -> . writeitem
    (38) writeitem -> . STRING_LITERAL
    (39) writeitem -> . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    STRING_LITERAL  shift and go to state 76
    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    writelist                      shift and go to state 74
    writeitem                      shift and go to state 75
    expression                     shift and go to state 77

state 55

    (35) write_statement -> WRITE LPAREN . writelist RPAREN SEMI
    (36) writelist -> . writelist COMMA writeitem
    (37) writelist -> . writeitem
    (38) writeitem -> . STRING_LITERAL
    (39) writeitem -> . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    STRING_LITERAL  shift and go to state 76
    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    writelist                      shift and go to state 78
    writeitem                      shift and go to state 75
    expression                     shift and go to state 77

state 56

    (40) readln_statement -> READLN LPAREN . ID RPAREN SEMI

    ID              shift and go to state 79


state 57

    (41) for_statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 80


state 58

    (57) if_statement -> IF expression . THEN statement
    (58) if_statement -> IF expression . THEN statement ELSE statement
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            shift and go to state 81
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 59

    (20) expression -> ID . LPAREN argument_list RPAREN
    (64) expression -> ID .

    LPAREN          shift and go to state 96
    THEN            reduce using rule 64 (expression -> ID .)
    AND             reduce using rule 64 (expression -> ID .)
    OR              reduce using rule 64 (expression -> ID .)
    LT              reduce using rule 64 (expression -> ID .)
    LE              reduce using rule 64 (expression -> ID .)
    GT              reduce using rule 64 (expression -> ID .)
    GE              reduce using rule 64 (expression -> ID .)
    EQ              reduce using rule 64 (expression -> ID .)
    NEQ             reduce using rule 64 (expression -> ID .)
    DIV             reduce using rule 64 (expression -> ID .)
    MOD             reduce using rule 64 (expression -> ID .)
    PLUS            reduce using rule 64 (expression -> ID .)
    MINUS           reduce using rule 64 (expression -> ID .)
    TIMES           reduce using rule 64 (expression -> ID .)
    DIVIDE          reduce using rule 64 (expression -> ID .)
    DO              reduce using rule 64 (expression -> ID .)
    SEMI            reduce using rule 64 (expression -> ID .)
    RPAREN          reduce using rule 64 (expression -> ID .)
    COMMA           reduce using rule 64 (expression -> ID .)
    TO              reduce using rule 64 (expression -> ID .)


state 60

    (53) expression -> LPAREN . expression RPAREN
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 97

state 61

    (42) expression -> TRUE .

    THEN            reduce using rule 42 (expression -> TRUE .)
    AND             reduce using rule 42 (expression -> TRUE .)
    OR              reduce using rule 42 (expression -> TRUE .)
    LT              reduce using rule 42 (expression -> TRUE .)
    LE              reduce using rule 42 (expression -> TRUE .)
    GT              reduce using rule 42 (expression -> TRUE .)
    GE              reduce using rule 42 (expression -> TRUE .)
    EQ              reduce using rule 42 (expression -> TRUE .)
    NEQ             reduce using rule 42 (expression -> TRUE .)
    DIV             reduce using rule 42 (expression -> TRUE .)
    MOD             reduce using rule 42 (expression -> TRUE .)
    PLUS            reduce using rule 42 (expression -> TRUE .)
    MINUS           reduce using rule 42 (expression -> TRUE .)
    TIMES           reduce using rule 42 (expression -> TRUE .)
    DIVIDE          reduce using rule 42 (expression -> TRUE .)
    DO              reduce using rule 42 (expression -> TRUE .)
    SEMI            reduce using rule 42 (expression -> TRUE .)
    RPAREN          reduce using rule 42 (expression -> TRUE .)
    COMMA           reduce using rule 42 (expression -> TRUE .)
    TO              reduce using rule 42 (expression -> TRUE .)


state 62

    (43) expression -> FALSE .

    THEN            reduce using rule 43 (expression -> FALSE .)
    AND             reduce using rule 43 (expression -> FALSE .)
    OR              reduce using rule 43 (expression -> FALSE .)
    LT              reduce using rule 43 (expression -> FALSE .)
    LE              reduce using rule 43 (expression -> FALSE .)
    GT              reduce using rule 43 (expression -> FALSE .)
    GE              reduce using rule 43 (expression -> FALSE .)
    EQ              reduce using rule 43 (expression -> FALSE .)
    NEQ             reduce using rule 43 (expression -> FALSE .)
    DIV             reduce using rule 43 (expression -> FALSE .)
    MOD             reduce using rule 43 (expression -> FALSE .)
    PLUS            reduce using rule 43 (expression -> FALSE .)
    MINUS           reduce using rule 43 (expression -> FALSE .)
    TIMES           reduce using rule 43 (expression -> FALSE .)
    DIVIDE          reduce using rule 43 (expression -> FALSE .)
    DO              reduce using rule 43 (expression -> FALSE .)
    SEMI            reduce using rule 43 (expression -> FALSE .)
    RPAREN          reduce using rule 43 (expression -> FALSE .)
    COMMA           reduce using rule 43 (expression -> FALSE .)
    TO              reduce using rule 43 (expression -> FALSE .)


state 63

    (46) expression -> NOT . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 98

state 64

    (65) expression -> NUMBER .

    THEN            reduce using rule 65 (expression -> NUMBER .)
    AND             reduce using rule 65 (expression -> NUMBER .)
    OR              reduce using rule 65 (expression -> NUMBER .)
    LT              reduce using rule 65 (expression -> NUMBER .)
    LE              reduce using rule 65 (expression -> NUMBER .)
    GT              reduce using rule 65 (expression -> NUMBER .)
    GE              reduce using rule 65 (expression -> NUMBER .)
    EQ              reduce using rule 65 (expression -> NUMBER .)
    NEQ             reduce using rule 65 (expression -> NUMBER .)
    DIV             reduce using rule 65 (expression -> NUMBER .)
    MOD             reduce using rule 65 (expression -> NUMBER .)
    PLUS            reduce using rule 65 (expression -> NUMBER .)
    MINUS           reduce using rule 65 (expression -> NUMBER .)
    TIMES           reduce using rule 65 (expression -> NUMBER .)
    DIVIDE          reduce using rule 65 (expression -> NUMBER .)
    DO              reduce using rule 65 (expression -> NUMBER .)
    SEMI            reduce using rule 65 (expression -> NUMBER .)
    RPAREN          reduce using rule 65 (expression -> NUMBER .)
    COMMA           reduce using rule 65 (expression -> NUMBER .)
    TO              reduce using rule 65 (expression -> NUMBER .)


state 65

    (66) expression -> REAL .

    THEN            reduce using rule 66 (expression -> REAL .)
    AND             reduce using rule 66 (expression -> REAL .)
    OR              reduce using rule 66 (expression -> REAL .)
    LT              reduce using rule 66 (expression -> REAL .)
    LE              reduce using rule 66 (expression -> REAL .)
    GT              reduce using rule 66 (expression -> REAL .)
    GE              reduce using rule 66 (expression -> REAL .)
    EQ              reduce using rule 66 (expression -> REAL .)
    NEQ             reduce using rule 66 (expression -> REAL .)
    DIV             reduce using rule 66 (expression -> REAL .)
    MOD             reduce using rule 66 (expression -> REAL .)
    PLUS            reduce using rule 66 (expression -> REAL .)
    MINUS           reduce using rule 66 (expression -> REAL .)
    TIMES           reduce using rule 66 (expression -> REAL .)
    DIVIDE          reduce using rule 66 (expression -> REAL .)
    DO              reduce using rule 66 (expression -> REAL .)
    SEMI            reduce using rule 66 (expression -> REAL .)
    RPAREN          reduce using rule 66 (expression -> REAL .)
    COMMA           reduce using rule 66 (expression -> REAL .)
    TO              reduce using rule 66 (expression -> REAL .)


state 66

    (59) while_statement -> WHILE expression . DO statement
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    DO              shift and go to state 99
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 67

    (16) param_list -> ID . COLON type

    COLON           shift and go to state 100


state 68

    (15) function -> FUNCTION ID LPAREN param_list . RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI
    (17) param_list -> param_list . SEMI ID COLON type

    RPAREN          shift and go to state 101
    SEMI            shift and go to state 102


state 69

    (6) var_declaration -> id_list COLON type SEMI .

    ID              reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)
    FUNCTION        reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)
    BEGIN           reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)


state 70

    (33) assignment_statement -> ID ASSIGN expression . SEMI
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    SEMI            shift and go to state 103
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 71

    (56) statement_compound -> BEGIN statement_list END .

    SEMI            reduce using rule 56 (statement_compound -> BEGIN statement_list END .)
    END             reduce using rule 56 (statement_compound -> BEGIN statement_list END .)
    ELSE            reduce using rule 56 (statement_compound -> BEGIN statement_list END .)


state 72

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statement_list END DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMI declarations functions BEGIN statement_list END DOT .)


state 73

    (22) statement_list -> statement SEMI statement_list .

    END             reduce using rule 22 (statement_list -> statement SEMI statement_list .)


state 74

    (34) writeln_statement -> WRITELN LPAREN writelist . RPAREN SEMI
    (36) writelist -> writelist . COMMA writeitem

    RPAREN          shift and go to state 104
    COMMA           shift and go to state 105


state 75

    (37) writelist -> writeitem .

    RPAREN          reduce using rule 37 (writelist -> writeitem .)
    COMMA           reduce using rule 37 (writelist -> writeitem .)


state 76

    (38) writeitem -> STRING_LITERAL .

    RPAREN          reduce using rule 38 (writeitem -> STRING_LITERAL .)
    COMMA           reduce using rule 38 (writeitem -> STRING_LITERAL .)


state 77

    (39) writeitem -> expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 39 (writeitem -> expression .)
    COMMA           reduce using rule 39 (writeitem -> expression .)
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 78

    (35) write_statement -> WRITE LPAREN writelist . RPAREN SEMI
    (36) writelist -> writelist . COMMA writeitem

    RPAREN          shift and go to state 106
    COMMA           shift and go to state 105


state 79

    (40) readln_statement -> READLN LPAREN ID . RPAREN SEMI

    RPAREN          shift and go to state 107


state 80

    (41) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 108

state 81

    (57) if_statement -> IF expression THEN . statement
    (58) if_statement -> IF expression THEN . statement ELSE statement
    (25) statement -> . assignment_statement
    (26) statement -> . writeln_statement
    (27) statement -> . write_statement
    (28) statement -> . readln_statement
    (29) statement -> . for_statement
    (30) statement -> . if_statement
    (31) statement -> . while_statement
    (32) statement -> . statement_compound
    (33) assignment_statement -> . ID ASSIGN expression SEMI
    (34) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (35) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (40) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (41) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (57) if_statement -> . IF expression THEN statement
    (58) if_statement -> . IF expression THEN statement ELSE statement
    (59) while_statement -> . WHILE expression DO statement
    (56) statement_compound -> . BEGIN statement_list END

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 24

    statement                      shift and go to state 109
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35

state 82

    (44) expression -> expression AND . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 110

state 83

    (45) expression -> expression OR . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 111

state 84

    (47) expression -> expression LT . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 112

state 85

    (48) expression -> expression LE . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 113

state 86

    (49) expression -> expression GT . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 114

state 87

    (50) expression -> expression GE . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 115

state 88

    (51) expression -> expression EQ . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 116

state 89

    (52) expression -> expression NEQ . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 117

state 90

    (54) expression -> expression DIV . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 118

state 91

    (55) expression -> expression MOD . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 119

state 92

    (60) expression -> expression PLUS . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 120

state 93

    (61) expression -> expression MINUS . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 121

state 94

    (62) expression -> expression TIMES . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 122

state 95

    (63) expression -> expression DIVIDE . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 123

state 96

    (20) expression -> ID LPAREN . argument_list RPAREN
    (18) argument_list -> . expression
    (19) argument_list -> . argument_list COMMA expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    argument_list                  shift and go to state 124
    expression                     shift and go to state 125

state 97

    (53) expression -> LPAREN expression . RPAREN
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 126
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 98

    (46) expression -> NOT expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 46 (expression -> NOT expression .)
    AND             reduce using rule 46 (expression -> NOT expression .)
    OR              reduce using rule 46 (expression -> NOT expression .)
    LT              reduce using rule 46 (expression -> NOT expression .)
    LE              reduce using rule 46 (expression -> NOT expression .)
    GT              reduce using rule 46 (expression -> NOT expression .)
    GE              reduce using rule 46 (expression -> NOT expression .)
    EQ              reduce using rule 46 (expression -> NOT expression .)
    NEQ             reduce using rule 46 (expression -> NOT expression .)
    DIV             reduce using rule 46 (expression -> NOT expression .)
    MOD             reduce using rule 46 (expression -> NOT expression .)
    PLUS            reduce using rule 46 (expression -> NOT expression .)
    MINUS           reduce using rule 46 (expression -> NOT expression .)
    TIMES           reduce using rule 46 (expression -> NOT expression .)
    DIVIDE          reduce using rule 46 (expression -> NOT expression .)
    DO              reduce using rule 46 (expression -> NOT expression .)
    SEMI            reduce using rule 46 (expression -> NOT expression .)
    RPAREN          reduce using rule 46 (expression -> NOT expression .)
    COMMA           reduce using rule 46 (expression -> NOT expression .)
    TO              reduce using rule 46 (expression -> NOT expression .)

  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! DIV             [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 99

    (59) while_statement -> WHILE expression DO . statement
    (25) statement -> . assignment_statement
    (26) statement -> . writeln_statement
    (27) statement -> . write_statement
    (28) statement -> . readln_statement
    (29) statement -> . for_statement
    (30) statement -> . if_statement
    (31) statement -> . while_statement
    (32) statement -> . statement_compound
    (33) assignment_statement -> . ID ASSIGN expression SEMI
    (34) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (35) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (40) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (41) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (57) if_statement -> . IF expression THEN statement
    (58) if_statement -> . IF expression THEN statement ELSE statement
    (59) while_statement -> . WHILE expression DO statement
    (56) statement_compound -> . BEGIN statement_list END

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 24

    statement                      shift and go to state 127
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35

state 100

    (16) param_list -> ID COLON . type
    (9) type -> . INTEGER
    (10) type -> . BOOLEAN
    (11) type -> . STRING
    (12) type -> . REAL

    INTEGER         shift and go to state 44
    BOOLEAN         shift and go to state 45
    STRING          shift and go to state 46
    REAL            shift and go to state 47

    type                           shift and go to state 128

state 101

    (15) function -> FUNCTION ID LPAREN param_list RPAREN . COLON type SEMI declarations BEGIN statement_list END SEMI

    COLON           shift and go to state 129


state 102

    (17) param_list -> param_list SEMI . ID COLON type

    ID              shift and go to state 130


state 103

    (33) assignment_statement -> ID ASSIGN expression SEMI .

    SEMI            reduce using rule 33 (assignment_statement -> ID ASSIGN expression SEMI .)
    END             reduce using rule 33 (assignment_statement -> ID ASSIGN expression SEMI .)
    ELSE            reduce using rule 33 (assignment_statement -> ID ASSIGN expression SEMI .)


state 104

    (34) writeln_statement -> WRITELN LPAREN writelist RPAREN . SEMI

    SEMI            shift and go to state 131


state 105

    (36) writelist -> writelist COMMA . writeitem
    (38) writeitem -> . STRING_LITERAL
    (39) writeitem -> . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    STRING_LITERAL  shift and go to state 76
    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    writeitem                      shift and go to state 132
    expression                     shift and go to state 77

state 106

    (35) write_statement -> WRITE LPAREN writelist RPAREN . SEMI

    SEMI            shift and go to state 133


state 107

    (40) readln_statement -> READLN LPAREN ID RPAREN . SEMI

    SEMI            shift and go to state 134


state 108

    (41) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    TO              shift and go to state 135
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 109

    (57) if_statement -> IF expression THEN statement .
    (58) if_statement -> IF expression THEN statement . ELSE statement

    SEMI            reduce using rule 57 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 57 (if_statement -> IF expression THEN statement .)
    ELSE            reduce using rule 57 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ shift and go to state 136 ]


state 110

    (44) expression -> expression AND expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 44 (expression -> expression AND expression .)
    AND             reduce using rule 44 (expression -> expression AND expression .)
    OR              reduce using rule 44 (expression -> expression AND expression .)
    DO              reduce using rule 44 (expression -> expression AND expression .)
    SEMI            reduce using rule 44 (expression -> expression AND expression .)
    RPAREN          reduce using rule 44 (expression -> expression AND expression .)
    COMMA           reduce using rule 44 (expression -> expression AND expression .)
    TO              reduce using rule 44 (expression -> expression AND expression .)
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! LT              [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]


state 111

    (45) expression -> expression OR expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 45 (expression -> expression OR expression .)
    OR              reduce using rule 45 (expression -> expression OR expression .)
    DO              reduce using rule 45 (expression -> expression OR expression .)
    SEMI            reduce using rule 45 (expression -> expression OR expression .)
    RPAREN          reduce using rule 45 (expression -> expression OR expression .)
    COMMA           reduce using rule 45 (expression -> expression OR expression .)
    TO              reduce using rule 45 (expression -> expression OR expression .)
    AND             shift and go to state 82
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! AND             [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 83 ]


state 112

    (47) expression -> expression LT expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 47 (expression -> expression LT expression .)
    AND             reduce using rule 47 (expression -> expression LT expression .)
    OR              reduce using rule 47 (expression -> expression LT expression .)
    LT              reduce using rule 47 (expression -> expression LT expression .)
    LE              reduce using rule 47 (expression -> expression LT expression .)
    GT              reduce using rule 47 (expression -> expression LT expression .)
    GE              reduce using rule 47 (expression -> expression LT expression .)
    EQ              reduce using rule 47 (expression -> expression LT expression .)
    NEQ             reduce using rule 47 (expression -> expression LT expression .)
    DO              reduce using rule 47 (expression -> expression LT expression .)
    SEMI            reduce using rule 47 (expression -> expression LT expression .)
    RPAREN          reduce using rule 47 (expression -> expression LT expression .)
    COMMA           reduce using rule 47 (expression -> expression LT expression .)
    TO              reduce using rule 47 (expression -> expression LT expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression LT expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 113

    (48) expression -> expression LE expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 48 (expression -> expression LE expression .)
    AND             reduce using rule 48 (expression -> expression LE expression .)
    OR              reduce using rule 48 (expression -> expression LE expression .)
    LT              reduce using rule 48 (expression -> expression LE expression .)
    LE              reduce using rule 48 (expression -> expression LE expression .)
    GT              reduce using rule 48 (expression -> expression LE expression .)
    GE              reduce using rule 48 (expression -> expression LE expression .)
    EQ              reduce using rule 48 (expression -> expression LE expression .)
    NEQ             reduce using rule 48 (expression -> expression LE expression .)
    DO              reduce using rule 48 (expression -> expression LE expression .)
    SEMI            reduce using rule 48 (expression -> expression LE expression .)
    RPAREN          reduce using rule 48 (expression -> expression LE expression .)
    COMMA           reduce using rule 48 (expression -> expression LE expression .)
    TO              reduce using rule 48 (expression -> expression LE expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 48 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 48 (expression -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 48 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 48 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression LE expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 114

    (49) expression -> expression GT expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 49 (expression -> expression GT expression .)
    AND             reduce using rule 49 (expression -> expression GT expression .)
    OR              reduce using rule 49 (expression -> expression GT expression .)
    LT              reduce using rule 49 (expression -> expression GT expression .)
    LE              reduce using rule 49 (expression -> expression GT expression .)
    GT              reduce using rule 49 (expression -> expression GT expression .)
    GE              reduce using rule 49 (expression -> expression GT expression .)
    EQ              reduce using rule 49 (expression -> expression GT expression .)
    NEQ             reduce using rule 49 (expression -> expression GT expression .)
    DO              reduce using rule 49 (expression -> expression GT expression .)
    SEMI            reduce using rule 49 (expression -> expression GT expression .)
    RPAREN          reduce using rule 49 (expression -> expression GT expression .)
    COMMA           reduce using rule 49 (expression -> expression GT expression .)
    TO              reduce using rule 49 (expression -> expression GT expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 49 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 49 (expression -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 49 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 49 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression GT expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 115

    (50) expression -> expression GE expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 50 (expression -> expression GE expression .)
    AND             reduce using rule 50 (expression -> expression GE expression .)
    OR              reduce using rule 50 (expression -> expression GE expression .)
    LT              reduce using rule 50 (expression -> expression GE expression .)
    LE              reduce using rule 50 (expression -> expression GE expression .)
    GT              reduce using rule 50 (expression -> expression GE expression .)
    GE              reduce using rule 50 (expression -> expression GE expression .)
    EQ              reduce using rule 50 (expression -> expression GE expression .)
    NEQ             reduce using rule 50 (expression -> expression GE expression .)
    DO              reduce using rule 50 (expression -> expression GE expression .)
    SEMI            reduce using rule 50 (expression -> expression GE expression .)
    RPAREN          reduce using rule 50 (expression -> expression GE expression .)
    COMMA           reduce using rule 50 (expression -> expression GE expression .)
    TO              reduce using rule 50 (expression -> expression GE expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 50 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 50 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 50 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression GE expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 116

    (51) expression -> expression EQ expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 51 (expression -> expression EQ expression .)
    AND             reduce using rule 51 (expression -> expression EQ expression .)
    OR              reduce using rule 51 (expression -> expression EQ expression .)
    LT              reduce using rule 51 (expression -> expression EQ expression .)
    LE              reduce using rule 51 (expression -> expression EQ expression .)
    GT              reduce using rule 51 (expression -> expression EQ expression .)
    GE              reduce using rule 51 (expression -> expression EQ expression .)
    EQ              reduce using rule 51 (expression -> expression EQ expression .)
    NEQ             reduce using rule 51 (expression -> expression EQ expression .)
    DO              reduce using rule 51 (expression -> expression EQ expression .)
    SEMI            reduce using rule 51 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 51 (expression -> expression EQ expression .)
    COMMA           reduce using rule 51 (expression -> expression EQ expression .)
    TO              reduce using rule 51 (expression -> expression EQ expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 117

    (52) expression -> expression NEQ expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 52 (expression -> expression NEQ expression .)
    AND             reduce using rule 52 (expression -> expression NEQ expression .)
    OR              reduce using rule 52 (expression -> expression NEQ expression .)
    LT              reduce using rule 52 (expression -> expression NEQ expression .)
    LE              reduce using rule 52 (expression -> expression NEQ expression .)
    GT              reduce using rule 52 (expression -> expression NEQ expression .)
    GE              reduce using rule 52 (expression -> expression NEQ expression .)
    EQ              reduce using rule 52 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 52 (expression -> expression NEQ expression .)
    DO              reduce using rule 52 (expression -> expression NEQ expression .)
    SEMI            reduce using rule 52 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 52 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 52 (expression -> expression NEQ expression .)
    TO              reduce using rule 52 (expression -> expression NEQ expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 52 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression NEQ expression .) ]
  ! PLUS            [ reduce using rule 52 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression NEQ expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]


state 118

    (54) expression -> expression DIV expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 54 (expression -> expression DIV expression .)
    AND             reduce using rule 54 (expression -> expression DIV expression .)
    OR              reduce using rule 54 (expression -> expression DIV expression .)
    LT              reduce using rule 54 (expression -> expression DIV expression .)
    LE              reduce using rule 54 (expression -> expression DIV expression .)
    GT              reduce using rule 54 (expression -> expression DIV expression .)
    GE              reduce using rule 54 (expression -> expression DIV expression .)
    EQ              reduce using rule 54 (expression -> expression DIV expression .)
    NEQ             reduce using rule 54 (expression -> expression DIV expression .)
    DIV             reduce using rule 54 (expression -> expression DIV expression .)
    MOD             reduce using rule 54 (expression -> expression DIV expression .)
    PLUS            reduce using rule 54 (expression -> expression DIV expression .)
    MINUS           reduce using rule 54 (expression -> expression DIV expression .)
    TIMES           reduce using rule 54 (expression -> expression DIV expression .)
    DIVIDE          reduce using rule 54 (expression -> expression DIV expression .)
    DO              reduce using rule 54 (expression -> expression DIV expression .)
    SEMI            reduce using rule 54 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 54 (expression -> expression DIV expression .)
    COMMA           reduce using rule 54 (expression -> expression DIV expression .)
    TO              reduce using rule 54 (expression -> expression DIV expression .)

  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! DIV             [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 119

    (55) expression -> expression MOD expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 55 (expression -> expression MOD expression .)
    AND             reduce using rule 55 (expression -> expression MOD expression .)
    OR              reduce using rule 55 (expression -> expression MOD expression .)
    LT              reduce using rule 55 (expression -> expression MOD expression .)
    LE              reduce using rule 55 (expression -> expression MOD expression .)
    GT              reduce using rule 55 (expression -> expression MOD expression .)
    GE              reduce using rule 55 (expression -> expression MOD expression .)
    EQ              reduce using rule 55 (expression -> expression MOD expression .)
    NEQ             reduce using rule 55 (expression -> expression MOD expression .)
    DIV             reduce using rule 55 (expression -> expression MOD expression .)
    MOD             reduce using rule 55 (expression -> expression MOD expression .)
    PLUS            reduce using rule 55 (expression -> expression MOD expression .)
    MINUS           reduce using rule 55 (expression -> expression MOD expression .)
    TIMES           reduce using rule 55 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 55 (expression -> expression MOD expression .)
    DO              reduce using rule 55 (expression -> expression MOD expression .)
    SEMI            reduce using rule 55 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 55 (expression -> expression MOD expression .)
    COMMA           reduce using rule 55 (expression -> expression MOD expression .)
    TO              reduce using rule 55 (expression -> expression MOD expression .)

  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! DIV             [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 120

    (60) expression -> expression PLUS expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 60 (expression -> expression PLUS expression .)
    AND             reduce using rule 60 (expression -> expression PLUS expression .)
    OR              reduce using rule 60 (expression -> expression PLUS expression .)
    LT              reduce using rule 60 (expression -> expression PLUS expression .)
    LE              reduce using rule 60 (expression -> expression PLUS expression .)
    GT              reduce using rule 60 (expression -> expression PLUS expression .)
    GE              reduce using rule 60 (expression -> expression PLUS expression .)
    EQ              reduce using rule 60 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 60 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 60 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 60 (expression -> expression PLUS expression .)
    DO              reduce using rule 60 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 60 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 60 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 60 (expression -> expression PLUS expression .)
    TO              reduce using rule 60 (expression -> expression PLUS expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression PLUS expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]


state 121

    (61) expression -> expression MINUS expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 61 (expression -> expression MINUS expression .)
    AND             reduce using rule 61 (expression -> expression MINUS expression .)
    OR              reduce using rule 61 (expression -> expression MINUS expression .)
    LT              reduce using rule 61 (expression -> expression MINUS expression .)
    LE              reduce using rule 61 (expression -> expression MINUS expression .)
    GT              reduce using rule 61 (expression -> expression MINUS expression .)
    GE              reduce using rule 61 (expression -> expression MINUS expression .)
    EQ              reduce using rule 61 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 61 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 61 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 61 (expression -> expression MINUS expression .)
    DO              reduce using rule 61 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 61 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 61 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 61 (expression -> expression MINUS expression .)
    TO              reduce using rule 61 (expression -> expression MINUS expression .)
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95

  ! DIV             [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression MINUS expression .) ]
  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]


state 122

    (62) expression -> expression TIMES expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 62 (expression -> expression TIMES expression .)
    AND             reduce using rule 62 (expression -> expression TIMES expression .)
    OR              reduce using rule 62 (expression -> expression TIMES expression .)
    LT              reduce using rule 62 (expression -> expression TIMES expression .)
    LE              reduce using rule 62 (expression -> expression TIMES expression .)
    GT              reduce using rule 62 (expression -> expression TIMES expression .)
    GE              reduce using rule 62 (expression -> expression TIMES expression .)
    EQ              reduce using rule 62 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 62 (expression -> expression TIMES expression .)
    DIV             reduce using rule 62 (expression -> expression TIMES expression .)
    MOD             reduce using rule 62 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 62 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 62 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 62 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 62 (expression -> expression TIMES expression .)
    DO              reduce using rule 62 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 62 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 62 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 62 (expression -> expression TIMES expression .)
    TO              reduce using rule 62 (expression -> expression TIMES expression .)

  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! DIV             [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 123

    (63) expression -> expression DIVIDE expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    THEN            reduce using rule 63 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 63 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 63 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 63 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 63 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 63 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 63 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 63 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 63 (expression -> expression DIVIDE expression .)
    DIV             reduce using rule 63 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 63 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 63 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 63 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 63 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 63 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 63 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 63 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 63 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 63 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 63 (expression -> expression DIVIDE expression .)

  ! AND             [ shift and go to state 82 ]
  ! OR              [ shift and go to state 83 ]
  ! LT              [ shift and go to state 84 ]
  ! LE              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 87 ]
  ! EQ              [ shift and go to state 88 ]
  ! NEQ             [ shift and go to state 89 ]
  ! DIV             [ shift and go to state 90 ]
  ! MOD             [ shift and go to state 91 ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 93 ]
  ! TIMES           [ shift and go to state 94 ]
  ! DIVIDE          [ shift and go to state 95 ]


state 124

    (20) expression -> ID LPAREN argument_list . RPAREN
    (19) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 137
    COMMA           shift and go to state 138


state 125

    (18) argument_list -> expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 18 (argument_list -> expression .)
    COMMA           reduce using rule 18 (argument_list -> expression .)
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 126

    (53) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 53 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 53 (expression -> LPAREN expression RPAREN .)


state 127

    (59) while_statement -> WHILE expression DO statement .

    SEMI            reduce using rule 59 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 59 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 59 (while_statement -> WHILE expression DO statement .)


state 128

    (16) param_list -> ID COLON type .

    RPAREN          reduce using rule 16 (param_list -> ID COLON type .)
    SEMI            reduce using rule 16 (param_list -> ID COLON type .)


state 129

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON . type SEMI declarations BEGIN statement_list END SEMI
    (9) type -> . INTEGER
    (10) type -> . BOOLEAN
    (11) type -> . STRING
    (12) type -> . REAL

    INTEGER         shift and go to state 44
    BOOLEAN         shift and go to state 45
    STRING          shift and go to state 46
    REAL            shift and go to state 47

    type                           shift and go to state 139

state 130

    (17) param_list -> param_list SEMI ID . COLON type

    COLON           shift and go to state 140


state 131

    (34) writeln_statement -> WRITELN LPAREN writelist RPAREN SEMI .

    SEMI            reduce using rule 34 (writeln_statement -> WRITELN LPAREN writelist RPAREN SEMI .)
    END             reduce using rule 34 (writeln_statement -> WRITELN LPAREN writelist RPAREN SEMI .)
    ELSE            reduce using rule 34 (writeln_statement -> WRITELN LPAREN writelist RPAREN SEMI .)


state 132

    (36) writelist -> writelist COMMA writeitem .

    RPAREN          reduce using rule 36 (writelist -> writelist COMMA writeitem .)
    COMMA           reduce using rule 36 (writelist -> writelist COMMA writeitem .)


state 133

    (35) write_statement -> WRITE LPAREN writelist RPAREN SEMI .

    SEMI            reduce using rule 35 (write_statement -> WRITE LPAREN writelist RPAREN SEMI .)
    END             reduce using rule 35 (write_statement -> WRITE LPAREN writelist RPAREN SEMI .)
    ELSE            reduce using rule 35 (write_statement -> WRITE LPAREN writelist RPAREN SEMI .)


state 134

    (40) readln_statement -> READLN LPAREN ID RPAREN SEMI .

    SEMI            reduce using rule 40 (readln_statement -> READLN LPAREN ID RPAREN SEMI .)
    END             reduce using rule 40 (readln_statement -> READLN LPAREN ID RPAREN SEMI .)
    ELSE            reduce using rule 40 (readln_statement -> READLN LPAREN ID RPAREN SEMI .)


state 135

    (41) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 141

state 136

    (58) if_statement -> IF expression THEN statement ELSE . statement
    (25) statement -> . assignment_statement
    (26) statement -> . writeln_statement
    (27) statement -> . write_statement
    (28) statement -> . readln_statement
    (29) statement -> . for_statement
    (30) statement -> . if_statement
    (31) statement -> . while_statement
    (32) statement -> . statement_compound
    (33) assignment_statement -> . ID ASSIGN expression SEMI
    (34) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (35) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (40) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (41) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (57) if_statement -> . IF expression THEN statement
    (58) if_statement -> . IF expression THEN statement ELSE statement
    (59) while_statement -> . WHILE expression DO statement
    (56) statement_compound -> . BEGIN statement_list END

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 24

    statement                      shift and go to state 142
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35

state 137

    (20) expression -> ID LPAREN argument_list RPAREN .

    THEN            reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    AND             reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    OR              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    LT              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    LE              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    GT              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    GE              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    EQ              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    NEQ             reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    DIV             reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    MOD             reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    DO              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    SEMI            reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    TO              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)


state 138

    (19) argument_list -> argument_list COMMA . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (42) expression -> . TRUE
    (43) expression -> . FALSE
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . NOT expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression LE expression
    (49) expression -> . expression GT expression
    (50) expression -> . expression GE expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NEQ expression
    (53) expression -> . LPAREN expression RPAREN
    (54) expression -> . expression DIV expression
    (55) expression -> . expression MOD expression
    (60) expression -> . expression PLUS expression
    (61) expression -> . expression MINUS expression
    (62) expression -> . expression TIMES expression
    (63) expression -> . expression DIVIDE expression
    (64) expression -> . ID
    (65) expression -> . NUMBER
    (66) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NOT             shift and go to state 63
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 64
    REAL            shift and go to state 65

    expression                     shift and go to state 143

state 139

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type . SEMI declarations BEGIN statement_list END SEMI

    SEMI            shift and go to state 144


state 140

    (17) param_list -> param_list SEMI ID COLON . type
    (9) type -> . INTEGER
    (10) type -> . BOOLEAN
    (11) type -> . STRING
    (12) type -> . REAL

    INTEGER         shift and go to state 44
    BOOLEAN         shift and go to state 45
    STRING          shift and go to state 46
    REAL            shift and go to state 47

    type                           shift and go to state 145

state 141

    (41) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    DO              shift and go to state 146
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 142

    (58) if_statement -> IF expression THEN statement ELSE statement .

    SEMI            reduce using rule 58 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 58 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 58 (if_statement -> IF expression THEN statement ELSE statement .)


state 143

    (19) argument_list -> argument_list COMMA expression .
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . LE expression
    (49) expression -> expression . GT expression
    (50) expression -> expression . GE expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NEQ expression
    (54) expression -> expression . DIV expression
    (55) expression -> expression . MOD expression
    (60) expression -> expression . PLUS expression
    (61) expression -> expression . MINUS expression
    (62) expression -> expression . TIMES expression
    (63) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 19 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 19 (argument_list -> argument_list COMMA expression .)
    AND             shift and go to state 82
    OR              shift and go to state 83
    LT              shift and go to state 84
    LE              shift and go to state 85
    GT              shift and go to state 86
    GE              shift and go to state 87
    EQ              shift and go to state 88
    NEQ             shift and go to state 89
    DIV             shift and go to state 90
    MOD             shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95


state 144

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI . declarations BEGIN statement_list END SEMI
    (2) declarations -> . VAR var_declaration_list
    (3) declarations -> . empty
    (67) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 67 (empty -> .)

    declarations                   shift and go to state 147
    empty                          shift and go to state 7

state 145

    (17) param_list -> param_list SEMI ID COLON type .

    RPAREN          reduce using rule 17 (param_list -> param_list SEMI ID COLON type .)
    SEMI            reduce using rule 17 (param_list -> param_list SEMI ID COLON type .)


state 146

    (41) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (25) statement -> . assignment_statement
    (26) statement -> . writeln_statement
    (27) statement -> . write_statement
    (28) statement -> . readln_statement
    (29) statement -> . for_statement
    (30) statement -> . if_statement
    (31) statement -> . while_statement
    (32) statement -> . statement_compound
    (33) assignment_statement -> . ID ASSIGN expression SEMI
    (34) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (35) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (40) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (41) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (57) if_statement -> . IF expression THEN statement
    (58) if_statement -> . IF expression THEN statement ELSE statement
    (59) while_statement -> . WHILE expression DO statement
    (56) statement_compound -> . BEGIN statement_list END

    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 24

    statement                      shift and go to state 148
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35

state 147

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations . BEGIN statement_list END SEMI

    BEGIN           shift and go to state 149


state 148

    (41) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    SEMI            reduce using rule 41 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    END             reduce using rule 41 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 41 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 149

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN . statement_list END SEMI
    (21) statement_list -> . statement
    (22) statement_list -> . statement SEMI statement_list
    (23) statement_list -> . SEMI statement_list
    (24) statement_list -> . empty
    (25) statement -> . assignment_statement
    (26) statement -> . writeln_statement
    (27) statement -> . write_statement
    (28) statement -> . readln_statement
    (29) statement -> . for_statement
    (30) statement -> . if_statement
    (31) statement -> . while_statement
    (32) statement -> . statement_compound
    (67) empty -> .
    (33) assignment_statement -> . ID ASSIGN expression SEMI
    (34) writeln_statement -> . WRITELN LPAREN writelist RPAREN SEMI
    (35) write_statement -> . WRITE LPAREN writelist RPAREN SEMI
    (40) readln_statement -> . READLN LPAREN ID RPAREN SEMI
    (41) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (57) if_statement -> . IF expression THEN statement
    (58) if_statement -> . IF expression THEN statement ELSE statement
    (59) while_statement -> . WHILE expression DO statement
    (56) statement_compound -> . BEGIN statement_list END

    SEMI            shift and go to state 23
    END             reduce using rule 67 (empty -> .)
    ID              shift and go to state 22
    WRITELN         shift and go to state 36
    WRITE           shift and go to state 37
    READLN          shift and go to state 38
    FOR             shift and go to state 39
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    BEGIN           shift and go to state 24

    statement_list                 shift and go to state 150
    statement                      shift and go to state 26
    empty                          shift and go to state 27
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35

state 150

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list . END SEMI

    END             shift and go to state 151


state 151

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END . SEMI

    SEMI            shift and go to state 152


state 152

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI .

    FUNCTION        reduce using rule 15 (function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI .)
    BEGIN           reduce using rule 15 (function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statement_list END SEMI .)

