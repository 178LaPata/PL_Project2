Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CASE
    CONST
    DOWNTO
    FILE
    GOTO
    IN
    LABEL
    NIL
    NOT
    PACKED
    PROCEDURE
    READ
    RECORD
    REPEAT
    SET
    TYPE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMI declarations functions BEGIN statements END DOT
Rule 2     declarations -> VAR var_declaration_list
Rule 3     declarations -> empty
Rule 4     var_declaration_list -> var_declaration_list var_declaration
Rule 5     var_declaration_list -> var_declaration
Rule 6     var_declaration -> id_list COLON type SEMI
Rule 7     id_list -> ID
Rule 8     id_list -> ID COMMA id_list
Rule 9     type -> simple_type
Rule 10    type -> array_type
Rule 11    simple_type -> INTEGER
Rule 12    simple_type -> BOOLEAN
Rule 13    simple_type -> STRING
Rule 14    simple_type -> REAL
Rule 15    array_type -> ARRAY LBRACKET index_range RBRACKET OF type
Rule 16    index_range -> NUMBER DOTDOT NUMBER
Rule 17    variable -> ID
Rule 18    variable -> ID LBRACKET expression RBRACKET
Rule 19    functions -> function functions
Rule 20    functions -> empty
Rule 21    function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
Rule 22    param_list -> ID COLON type
Rule 23    param_list -> param_list SEMI ID COLON type
Rule 24    argument_list -> expression
Rule 25    argument_list -> argument_list COMMA expression
Rule 26    expression -> ID LPAREN argument_list RPAREN
Rule 27    statements -> statement_sequence
Rule 28    statement_sequence -> statement
Rule 29    statement_sequence -> statement_sequence SEMI statement
Rule 30    statement -> assignment_statement
Rule 31    statement -> writeln_statement
Rule 32    statement -> write_statement
Rule 33    statement -> readln_statement
Rule 34    statement -> for_statement
Rule 35    statement -> if_statement
Rule 36    statement -> while_statement
Rule 37    statement -> statement_compound
Rule 38    statement -> concrete_empty_statement
Rule 39    concrete_empty_statement -> <empty>
Rule 40    assignment_statement -> variable ASSIGN expression
Rule 41    writeln_statement -> WRITELN LPAREN writelist RPAREN
Rule 42    write_statement -> WRITE LPAREN writelist RPAREN
Rule 43    writelist -> writelist COMMA writeitem
Rule 44    writelist -> writeitem
Rule 45    writeitem -> STRING_LITERAL
Rule 46    writeitem -> expression
Rule 47    readln_statement -> READLN LPAREN variable RPAREN
Rule 48    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 49    expression -> TRUE
Rule 50    expression -> FALSE
Rule 51    expression -> expression AND expression
Rule 52    expression -> expression OR expression
Rule 53    expression -> expression LT expression
Rule 54    expression -> expression LE expression
Rule 55    expression -> expression GT expression
Rule 56    expression -> expression GE expression
Rule 57    expression -> expression EQ expression
Rule 58    expression -> expression NEQ expression
Rule 59    expression -> LPAREN expression RPAREN
Rule 60    expression -> expression DIV expression
Rule 61    expression -> expression MOD expression
Rule 62    statement_compound -> BEGIN statements END
Rule 63    if_statement -> IF expression THEN statement
Rule 64    if_statement -> IF expression THEN statement ELSE statement
Rule 65    while_statement -> WHILE expression DO statement
Rule 66    expression -> expression PLUS expression
Rule 67    expression -> expression MINUS expression
Rule 68    expression -> expression TIMES expression
Rule 69    expression -> expression DIVIDE expression
Rule 70    expression -> variable
Rule 71    expression -> NUMBER
Rule 72    expression -> REAL
Rule 73    empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
ARRAY                : 15
ASSIGN               : 40 48
BEGIN                : 1 21 62
BOOLEAN              : 12
CASE                 : 
COLON                : 6 21 22 23
COMMA                : 8 25 43
CONST                : 
DIV                  : 60
DIVIDE               : 69
DO                   : 48 65
DOT                  : 1
DOTDOT               : 16
DOWNTO               : 
ELSE                 : 64
END                  : 1 21 62
EQ                   : 57
FALSE                : 50
FILE                 : 
FOR                  : 48
FUNCTION             : 21
GE                   : 56
GOTO                 : 
GT                   : 55
ID                   : 1 7 8 17 18 21 22 23 26 48
IF                   : 63 64
IN                   : 
INTEGER              : 11
LABEL                : 
LBRACKET             : 15 18
LE                   : 54
LPAREN               : 21 26 41 42 47 59
LT                   : 53
MINUS                : 67
MOD                  : 61
NEQ                  : 58
NIL                  : 
NOT                  : 
NUMBER               : 16 16 71
OF                   : 15
OR                   : 52
PACKED               : 
PLUS                 : 66
PROCEDURE            : 
PROGRAM              : 1
RBRACKET             : 15 18
READ                 : 
READLN               : 47
REAL                 : 14 72
RECORD               : 
REPEAT               : 
RPAREN               : 21 26 41 42 47 59
SEMI                 : 1 6 21 21 23 29
SET                  : 
STRING               : 13
STRING_LITERAL       : 45
THEN                 : 63 64
TIMES                : 68
TO                   : 48
TRUE                 : 49
TYPE                 : 
UNTIL                : 
VAR                  : 2
WHILE                : 65
WITH                 : 
WRITE                : 42
WRITELN              : 41
error                : 

Nonterminals, with rules where they appear

argument_list        : 25 26
array_type           : 10
assignment_statement : 30
concrete_empty_statement : 38
declarations         : 1 21
empty                : 3 20
expression           : 18 24 25 40 46 48 48 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 60 60 61 61 63 64 65 66 66 67 67 68 68 69 69
for_statement        : 34
function             : 19
functions            : 1 19
id_list              : 6 8
if_statement         : 35
index_range          : 15
param_list           : 21 23
program              : 0
readln_statement     : 33
simple_type          : 9
statement            : 28 29 48 63 64 64 65
statement_compound   : 37
statement_sequence   : 27 29
statements           : 1 21 62
type                 : 6 15 21 22 23
var_declaration      : 4 5
var_declaration_list : 2 4
variable             : 40 47 70
while_statement      : 36
write_statement      : 32
writeitem            : 43 44
writelist            : 41 42 43
writeln_statement    : 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMI declarations functions BEGIN statements END DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMI declarations functions BEGIN statements END DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMI declarations functions BEGIN statements END DOT

    SEMI            shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMI . declarations functions BEGIN statements END DOT
    (2) declarations -> . VAR var_declaration_list
    (3) declarations -> . empty
    (73) empty -> .

    VAR             shift and go to state 6
    FUNCTION        reduce using rule 73 (empty -> .)
    BEGIN           reduce using rule 73 (empty -> .)

    declarations                   shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMI declarations . functions BEGIN statements END DOT
    (19) functions -> . function functions
    (20) functions -> . empty
    (21) function -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (73) empty -> .

    FUNCTION        shift and go to state 11
    BEGIN           reduce using rule 73 (empty -> .)

    functions                      shift and go to state 8
    function                       shift and go to state 9
    empty                          shift and go to state 10

state 6

    (2) declarations -> VAR . var_declaration_list
    (4) var_declaration_list -> . var_declaration_list var_declaration
    (5) var_declaration_list -> . var_declaration
    (6) var_declaration -> . id_list COLON type SEMI
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    ID              shift and go to state 15

    var_declaration_list           shift and go to state 12
    var_declaration                shift and go to state 13
    id_list                        shift and go to state 14

state 7

    (3) declarations -> empty .

    FUNCTION        reduce using rule 3 (declarations -> empty .)
    BEGIN           reduce using rule 3 (declarations -> empty .)


state 8

    (1) program -> PROGRAM ID SEMI declarations functions . BEGIN statements END DOT

    BEGIN           shift and go to state 16


state 9

    (19) functions -> function . functions
    (19) functions -> . function functions
    (20) functions -> . empty
    (21) function -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (73) empty -> .

    FUNCTION        shift and go to state 11
    BEGIN           reduce using rule 73 (empty -> .)

    function                       shift and go to state 9
    functions                      shift and go to state 17
    empty                          shift and go to state 10

state 10

    (20) functions -> empty .

    BEGIN           reduce using rule 20 (functions -> empty .)


state 11

    (21) function -> FUNCTION . ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI

    ID              shift and go to state 18


state 12

    (2) declarations -> VAR var_declaration_list .
    (4) var_declaration_list -> var_declaration_list . var_declaration
    (6) var_declaration -> . id_list COLON type SEMI
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    FUNCTION        reduce using rule 2 (declarations -> VAR var_declaration_list .)
    BEGIN           reduce using rule 2 (declarations -> VAR var_declaration_list .)
    ID              shift and go to state 15

    var_declaration                shift and go to state 19
    id_list                        shift and go to state 14

state 13

    (5) var_declaration_list -> var_declaration .

    ID              reduce using rule 5 (var_declaration_list -> var_declaration .)
    FUNCTION        reduce using rule 5 (var_declaration_list -> var_declaration .)
    BEGIN           reduce using rule 5 (var_declaration_list -> var_declaration .)


state 14

    (6) var_declaration -> id_list . COLON type SEMI

    COLON           shift and go to state 20


state 15

    (7) id_list -> ID .
    (8) id_list -> ID . COMMA id_list

    COLON           reduce using rule 7 (id_list -> ID .)
    COMMA           shift and go to state 21


state 16

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN . statements END DOT
    (27) statements -> . statement_sequence
    (28) statement_sequence -> . statement
    (29) statement_sequence -> . statement_sequence SEMI statement
    (30) statement -> . assignment_statement
    (31) statement -> . writeln_statement
    (32) statement -> . write_statement
    (33) statement -> . readln_statement
    (34) statement -> . for_statement
    (35) statement -> . if_statement
    (36) statement -> . while_statement
    (37) statement -> . statement_compound
    (38) statement -> . concrete_empty_statement
    (40) assignment_statement -> . variable ASSIGN expression
    (41) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (42) write_statement -> . WRITE LPAREN writelist RPAREN
    (47) readln_statement -> . READLN LPAREN variable RPAREN
    (48) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (63) if_statement -> . IF expression THEN statement
    (64) if_statement -> . IF expression THEN statement ELSE statement
    (65) while_statement -> . WHILE expression DO statement
    (62) statement_compound -> . BEGIN statements END
    (39) concrete_empty_statement -> .
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 39 (concrete_empty_statement -> .)
    END             reduce using rule 39 (concrete_empty_statement -> .)
    ID              shift and go to state 22

    statements                     shift and go to state 24
    statement_sequence             shift and go to state 25
    statement                      shift and go to state 26
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35
    variable                       shift and go to state 36

state 17

    (19) functions -> function functions .

    BEGIN           reduce using rule 19 (functions -> function functions .)


state 18

    (21) function -> FUNCTION ID . LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI

    LPAREN          shift and go to state 43


state 19

    (4) var_declaration_list -> var_declaration_list var_declaration .

    ID              reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)
    FUNCTION        reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)
    BEGIN           reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)


state 20

    (6) var_declaration -> id_list COLON . type SEMI
    (9) type -> . simple_type
    (10) type -> . array_type
    (11) simple_type -> . INTEGER
    (12) simple_type -> . BOOLEAN
    (13) simple_type -> . STRING
    (14) simple_type -> . REAL
    (15) array_type -> . ARRAY LBRACKET index_range RBRACKET OF type

    INTEGER         shift and go to state 47
    BOOLEAN         shift and go to state 48
    STRING          shift and go to state 49
    REAL            shift and go to state 50
    ARRAY           shift and go to state 51

    type                           shift and go to state 44
    simple_type                    shift and go to state 45
    array_type                     shift and go to state 46

state 21

    (8) id_list -> ID COMMA . id_list
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    ID              shift and go to state 15

    id_list                        shift and go to state 52

state 22

    (17) variable -> ID .
    (18) variable -> ID . LBRACKET expression RBRACKET

    ASSIGN          reduce using rule 17 (variable -> ID .)
    RPAREN          reduce using rule 17 (variable -> ID .)
    LBRACKET        shift and go to state 53


state 23

    (62) statement_compound -> BEGIN . statements END
    (27) statements -> . statement_sequence
    (28) statement_sequence -> . statement
    (29) statement_sequence -> . statement_sequence SEMI statement
    (30) statement -> . assignment_statement
    (31) statement -> . writeln_statement
    (32) statement -> . write_statement
    (33) statement -> . readln_statement
    (34) statement -> . for_statement
    (35) statement -> . if_statement
    (36) statement -> . while_statement
    (37) statement -> . statement_compound
    (38) statement -> . concrete_empty_statement
    (40) assignment_statement -> . variable ASSIGN expression
    (41) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (42) write_statement -> . WRITE LPAREN writelist RPAREN
    (47) readln_statement -> . READLN LPAREN variable RPAREN
    (48) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (63) if_statement -> . IF expression THEN statement
    (64) if_statement -> . IF expression THEN statement ELSE statement
    (65) while_statement -> . WHILE expression DO statement
    (62) statement_compound -> . BEGIN statements END
    (39) concrete_empty_statement -> .
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 39 (concrete_empty_statement -> .)
    END             reduce using rule 39 (concrete_empty_statement -> .)
    ID              shift and go to state 22

    statements                     shift and go to state 54
    statement_sequence             shift and go to state 25
    statement                      shift and go to state 26
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35
    variable                       shift and go to state 36

state 24

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statements . END DOT

    END             shift and go to state 55


state 25

    (27) statements -> statement_sequence .
    (29) statement_sequence -> statement_sequence . SEMI statement

    END             reduce using rule 27 (statements -> statement_sequence .)
    SEMI            shift and go to state 56


state 26

    (28) statement_sequence -> statement .

    SEMI            reduce using rule 28 (statement_sequence -> statement .)
    END             reduce using rule 28 (statement_sequence -> statement .)


state 27

    (30) statement -> assignment_statement .

    SEMI            reduce using rule 30 (statement -> assignment_statement .)
    END             reduce using rule 30 (statement -> assignment_statement .)
    ELSE            reduce using rule 30 (statement -> assignment_statement .)


state 28

    (31) statement -> writeln_statement .

    SEMI            reduce using rule 31 (statement -> writeln_statement .)
    END             reduce using rule 31 (statement -> writeln_statement .)
    ELSE            reduce using rule 31 (statement -> writeln_statement .)


state 29

    (32) statement -> write_statement .

    SEMI            reduce using rule 32 (statement -> write_statement .)
    END             reduce using rule 32 (statement -> write_statement .)
    ELSE            reduce using rule 32 (statement -> write_statement .)


state 30

    (33) statement -> readln_statement .

    SEMI            reduce using rule 33 (statement -> readln_statement .)
    END             reduce using rule 33 (statement -> readln_statement .)
    ELSE            reduce using rule 33 (statement -> readln_statement .)


state 31

    (34) statement -> for_statement .

    SEMI            reduce using rule 34 (statement -> for_statement .)
    END             reduce using rule 34 (statement -> for_statement .)
    ELSE            reduce using rule 34 (statement -> for_statement .)


state 32

    (35) statement -> if_statement .

    SEMI            reduce using rule 35 (statement -> if_statement .)
    END             reduce using rule 35 (statement -> if_statement .)
    ELSE            reduce using rule 35 (statement -> if_statement .)


state 33

    (36) statement -> while_statement .

    SEMI            reduce using rule 36 (statement -> while_statement .)
    END             reduce using rule 36 (statement -> while_statement .)
    ELSE            reduce using rule 36 (statement -> while_statement .)


state 34

    (37) statement -> statement_compound .

    SEMI            reduce using rule 37 (statement -> statement_compound .)
    END             reduce using rule 37 (statement -> statement_compound .)
    ELSE            reduce using rule 37 (statement -> statement_compound .)


state 35

    (38) statement -> concrete_empty_statement .

    SEMI            reduce using rule 38 (statement -> concrete_empty_statement .)
    END             reduce using rule 38 (statement -> concrete_empty_statement .)
    ELSE            reduce using rule 38 (statement -> concrete_empty_statement .)


state 36

    (40) assignment_statement -> variable . ASSIGN expression

    ASSIGN          shift and go to state 57


state 37

    (41) writeln_statement -> WRITELN . LPAREN writelist RPAREN

    LPAREN          shift and go to state 58


state 38

    (42) write_statement -> WRITE . LPAREN writelist RPAREN

    LPAREN          shift and go to state 59


state 39

    (47) readln_statement -> READLN . LPAREN variable RPAREN

    LPAREN          shift and go to state 60


state 40

    (48) for_statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 61


state 41

    (63) if_statement -> IF . expression THEN statement
    (64) if_statement -> IF . expression THEN statement ELSE statement
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 62
    variable                       shift and go to state 67

state 42

    (65) while_statement -> WHILE . expression DO statement
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 70
    variable                       shift and go to state 67

state 43

    (21) function -> FUNCTION ID LPAREN . param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (22) param_list -> . ID COLON type
    (23) param_list -> . param_list SEMI ID COLON type

    ID              shift and go to state 71

    param_list                     shift and go to state 72

state 44

    (6) var_declaration -> id_list COLON type . SEMI

    SEMI            shift and go to state 73


state 45

    (9) type -> simple_type .

    SEMI            reduce using rule 9 (type -> simple_type .)
    RPAREN          reduce using rule 9 (type -> simple_type .)


state 46

    (10) type -> array_type .

    SEMI            reduce using rule 10 (type -> array_type .)
    RPAREN          reduce using rule 10 (type -> array_type .)


state 47

    (11) simple_type -> INTEGER .

    SEMI            reduce using rule 11 (simple_type -> INTEGER .)
    RPAREN          reduce using rule 11 (simple_type -> INTEGER .)


state 48

    (12) simple_type -> BOOLEAN .

    SEMI            reduce using rule 12 (simple_type -> BOOLEAN .)
    RPAREN          reduce using rule 12 (simple_type -> BOOLEAN .)


state 49

    (13) simple_type -> STRING .

    SEMI            reduce using rule 13 (simple_type -> STRING .)
    RPAREN          reduce using rule 13 (simple_type -> STRING .)


state 50

    (14) simple_type -> REAL .

    SEMI            reduce using rule 14 (simple_type -> REAL .)
    RPAREN          reduce using rule 14 (simple_type -> REAL .)


state 51

    (15) array_type -> ARRAY . LBRACKET index_range RBRACKET OF type

    LBRACKET        shift and go to state 74


state 52

    (8) id_list -> ID COMMA id_list .

    COLON           reduce using rule 8 (id_list -> ID COMMA id_list .)


state 53

    (18) variable -> ID LBRACKET . expression RBRACKET
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 75
    variable                       shift and go to state 67

state 54

    (62) statement_compound -> BEGIN statements . END

    END             shift and go to state 76


state 55

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statements END . DOT

    DOT             shift and go to state 77


state 56

    (29) statement_sequence -> statement_sequence SEMI . statement
    (30) statement -> . assignment_statement
    (31) statement -> . writeln_statement
    (32) statement -> . write_statement
    (33) statement -> . readln_statement
    (34) statement -> . for_statement
    (35) statement -> . if_statement
    (36) statement -> . while_statement
    (37) statement -> . statement_compound
    (38) statement -> . concrete_empty_statement
    (40) assignment_statement -> . variable ASSIGN expression
    (41) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (42) write_statement -> . WRITE LPAREN writelist RPAREN
    (47) readln_statement -> . READLN LPAREN variable RPAREN
    (48) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (63) if_statement -> . IF expression THEN statement
    (64) if_statement -> . IF expression THEN statement ELSE statement
    (65) while_statement -> . WHILE expression DO statement
    (62) statement_compound -> . BEGIN statements END
    (39) concrete_empty_statement -> .
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 39 (concrete_empty_statement -> .)
    END             reduce using rule 39 (concrete_empty_statement -> .)
    ID              shift and go to state 22

    statement                      shift and go to state 78
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35
    variable                       shift and go to state 36

state 57

    (40) assignment_statement -> variable ASSIGN . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    variable                       shift and go to state 67
    expression                     shift and go to state 79

state 58

    (41) writeln_statement -> WRITELN LPAREN . writelist RPAREN
    (43) writelist -> . writelist COMMA writeitem
    (44) writelist -> . writeitem
    (45) writeitem -> . STRING_LITERAL
    (46) writeitem -> . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    STRING_LITERAL  shift and go to state 82
    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    writelist                      shift and go to state 80
    writeitem                      shift and go to state 81
    expression                     shift and go to state 83
    variable                       shift and go to state 67

state 59

    (42) write_statement -> WRITE LPAREN . writelist RPAREN
    (43) writelist -> . writelist COMMA writeitem
    (44) writelist -> . writeitem
    (45) writeitem -> . STRING_LITERAL
    (46) writeitem -> . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    STRING_LITERAL  shift and go to state 82
    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    writelist                      shift and go to state 84
    writeitem                      shift and go to state 81
    expression                     shift and go to state 83
    variable                       shift and go to state 67

state 60

    (47) readln_statement -> READLN LPAREN . variable RPAREN
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 22

    variable                       shift and go to state 85

state 61

    (48) for_statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 86


state 62

    (63) if_statement -> IF expression . THEN statement
    (64) if_statement -> IF expression . THEN statement ELSE statement
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101


state 63

    (26) expression -> ID . LPAREN argument_list RPAREN
    (17) variable -> ID .
    (18) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 102
    THEN            reduce using rule 17 (variable -> ID .)
    AND             reduce using rule 17 (variable -> ID .)
    OR              reduce using rule 17 (variable -> ID .)
    LT              reduce using rule 17 (variable -> ID .)
    LE              reduce using rule 17 (variable -> ID .)
    GT              reduce using rule 17 (variable -> ID .)
    GE              reduce using rule 17 (variable -> ID .)
    EQ              reduce using rule 17 (variable -> ID .)
    NEQ             reduce using rule 17 (variable -> ID .)
    DIV             reduce using rule 17 (variable -> ID .)
    MOD             reduce using rule 17 (variable -> ID .)
    PLUS            reduce using rule 17 (variable -> ID .)
    MINUS           reduce using rule 17 (variable -> ID .)
    TIMES           reduce using rule 17 (variable -> ID .)
    DIVIDE          reduce using rule 17 (variable -> ID .)
    DO              reduce using rule 17 (variable -> ID .)
    RBRACKET        reduce using rule 17 (variable -> ID .)
    SEMI            reduce using rule 17 (variable -> ID .)
    END             reduce using rule 17 (variable -> ID .)
    ELSE            reduce using rule 17 (variable -> ID .)
    RPAREN          reduce using rule 17 (variable -> ID .)
    COMMA           reduce using rule 17 (variable -> ID .)
    TO              reduce using rule 17 (variable -> ID .)
    LBRACKET        shift and go to state 53


state 64

    (59) expression -> LPAREN . expression RPAREN
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 103
    variable                       shift and go to state 67

state 65

    (49) expression -> TRUE .

    THEN            reduce using rule 49 (expression -> TRUE .)
    AND             reduce using rule 49 (expression -> TRUE .)
    OR              reduce using rule 49 (expression -> TRUE .)
    LT              reduce using rule 49 (expression -> TRUE .)
    LE              reduce using rule 49 (expression -> TRUE .)
    GT              reduce using rule 49 (expression -> TRUE .)
    GE              reduce using rule 49 (expression -> TRUE .)
    EQ              reduce using rule 49 (expression -> TRUE .)
    NEQ             reduce using rule 49 (expression -> TRUE .)
    DIV             reduce using rule 49 (expression -> TRUE .)
    MOD             reduce using rule 49 (expression -> TRUE .)
    PLUS            reduce using rule 49 (expression -> TRUE .)
    MINUS           reduce using rule 49 (expression -> TRUE .)
    TIMES           reduce using rule 49 (expression -> TRUE .)
    DIVIDE          reduce using rule 49 (expression -> TRUE .)
    DO              reduce using rule 49 (expression -> TRUE .)
    RBRACKET        reduce using rule 49 (expression -> TRUE .)
    SEMI            reduce using rule 49 (expression -> TRUE .)
    END             reduce using rule 49 (expression -> TRUE .)
    ELSE            reduce using rule 49 (expression -> TRUE .)
    RPAREN          reduce using rule 49 (expression -> TRUE .)
    COMMA           reduce using rule 49 (expression -> TRUE .)
    TO              reduce using rule 49 (expression -> TRUE .)


state 66

    (50) expression -> FALSE .

    THEN            reduce using rule 50 (expression -> FALSE .)
    AND             reduce using rule 50 (expression -> FALSE .)
    OR              reduce using rule 50 (expression -> FALSE .)
    LT              reduce using rule 50 (expression -> FALSE .)
    LE              reduce using rule 50 (expression -> FALSE .)
    GT              reduce using rule 50 (expression -> FALSE .)
    GE              reduce using rule 50 (expression -> FALSE .)
    EQ              reduce using rule 50 (expression -> FALSE .)
    NEQ             reduce using rule 50 (expression -> FALSE .)
    DIV             reduce using rule 50 (expression -> FALSE .)
    MOD             reduce using rule 50 (expression -> FALSE .)
    PLUS            reduce using rule 50 (expression -> FALSE .)
    MINUS           reduce using rule 50 (expression -> FALSE .)
    TIMES           reduce using rule 50 (expression -> FALSE .)
    DIVIDE          reduce using rule 50 (expression -> FALSE .)
    DO              reduce using rule 50 (expression -> FALSE .)
    RBRACKET        reduce using rule 50 (expression -> FALSE .)
    SEMI            reduce using rule 50 (expression -> FALSE .)
    END             reduce using rule 50 (expression -> FALSE .)
    ELSE            reduce using rule 50 (expression -> FALSE .)
    RPAREN          reduce using rule 50 (expression -> FALSE .)
    COMMA           reduce using rule 50 (expression -> FALSE .)
    TO              reduce using rule 50 (expression -> FALSE .)


state 67

    (70) expression -> variable .

    THEN            reduce using rule 70 (expression -> variable .)
    AND             reduce using rule 70 (expression -> variable .)
    OR              reduce using rule 70 (expression -> variable .)
    LT              reduce using rule 70 (expression -> variable .)
    LE              reduce using rule 70 (expression -> variable .)
    GT              reduce using rule 70 (expression -> variable .)
    GE              reduce using rule 70 (expression -> variable .)
    EQ              reduce using rule 70 (expression -> variable .)
    NEQ             reduce using rule 70 (expression -> variable .)
    DIV             reduce using rule 70 (expression -> variable .)
    MOD             reduce using rule 70 (expression -> variable .)
    PLUS            reduce using rule 70 (expression -> variable .)
    MINUS           reduce using rule 70 (expression -> variable .)
    TIMES           reduce using rule 70 (expression -> variable .)
    DIVIDE          reduce using rule 70 (expression -> variable .)
    DO              reduce using rule 70 (expression -> variable .)
    RBRACKET        reduce using rule 70 (expression -> variable .)
    SEMI            reduce using rule 70 (expression -> variable .)
    END             reduce using rule 70 (expression -> variable .)
    ELSE            reduce using rule 70 (expression -> variable .)
    RPAREN          reduce using rule 70 (expression -> variable .)
    COMMA           reduce using rule 70 (expression -> variable .)
    TO              reduce using rule 70 (expression -> variable .)


state 68

    (71) expression -> NUMBER .

    THEN            reduce using rule 71 (expression -> NUMBER .)
    AND             reduce using rule 71 (expression -> NUMBER .)
    OR              reduce using rule 71 (expression -> NUMBER .)
    LT              reduce using rule 71 (expression -> NUMBER .)
    LE              reduce using rule 71 (expression -> NUMBER .)
    GT              reduce using rule 71 (expression -> NUMBER .)
    GE              reduce using rule 71 (expression -> NUMBER .)
    EQ              reduce using rule 71 (expression -> NUMBER .)
    NEQ             reduce using rule 71 (expression -> NUMBER .)
    DIV             reduce using rule 71 (expression -> NUMBER .)
    MOD             reduce using rule 71 (expression -> NUMBER .)
    PLUS            reduce using rule 71 (expression -> NUMBER .)
    MINUS           reduce using rule 71 (expression -> NUMBER .)
    TIMES           reduce using rule 71 (expression -> NUMBER .)
    DIVIDE          reduce using rule 71 (expression -> NUMBER .)
    DO              reduce using rule 71 (expression -> NUMBER .)
    RBRACKET        reduce using rule 71 (expression -> NUMBER .)
    SEMI            reduce using rule 71 (expression -> NUMBER .)
    END             reduce using rule 71 (expression -> NUMBER .)
    ELSE            reduce using rule 71 (expression -> NUMBER .)
    RPAREN          reduce using rule 71 (expression -> NUMBER .)
    COMMA           reduce using rule 71 (expression -> NUMBER .)
    TO              reduce using rule 71 (expression -> NUMBER .)


state 69

    (72) expression -> REAL .

    THEN            reduce using rule 72 (expression -> REAL .)
    AND             reduce using rule 72 (expression -> REAL .)
    OR              reduce using rule 72 (expression -> REAL .)
    LT              reduce using rule 72 (expression -> REAL .)
    LE              reduce using rule 72 (expression -> REAL .)
    GT              reduce using rule 72 (expression -> REAL .)
    GE              reduce using rule 72 (expression -> REAL .)
    EQ              reduce using rule 72 (expression -> REAL .)
    NEQ             reduce using rule 72 (expression -> REAL .)
    DIV             reduce using rule 72 (expression -> REAL .)
    MOD             reduce using rule 72 (expression -> REAL .)
    PLUS            reduce using rule 72 (expression -> REAL .)
    MINUS           reduce using rule 72 (expression -> REAL .)
    TIMES           reduce using rule 72 (expression -> REAL .)
    DIVIDE          reduce using rule 72 (expression -> REAL .)
    DO              reduce using rule 72 (expression -> REAL .)
    RBRACKET        reduce using rule 72 (expression -> REAL .)
    SEMI            reduce using rule 72 (expression -> REAL .)
    END             reduce using rule 72 (expression -> REAL .)
    ELSE            reduce using rule 72 (expression -> REAL .)
    RPAREN          reduce using rule 72 (expression -> REAL .)
    COMMA           reduce using rule 72 (expression -> REAL .)
    TO              reduce using rule 72 (expression -> REAL .)


state 70

    (65) while_statement -> WHILE expression . DO statement
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    DO              shift and go to state 104
    AND             shift and go to state 88
    OR              shift and go to state 89
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101


state 71

    (22) param_list -> ID . COLON type

    COLON           shift and go to state 105


state 72

    (21) function -> FUNCTION ID LPAREN param_list . RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (23) param_list -> param_list . SEMI ID COLON type

    RPAREN          shift and go to state 106
    SEMI            shift and go to state 107


state 73

    (6) var_declaration -> id_list COLON type SEMI .

    ID              reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)
    FUNCTION        reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)
    BEGIN           reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)


state 74

    (15) array_type -> ARRAY LBRACKET . index_range RBRACKET OF type
    (16) index_range -> . NUMBER DOTDOT NUMBER

    NUMBER          shift and go to state 109

    index_range                    shift and go to state 108

state 75

    (18) variable -> ID LBRACKET expression . RBRACKET
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    RBRACKET        shift and go to state 110
    AND             shift and go to state 88
    OR              shift and go to state 89
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101


state 76

    (62) statement_compound -> BEGIN statements END .

    SEMI            reduce using rule 62 (statement_compound -> BEGIN statements END .)
    END             reduce using rule 62 (statement_compound -> BEGIN statements END .)
    ELSE            reduce using rule 62 (statement_compound -> BEGIN statements END .)


state 77

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statements END DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMI declarations functions BEGIN statements END DOT .)


state 78

    (29) statement_sequence -> statement_sequence SEMI statement .

    SEMI            reduce using rule 29 (statement_sequence -> statement_sequence SEMI statement .)
    END             reduce using rule 29 (statement_sequence -> statement_sequence SEMI statement .)


state 79

    (40) assignment_statement -> variable ASSIGN expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    SEMI            reduce using rule 40 (assignment_statement -> variable ASSIGN expression .)
    END             reduce using rule 40 (assignment_statement -> variable ASSIGN expression .)
    ELSE            reduce using rule 40 (assignment_statement -> variable ASSIGN expression .)
    AND             shift and go to state 88
    OR              shift and go to state 89
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101


state 80

    (41) writeln_statement -> WRITELN LPAREN writelist . RPAREN
    (43) writelist -> writelist . COMMA writeitem

    RPAREN          shift and go to state 111
    COMMA           shift and go to state 112


state 81

    (44) writelist -> writeitem .

    RPAREN          reduce using rule 44 (writelist -> writeitem .)
    COMMA           reduce using rule 44 (writelist -> writeitem .)


state 82

    (45) writeitem -> STRING_LITERAL .

    RPAREN          reduce using rule 45 (writeitem -> STRING_LITERAL .)
    COMMA           reduce using rule 45 (writeitem -> STRING_LITERAL .)


state 83

    (46) writeitem -> expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 46 (writeitem -> expression .)
    COMMA           reduce using rule 46 (writeitem -> expression .)
    AND             shift and go to state 88
    OR              shift and go to state 89
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101


state 84

    (42) write_statement -> WRITE LPAREN writelist . RPAREN
    (43) writelist -> writelist . COMMA writeitem

    RPAREN          shift and go to state 113
    COMMA           shift and go to state 112


state 85

    (47) readln_statement -> READLN LPAREN variable . RPAREN

    RPAREN          shift and go to state 114


state 86

    (48) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 115
    variable                       shift and go to state 67

state 87

    (63) if_statement -> IF expression THEN . statement
    (64) if_statement -> IF expression THEN . statement ELSE statement
    (30) statement -> . assignment_statement
    (31) statement -> . writeln_statement
    (32) statement -> . write_statement
    (33) statement -> . readln_statement
    (34) statement -> . for_statement
    (35) statement -> . if_statement
    (36) statement -> . while_statement
    (37) statement -> . statement_compound
    (38) statement -> . concrete_empty_statement
    (40) assignment_statement -> . variable ASSIGN expression
    (41) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (42) write_statement -> . WRITE LPAREN writelist RPAREN
    (47) readln_statement -> . READLN LPAREN variable RPAREN
    (48) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (63) if_statement -> . IF expression THEN statement
    (64) if_statement -> . IF expression THEN statement ELSE statement
    (65) while_statement -> . WHILE expression DO statement
    (62) statement_compound -> . BEGIN statements END
    (39) concrete_empty_statement -> .
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 39 (concrete_empty_statement -> .)
    SEMI            reduce using rule 39 (concrete_empty_statement -> .)
    END             reduce using rule 39 (concrete_empty_statement -> .)
    ID              shift and go to state 22

    statement                      shift and go to state 116
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35
    variable                       shift and go to state 36

state 88

    (51) expression -> expression AND . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 117
    variable                       shift and go to state 67

state 89

    (52) expression -> expression OR . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 118
    variable                       shift and go to state 67

state 90

    (53) expression -> expression LT . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 119
    variable                       shift and go to state 67

state 91

    (54) expression -> expression LE . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 120
    variable                       shift and go to state 67

state 92

    (55) expression -> expression GT . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 121
    variable                       shift and go to state 67

state 93

    (56) expression -> expression GE . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 122
    variable                       shift and go to state 67

state 94

    (57) expression -> expression EQ . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 123
    variable                       shift and go to state 67

state 95

    (58) expression -> expression NEQ . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 124
    variable                       shift and go to state 67

state 96

    (60) expression -> expression DIV . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 125
    variable                       shift and go to state 67

state 97

    (61) expression -> expression MOD . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 126
    variable                       shift and go to state 67

state 98

    (66) expression -> expression PLUS . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 127
    variable                       shift and go to state 67

state 99

    (67) expression -> expression MINUS . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 128
    variable                       shift and go to state 67

state 100

    (68) expression -> expression TIMES . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 129
    variable                       shift and go to state 67

state 101

    (69) expression -> expression DIVIDE . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 130
    variable                       shift and go to state 67

state 102

    (26) expression -> ID LPAREN . argument_list RPAREN
    (24) argument_list -> . expression
    (25) argument_list -> . argument_list COMMA expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    argument_list                  shift and go to state 131
    expression                     shift and go to state 132
    variable                       shift and go to state 67

state 103

    (59) expression -> LPAREN expression . RPAREN
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 133
    AND             shift and go to state 88
    OR              shift and go to state 89
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101


state 104

    (65) while_statement -> WHILE expression DO . statement
    (30) statement -> . assignment_statement
    (31) statement -> . writeln_statement
    (32) statement -> . write_statement
    (33) statement -> . readln_statement
    (34) statement -> . for_statement
    (35) statement -> . if_statement
    (36) statement -> . while_statement
    (37) statement -> . statement_compound
    (38) statement -> . concrete_empty_statement
    (40) assignment_statement -> . variable ASSIGN expression
    (41) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (42) write_statement -> . WRITE LPAREN writelist RPAREN
    (47) readln_statement -> . READLN LPAREN variable RPAREN
    (48) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (63) if_statement -> . IF expression THEN statement
    (64) if_statement -> . IF expression THEN statement ELSE statement
    (65) while_statement -> . WHILE expression DO statement
    (62) statement_compound -> . BEGIN statements END
    (39) concrete_empty_statement -> .
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 39 (concrete_empty_statement -> .)
    SEMI            reduce using rule 39 (concrete_empty_statement -> .)
    END             reduce using rule 39 (concrete_empty_statement -> .)
    ID              shift and go to state 22

    statement                      shift and go to state 134
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35
    variable                       shift and go to state 36

state 105

    (22) param_list -> ID COLON . type
    (9) type -> . simple_type
    (10) type -> . array_type
    (11) simple_type -> . INTEGER
    (12) simple_type -> . BOOLEAN
    (13) simple_type -> . STRING
    (14) simple_type -> . REAL
    (15) array_type -> . ARRAY LBRACKET index_range RBRACKET OF type

    INTEGER         shift and go to state 47
    BOOLEAN         shift and go to state 48
    STRING          shift and go to state 49
    REAL            shift and go to state 50
    ARRAY           shift and go to state 51

    type                           shift and go to state 135
    simple_type                    shift and go to state 45
    array_type                     shift and go to state 46

state 106

    (21) function -> FUNCTION ID LPAREN param_list RPAREN . COLON type SEMI declarations BEGIN statements END SEMI

    COLON           shift and go to state 136


state 107

    (23) param_list -> param_list SEMI . ID COLON type

    ID              shift and go to state 137


state 108

    (15) array_type -> ARRAY LBRACKET index_range . RBRACKET OF type

    RBRACKET        shift and go to state 138


state 109

    (16) index_range -> NUMBER . DOTDOT NUMBER

    DOTDOT          shift and go to state 139


state 110

    (18) variable -> ID LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    THEN            reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    DO              reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    END             reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)
    TO              reduce using rule 18 (variable -> ID LBRACKET expression RBRACKET .)


state 111

    (41) writeln_statement -> WRITELN LPAREN writelist RPAREN .

    SEMI            reduce using rule 41 (writeln_statement -> WRITELN LPAREN writelist RPAREN .)
    END             reduce using rule 41 (writeln_statement -> WRITELN LPAREN writelist RPAREN .)
    ELSE            reduce using rule 41 (writeln_statement -> WRITELN LPAREN writelist RPAREN .)


state 112

    (43) writelist -> writelist COMMA . writeitem
    (45) writeitem -> . STRING_LITERAL
    (46) writeitem -> . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    STRING_LITERAL  shift and go to state 82
    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    writeitem                      shift and go to state 140
    expression                     shift and go to state 83
    variable                       shift and go to state 67

state 113

    (42) write_statement -> WRITE LPAREN writelist RPAREN .

    SEMI            reduce using rule 42 (write_statement -> WRITE LPAREN writelist RPAREN .)
    END             reduce using rule 42 (write_statement -> WRITE LPAREN writelist RPAREN .)
    ELSE            reduce using rule 42 (write_statement -> WRITE LPAREN writelist RPAREN .)


state 114

    (47) readln_statement -> READLN LPAREN variable RPAREN .

    SEMI            reduce using rule 47 (readln_statement -> READLN LPAREN variable RPAREN .)
    END             reduce using rule 47 (readln_statement -> READLN LPAREN variable RPAREN .)
    ELSE            reduce using rule 47 (readln_statement -> READLN LPAREN variable RPAREN .)


state 115

    (48) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    TO              shift and go to state 141
    AND             shift and go to state 88
    OR              shift and go to state 89
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101


state 116

    (63) if_statement -> IF expression THEN statement .
    (64) if_statement -> IF expression THEN statement . ELSE statement

    SEMI            reduce using rule 63 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 63 (if_statement -> IF expression THEN statement .)
    ELSE            shift and go to state 142

  ! ELSE            [ reduce using rule 63 (if_statement -> IF expression THEN statement .) ]


state 117

    (51) expression -> expression AND expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 51 (expression -> expression AND expression .)
    AND             reduce using rule 51 (expression -> expression AND expression .)
    OR              reduce using rule 51 (expression -> expression AND expression .)
    DO              reduce using rule 51 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 51 (expression -> expression AND expression .)
    SEMI            reduce using rule 51 (expression -> expression AND expression .)
    END             reduce using rule 51 (expression -> expression AND expression .)
    ELSE            reduce using rule 51 (expression -> expression AND expression .)
    RPAREN          reduce using rule 51 (expression -> expression AND expression .)
    COMMA           reduce using rule 51 (expression -> expression AND expression .)
    TO              reduce using rule 51 (expression -> expression AND expression .)
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

  ! LT              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]


state 118

    (52) expression -> expression OR expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 52 (expression -> expression OR expression .)
    OR              reduce using rule 52 (expression -> expression OR expression .)
    DO              reduce using rule 52 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 52 (expression -> expression OR expression .)
    SEMI            reduce using rule 52 (expression -> expression OR expression .)
    END             reduce using rule 52 (expression -> expression OR expression .)
    ELSE            reduce using rule 52 (expression -> expression OR expression .)
    RPAREN          reduce using rule 52 (expression -> expression OR expression .)
    COMMA           reduce using rule 52 (expression -> expression OR expression .)
    TO              reduce using rule 52 (expression -> expression OR expression .)
    AND             shift and go to state 88
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

  ! AND             [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 89 ]


state 119

    (53) expression -> expression LT expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 53 (expression -> expression LT expression .)
    AND             reduce using rule 53 (expression -> expression LT expression .)
    OR              reduce using rule 53 (expression -> expression LT expression .)
    LT              reduce using rule 53 (expression -> expression LT expression .)
    LE              reduce using rule 53 (expression -> expression LT expression .)
    GT              reduce using rule 53 (expression -> expression LT expression .)
    GE              reduce using rule 53 (expression -> expression LT expression .)
    EQ              reduce using rule 53 (expression -> expression LT expression .)
    NEQ             reduce using rule 53 (expression -> expression LT expression .)
    DO              reduce using rule 53 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 53 (expression -> expression LT expression .)
    SEMI            reduce using rule 53 (expression -> expression LT expression .)
    END             reduce using rule 53 (expression -> expression LT expression .)
    ELSE            reduce using rule 53 (expression -> expression LT expression .)
    RPAREN          reduce using rule 53 (expression -> expression LT expression .)
    COMMA           reduce using rule 53 (expression -> expression LT expression .)
    TO              reduce using rule 53 (expression -> expression LT expression .)
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

  ! DIV             [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]


state 120

    (54) expression -> expression LE expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 54 (expression -> expression LE expression .)
    AND             reduce using rule 54 (expression -> expression LE expression .)
    OR              reduce using rule 54 (expression -> expression LE expression .)
    LT              reduce using rule 54 (expression -> expression LE expression .)
    LE              reduce using rule 54 (expression -> expression LE expression .)
    GT              reduce using rule 54 (expression -> expression LE expression .)
    GE              reduce using rule 54 (expression -> expression LE expression .)
    EQ              reduce using rule 54 (expression -> expression LE expression .)
    NEQ             reduce using rule 54 (expression -> expression LE expression .)
    DO              reduce using rule 54 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 54 (expression -> expression LE expression .)
    SEMI            reduce using rule 54 (expression -> expression LE expression .)
    END             reduce using rule 54 (expression -> expression LE expression .)
    ELSE            reduce using rule 54 (expression -> expression LE expression .)
    RPAREN          reduce using rule 54 (expression -> expression LE expression .)
    COMMA           reduce using rule 54 (expression -> expression LE expression .)
    TO              reduce using rule 54 (expression -> expression LE expression .)
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

  ! DIV             [ reduce using rule 54 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 54 (expression -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 54 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression LE expression .) ]
  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]


state 121

    (55) expression -> expression GT expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 55 (expression -> expression GT expression .)
    AND             reduce using rule 55 (expression -> expression GT expression .)
    OR              reduce using rule 55 (expression -> expression GT expression .)
    LT              reduce using rule 55 (expression -> expression GT expression .)
    LE              reduce using rule 55 (expression -> expression GT expression .)
    GT              reduce using rule 55 (expression -> expression GT expression .)
    GE              reduce using rule 55 (expression -> expression GT expression .)
    EQ              reduce using rule 55 (expression -> expression GT expression .)
    NEQ             reduce using rule 55 (expression -> expression GT expression .)
    DO              reduce using rule 55 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 55 (expression -> expression GT expression .)
    SEMI            reduce using rule 55 (expression -> expression GT expression .)
    END             reduce using rule 55 (expression -> expression GT expression .)
    ELSE            reduce using rule 55 (expression -> expression GT expression .)
    RPAREN          reduce using rule 55 (expression -> expression GT expression .)
    COMMA           reduce using rule 55 (expression -> expression GT expression .)
    TO              reduce using rule 55 (expression -> expression GT expression .)
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

  ! DIV             [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression GT expression .) ]
  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]


state 122

    (56) expression -> expression GE expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 56 (expression -> expression GE expression .)
    AND             reduce using rule 56 (expression -> expression GE expression .)
    OR              reduce using rule 56 (expression -> expression GE expression .)
    LT              reduce using rule 56 (expression -> expression GE expression .)
    LE              reduce using rule 56 (expression -> expression GE expression .)
    GT              reduce using rule 56 (expression -> expression GE expression .)
    GE              reduce using rule 56 (expression -> expression GE expression .)
    EQ              reduce using rule 56 (expression -> expression GE expression .)
    NEQ             reduce using rule 56 (expression -> expression GE expression .)
    DO              reduce using rule 56 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 56 (expression -> expression GE expression .)
    SEMI            reduce using rule 56 (expression -> expression GE expression .)
    END             reduce using rule 56 (expression -> expression GE expression .)
    ELSE            reduce using rule 56 (expression -> expression GE expression .)
    RPAREN          reduce using rule 56 (expression -> expression GE expression .)
    COMMA           reduce using rule 56 (expression -> expression GE expression .)
    TO              reduce using rule 56 (expression -> expression GE expression .)
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

  ! DIV             [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]


state 123

    (57) expression -> expression EQ expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 57 (expression -> expression EQ expression .)
    AND             reduce using rule 57 (expression -> expression EQ expression .)
    OR              reduce using rule 57 (expression -> expression EQ expression .)
    LT              reduce using rule 57 (expression -> expression EQ expression .)
    LE              reduce using rule 57 (expression -> expression EQ expression .)
    GT              reduce using rule 57 (expression -> expression EQ expression .)
    GE              reduce using rule 57 (expression -> expression EQ expression .)
    EQ              reduce using rule 57 (expression -> expression EQ expression .)
    NEQ             reduce using rule 57 (expression -> expression EQ expression .)
    DO              reduce using rule 57 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 57 (expression -> expression EQ expression .)
    SEMI            reduce using rule 57 (expression -> expression EQ expression .)
    END             reduce using rule 57 (expression -> expression EQ expression .)
    ELSE            reduce using rule 57 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 57 (expression -> expression EQ expression .)
    COMMA           reduce using rule 57 (expression -> expression EQ expression .)
    TO              reduce using rule 57 (expression -> expression EQ expression .)
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

  ! DIV             [ reduce using rule 57 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 57 (expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 57 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression EQ expression .) ]
  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]


state 124

    (58) expression -> expression NEQ expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 58 (expression -> expression NEQ expression .)
    AND             reduce using rule 58 (expression -> expression NEQ expression .)
    OR              reduce using rule 58 (expression -> expression NEQ expression .)
    LT              reduce using rule 58 (expression -> expression NEQ expression .)
    LE              reduce using rule 58 (expression -> expression NEQ expression .)
    GT              reduce using rule 58 (expression -> expression NEQ expression .)
    GE              reduce using rule 58 (expression -> expression NEQ expression .)
    EQ              reduce using rule 58 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 58 (expression -> expression NEQ expression .)
    DO              reduce using rule 58 (expression -> expression NEQ expression .)
    RBRACKET        reduce using rule 58 (expression -> expression NEQ expression .)
    SEMI            reduce using rule 58 (expression -> expression NEQ expression .)
    END             reduce using rule 58 (expression -> expression NEQ expression .)
    ELSE            reduce using rule 58 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 58 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 58 (expression -> expression NEQ expression .)
    TO              reduce using rule 58 (expression -> expression NEQ expression .)
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

  ! DIV             [ reduce using rule 58 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 58 (expression -> expression NEQ expression .) ]
  ! PLUS            [ reduce using rule 58 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression NEQ expression .) ]
  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]


state 125

    (60) expression -> expression DIV expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 60 (expression -> expression DIV expression .)
    AND             reduce using rule 60 (expression -> expression DIV expression .)
    OR              reduce using rule 60 (expression -> expression DIV expression .)
    LT              reduce using rule 60 (expression -> expression DIV expression .)
    LE              reduce using rule 60 (expression -> expression DIV expression .)
    GT              reduce using rule 60 (expression -> expression DIV expression .)
    GE              reduce using rule 60 (expression -> expression DIV expression .)
    EQ              reduce using rule 60 (expression -> expression DIV expression .)
    NEQ             reduce using rule 60 (expression -> expression DIV expression .)
    DIV             reduce using rule 60 (expression -> expression DIV expression .)
    MOD             reduce using rule 60 (expression -> expression DIV expression .)
    PLUS            reduce using rule 60 (expression -> expression DIV expression .)
    MINUS           reduce using rule 60 (expression -> expression DIV expression .)
    TIMES           reduce using rule 60 (expression -> expression DIV expression .)
    DIVIDE          reduce using rule 60 (expression -> expression DIV expression .)
    DO              reduce using rule 60 (expression -> expression DIV expression .)
    RBRACKET        reduce using rule 60 (expression -> expression DIV expression .)
    SEMI            reduce using rule 60 (expression -> expression DIV expression .)
    END             reduce using rule 60 (expression -> expression DIV expression .)
    ELSE            reduce using rule 60 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 60 (expression -> expression DIV expression .)
    COMMA           reduce using rule 60 (expression -> expression DIV expression .)
    TO              reduce using rule 60 (expression -> expression DIV expression .)

  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]
  ! DIV             [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 97 ]
  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]


state 126

    (61) expression -> expression MOD expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 61 (expression -> expression MOD expression .)
    AND             reduce using rule 61 (expression -> expression MOD expression .)
    OR              reduce using rule 61 (expression -> expression MOD expression .)
    LT              reduce using rule 61 (expression -> expression MOD expression .)
    LE              reduce using rule 61 (expression -> expression MOD expression .)
    GT              reduce using rule 61 (expression -> expression MOD expression .)
    GE              reduce using rule 61 (expression -> expression MOD expression .)
    EQ              reduce using rule 61 (expression -> expression MOD expression .)
    NEQ             reduce using rule 61 (expression -> expression MOD expression .)
    DIV             reduce using rule 61 (expression -> expression MOD expression .)
    MOD             reduce using rule 61 (expression -> expression MOD expression .)
    PLUS            reduce using rule 61 (expression -> expression MOD expression .)
    MINUS           reduce using rule 61 (expression -> expression MOD expression .)
    TIMES           reduce using rule 61 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 61 (expression -> expression MOD expression .)
    DO              reduce using rule 61 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 61 (expression -> expression MOD expression .)
    SEMI            reduce using rule 61 (expression -> expression MOD expression .)
    END             reduce using rule 61 (expression -> expression MOD expression .)
    ELSE            reduce using rule 61 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 61 (expression -> expression MOD expression .)
    COMMA           reduce using rule 61 (expression -> expression MOD expression .)
    TO              reduce using rule 61 (expression -> expression MOD expression .)

  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]
  ! DIV             [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 97 ]
  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]


state 127

    (66) expression -> expression PLUS expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 66 (expression -> expression PLUS expression .)
    AND             reduce using rule 66 (expression -> expression PLUS expression .)
    OR              reduce using rule 66 (expression -> expression PLUS expression .)
    LT              reduce using rule 66 (expression -> expression PLUS expression .)
    LE              reduce using rule 66 (expression -> expression PLUS expression .)
    GT              reduce using rule 66 (expression -> expression PLUS expression .)
    GE              reduce using rule 66 (expression -> expression PLUS expression .)
    EQ              reduce using rule 66 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 66 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 66 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 66 (expression -> expression PLUS expression .)
    DO              reduce using rule 66 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 66 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 66 (expression -> expression PLUS expression .)
    END             reduce using rule 66 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 66 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 66 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 66 (expression -> expression PLUS expression .)
    TO              reduce using rule 66 (expression -> expression PLUS expression .)
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

  ! DIV             [ reduce using rule 66 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 66 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 66 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression PLUS expression .) ]
  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]
  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]


state 128

    (67) expression -> expression MINUS expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 67 (expression -> expression MINUS expression .)
    AND             reduce using rule 67 (expression -> expression MINUS expression .)
    OR              reduce using rule 67 (expression -> expression MINUS expression .)
    LT              reduce using rule 67 (expression -> expression MINUS expression .)
    LE              reduce using rule 67 (expression -> expression MINUS expression .)
    GT              reduce using rule 67 (expression -> expression MINUS expression .)
    GE              reduce using rule 67 (expression -> expression MINUS expression .)
    EQ              reduce using rule 67 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 67 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 67 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 67 (expression -> expression MINUS expression .)
    DO              reduce using rule 67 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 67 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 67 (expression -> expression MINUS expression .)
    END             reduce using rule 67 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 67 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 67 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 67 (expression -> expression MINUS expression .)
    TO              reduce using rule 67 (expression -> expression MINUS expression .)
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

  ! DIV             [ reduce using rule 67 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 67 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression MINUS expression .) ]
  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]
  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]


state 129

    (68) expression -> expression TIMES expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 68 (expression -> expression TIMES expression .)
    AND             reduce using rule 68 (expression -> expression TIMES expression .)
    OR              reduce using rule 68 (expression -> expression TIMES expression .)
    LT              reduce using rule 68 (expression -> expression TIMES expression .)
    LE              reduce using rule 68 (expression -> expression TIMES expression .)
    GT              reduce using rule 68 (expression -> expression TIMES expression .)
    GE              reduce using rule 68 (expression -> expression TIMES expression .)
    EQ              reduce using rule 68 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 68 (expression -> expression TIMES expression .)
    DIV             reduce using rule 68 (expression -> expression TIMES expression .)
    MOD             reduce using rule 68 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 68 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 68 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 68 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 68 (expression -> expression TIMES expression .)
    DO              reduce using rule 68 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 68 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 68 (expression -> expression TIMES expression .)
    END             reduce using rule 68 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 68 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 68 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 68 (expression -> expression TIMES expression .)
    TO              reduce using rule 68 (expression -> expression TIMES expression .)

  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]
  ! DIV             [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 97 ]
  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]


state 130

    (69) expression -> expression DIVIDE expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    THEN            reduce using rule 69 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 69 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 69 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 69 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 69 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 69 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 69 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 69 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 69 (expression -> expression DIVIDE expression .)
    DIV             reduce using rule 69 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 69 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 69 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 69 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 69 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 69 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 69 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 69 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 69 (expression -> expression DIVIDE expression .)
    END             reduce using rule 69 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 69 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 69 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 69 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 69 (expression -> expression DIVIDE expression .)

  ! AND             [ shift and go to state 88 ]
  ! OR              [ shift and go to state 89 ]
  ! LT              [ shift and go to state 90 ]
  ! LE              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 93 ]
  ! EQ              [ shift and go to state 94 ]
  ! NEQ             [ shift and go to state 95 ]
  ! DIV             [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 97 ]
  ! PLUS            [ shift and go to state 98 ]
  ! MINUS           [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]


state 131

    (26) expression -> ID LPAREN argument_list . RPAREN
    (25) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 143
    COMMA           shift and go to state 144


state 132

    (24) argument_list -> expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 24 (argument_list -> expression .)
    COMMA           reduce using rule 24 (argument_list -> expression .)
    AND             shift and go to state 88
    OR              shift and go to state 89
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101


state 133

    (59) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 59 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 59 (expression -> LPAREN expression RPAREN .)


state 134

    (65) while_statement -> WHILE expression DO statement .

    SEMI            reduce using rule 65 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 65 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 65 (while_statement -> WHILE expression DO statement .)


state 135

    (22) param_list -> ID COLON type .

    RPAREN          reduce using rule 22 (param_list -> ID COLON type .)
    SEMI            reduce using rule 22 (param_list -> ID COLON type .)


state 136

    (21) function -> FUNCTION ID LPAREN param_list RPAREN COLON . type SEMI declarations BEGIN statements END SEMI
    (9) type -> . simple_type
    (10) type -> . array_type
    (11) simple_type -> . INTEGER
    (12) simple_type -> . BOOLEAN
    (13) simple_type -> . STRING
    (14) simple_type -> . REAL
    (15) array_type -> . ARRAY LBRACKET index_range RBRACKET OF type

    INTEGER         shift and go to state 47
    BOOLEAN         shift and go to state 48
    STRING          shift and go to state 49
    REAL            shift and go to state 50
    ARRAY           shift and go to state 51

    type                           shift and go to state 145
    simple_type                    shift and go to state 45
    array_type                     shift and go to state 46

state 137

    (23) param_list -> param_list SEMI ID . COLON type

    COLON           shift and go to state 146


state 138

    (15) array_type -> ARRAY LBRACKET index_range RBRACKET . OF type

    OF              shift and go to state 147


state 139

    (16) index_range -> NUMBER DOTDOT . NUMBER

    NUMBER          shift and go to state 148


state 140

    (43) writelist -> writelist COMMA writeitem .

    RPAREN          reduce using rule 43 (writelist -> writelist COMMA writeitem .)
    COMMA           reduce using rule 43 (writelist -> writelist COMMA writeitem .)


state 141

    (48) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 149
    variable                       shift and go to state 67

state 142

    (64) if_statement -> IF expression THEN statement ELSE . statement
    (30) statement -> . assignment_statement
    (31) statement -> . writeln_statement
    (32) statement -> . write_statement
    (33) statement -> . readln_statement
    (34) statement -> . for_statement
    (35) statement -> . if_statement
    (36) statement -> . while_statement
    (37) statement -> . statement_compound
    (38) statement -> . concrete_empty_statement
    (40) assignment_statement -> . variable ASSIGN expression
    (41) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (42) write_statement -> . WRITE LPAREN writelist RPAREN
    (47) readln_statement -> . READLN LPAREN variable RPAREN
    (48) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (63) if_statement -> . IF expression THEN statement
    (64) if_statement -> . IF expression THEN statement ELSE statement
    (65) while_statement -> . WHILE expression DO statement
    (62) statement_compound -> . BEGIN statements END
    (39) concrete_empty_statement -> .
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 39 (concrete_empty_statement -> .)
    SEMI            reduce using rule 39 (concrete_empty_statement -> .)
    END             reduce using rule 39 (concrete_empty_statement -> .)
    ID              shift and go to state 22

    statement                      shift and go to state 150
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35
    variable                       shift and go to state 36

state 143

    (26) expression -> ID LPAREN argument_list RPAREN .

    THEN            reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    AND             reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    OR              reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    LT              reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    LE              reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    GT              reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    GE              reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    EQ              reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    NEQ             reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    DIV             reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    MOD             reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    DO              reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    RBRACKET        reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    SEMI            reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    END             reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    ELSE            reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)
    TO              reduce using rule 26 (expression -> ID LPAREN argument_list RPAREN .)


state 144

    (25) argument_list -> argument_list COMMA . expression
    (26) expression -> . ID LPAREN argument_list RPAREN
    (49) expression -> . TRUE
    (50) expression -> . FALSE
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression GT expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression EQ expression
    (58) expression -> . expression NEQ expression
    (59) expression -> . LPAREN expression RPAREN
    (60) expression -> . expression DIV expression
    (61) expression -> . expression MOD expression
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . variable
    (71) expression -> . NUMBER
    (72) expression -> . REAL
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 63
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 68
    REAL            shift and go to state 69

    expression                     shift and go to state 151
    variable                       shift and go to state 67

state 145

    (21) function -> FUNCTION ID LPAREN param_list RPAREN COLON type . SEMI declarations BEGIN statements END SEMI

    SEMI            shift and go to state 152


state 146

    (23) param_list -> param_list SEMI ID COLON . type
    (9) type -> . simple_type
    (10) type -> . array_type
    (11) simple_type -> . INTEGER
    (12) simple_type -> . BOOLEAN
    (13) simple_type -> . STRING
    (14) simple_type -> . REAL
    (15) array_type -> . ARRAY LBRACKET index_range RBRACKET OF type

    INTEGER         shift and go to state 47
    BOOLEAN         shift and go to state 48
    STRING          shift and go to state 49
    REAL            shift and go to state 50
    ARRAY           shift and go to state 51

    type                           shift and go to state 153
    simple_type                    shift and go to state 45
    array_type                     shift and go to state 46

state 147

    (15) array_type -> ARRAY LBRACKET index_range RBRACKET OF . type
    (9) type -> . simple_type
    (10) type -> . array_type
    (11) simple_type -> . INTEGER
    (12) simple_type -> . BOOLEAN
    (13) simple_type -> . STRING
    (14) simple_type -> . REAL
    (15) array_type -> . ARRAY LBRACKET index_range RBRACKET OF type

    INTEGER         shift and go to state 47
    BOOLEAN         shift and go to state 48
    STRING          shift and go to state 49
    REAL            shift and go to state 50
    ARRAY           shift and go to state 51

    type                           shift and go to state 154
    simple_type                    shift and go to state 45
    array_type                     shift and go to state 46

state 148

    (16) index_range -> NUMBER DOTDOT NUMBER .

    RBRACKET        reduce using rule 16 (index_range -> NUMBER DOTDOT NUMBER .)


state 149

    (48) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    DO              shift and go to state 155
    AND             shift and go to state 88
    OR              shift and go to state 89
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101


state 150

    (64) if_statement -> IF expression THEN statement ELSE statement .

    SEMI            reduce using rule 64 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 64 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 64 (if_statement -> IF expression THEN statement ELSE statement .)


state 151

    (25) argument_list -> argument_list COMMA expression .
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . GT expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . EQ expression
    (58) expression -> expression . NEQ expression
    (60) expression -> expression . DIV expression
    (61) expression -> expression . MOD expression
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 25 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 25 (argument_list -> argument_list COMMA expression .)
    AND             shift and go to state 88
    OR              shift and go to state 89
    LT              shift and go to state 90
    LE              shift and go to state 91
    GT              shift and go to state 92
    GE              shift and go to state 93
    EQ              shift and go to state 94
    NEQ             shift and go to state 95
    DIV             shift and go to state 96
    MOD             shift and go to state 97
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101


state 152

    (21) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI . declarations BEGIN statements END SEMI
    (2) declarations -> . VAR var_declaration_list
    (3) declarations -> . empty
    (73) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 73 (empty -> .)

    declarations                   shift and go to state 156
    empty                          shift and go to state 7

state 153

    (23) param_list -> param_list SEMI ID COLON type .

    RPAREN          reduce using rule 23 (param_list -> param_list SEMI ID COLON type .)
    SEMI            reduce using rule 23 (param_list -> param_list SEMI ID COLON type .)


state 154

    (15) array_type -> ARRAY LBRACKET index_range RBRACKET OF type .

    SEMI            reduce using rule 15 (array_type -> ARRAY LBRACKET index_range RBRACKET OF type .)
    RPAREN          reduce using rule 15 (array_type -> ARRAY LBRACKET index_range RBRACKET OF type .)


state 155

    (48) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (30) statement -> . assignment_statement
    (31) statement -> . writeln_statement
    (32) statement -> . write_statement
    (33) statement -> . readln_statement
    (34) statement -> . for_statement
    (35) statement -> . if_statement
    (36) statement -> . while_statement
    (37) statement -> . statement_compound
    (38) statement -> . concrete_empty_statement
    (40) assignment_statement -> . variable ASSIGN expression
    (41) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (42) write_statement -> . WRITE LPAREN writelist RPAREN
    (47) readln_statement -> . READLN LPAREN variable RPAREN
    (48) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (63) if_statement -> . IF expression THEN statement
    (64) if_statement -> . IF expression THEN statement ELSE statement
    (65) while_statement -> . WHILE expression DO statement
    (62) statement_compound -> . BEGIN statements END
    (39) concrete_empty_statement -> .
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 39 (concrete_empty_statement -> .)
    SEMI            reduce using rule 39 (concrete_empty_statement -> .)
    END             reduce using rule 39 (concrete_empty_statement -> .)
    ID              shift and go to state 22

    statement                      shift and go to state 157
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35
    variable                       shift and go to state 36

state 156

    (21) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations . BEGIN statements END SEMI

    BEGIN           shift and go to state 158


state 157

    (48) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    SEMI            reduce using rule 48 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    END             reduce using rule 48 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 48 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 158

    (21) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN . statements END SEMI
    (27) statements -> . statement_sequence
    (28) statement_sequence -> . statement
    (29) statement_sequence -> . statement_sequence SEMI statement
    (30) statement -> . assignment_statement
    (31) statement -> . writeln_statement
    (32) statement -> . write_statement
    (33) statement -> . readln_statement
    (34) statement -> . for_statement
    (35) statement -> . if_statement
    (36) statement -> . while_statement
    (37) statement -> . statement_compound
    (38) statement -> . concrete_empty_statement
    (40) assignment_statement -> . variable ASSIGN expression
    (41) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (42) write_statement -> . WRITE LPAREN writelist RPAREN
    (47) readln_statement -> . READLN LPAREN variable RPAREN
    (48) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (63) if_statement -> . IF expression THEN statement
    (64) if_statement -> . IF expression THEN statement ELSE statement
    (65) while_statement -> . WHILE expression DO statement
    (62) statement_compound -> . BEGIN statements END
    (39) concrete_empty_statement -> .
    (17) variable -> . ID
    (18) variable -> . ID LBRACKET expression RBRACKET

    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 39 (concrete_empty_statement -> .)
    END             reduce using rule 39 (concrete_empty_statement -> .)
    ID              shift and go to state 22

    statements                     shift and go to state 159
    statement_sequence             shift and go to state 25
    statement                      shift and go to state 26
    assignment_statement           shift and go to state 27
    writeln_statement              shift and go to state 28
    write_statement                shift and go to state 29
    readln_statement               shift and go to state 30
    for_statement                  shift and go to state 31
    if_statement                   shift and go to state 32
    while_statement                shift and go to state 33
    statement_compound             shift and go to state 34
    concrete_empty_statement       shift and go to state 35
    variable                       shift and go to state 36

state 159

    (21) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements . END SEMI

    END             shift and go to state 160


state 160

    (21) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END . SEMI

    SEMI            shift and go to state 161


state 161

    (21) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI .

    FUNCTION        reduce using rule 21 (function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI .)
    BEGIN           reduce using rule 21 (function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI .)

