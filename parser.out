Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    CASE
    CONST
    DOTDOT
    DOWNTO
    FILE
    GOTO
    IN
    LABEL
    LBRACKET
    NIL
    NOT
    OF
    PACKED
    PROCEDURE
    RBRACKET
    READ
    RECORD
    REPEAT
    SET
    TYPE
    UNTIL
    WITH

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMI declarations functions BEGIN statements END DOT
Rule 2     declarations -> VAR var_declaration_list
Rule 3     declarations -> empty
Rule 4     var_declaration_list -> var_declaration_list var_declaration
Rule 5     var_declaration_list -> var_declaration
Rule 6     var_declaration -> id_list COLON type SEMI
Rule 7     id_list -> ID
Rule 8     id_list -> ID COMMA id_list
Rule 9     type -> INTEGER
Rule 10    type -> BOOLEAN
Rule 11    type -> STRING
Rule 12    type -> REAL
Rule 13    functions -> function functions
Rule 14    functions -> empty
Rule 15    function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
Rule 16    param_list -> ID COLON type
Rule 17    param_list -> param_list SEMI ID COLON type
Rule 18    argument_list -> expression
Rule 19    argument_list -> argument_list COMMA expression
Rule 20    expression -> ID LPAREN argument_list RPAREN
Rule 21    statements -> statement_sequence
Rule 22    statements -> empty_statement_block
Rule 23    empty_statement_block -> <empty>
Rule 24    statement_sequence -> statement
Rule 25    statement_sequence -> statement_sequence SEMI statement
Rule 26    statement -> assignment_statement
Rule 27    statement -> writeln_statement
Rule 28    statement -> write_statement
Rule 29    statement -> readln_statement
Rule 30    statement -> for_statement
Rule 31    statement -> if_statement
Rule 32    statement -> while_statement
Rule 33    statement -> statement_compound
Rule 34    statement -> concrete_empty_statement
Rule 35    concrete_empty_statement -> <empty>
Rule 36    assignment_statement -> ID ASSIGN expression
Rule 37    writeln_statement -> WRITELN LPAREN writelist RPAREN
Rule 38    write_statement -> WRITE LPAREN writelist RPAREN
Rule 39    writelist -> writelist COMMA writeitem
Rule 40    writelist -> writeitem
Rule 41    writeitem -> STRING_LITERAL
Rule 42    writeitem -> expression
Rule 43    readln_statement -> READLN LPAREN ID RPAREN
Rule 44    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 45    expression -> TRUE
Rule 46    expression -> FALSE
Rule 47    expression -> expression AND expression
Rule 48    expression -> expression OR expression
Rule 49    expression -> expression LT expression
Rule 50    expression -> expression LE expression
Rule 51    expression -> expression GT expression
Rule 52    expression -> expression GE expression
Rule 53    expression -> expression EQ expression
Rule 54    expression -> expression NEQ expression
Rule 55    expression -> LPAREN expression RPAREN
Rule 56    expression -> expression DIV expression
Rule 57    expression -> expression MOD expression
Rule 58    statement_compound -> BEGIN statements END
Rule 59    if_statement -> IF expression THEN statement
Rule 60    if_statement -> IF expression THEN statement ELSE statement
Rule 61    while_statement -> WHILE expression DO statement
Rule 62    expression -> expression PLUS expression
Rule 63    expression -> expression MINUS expression
Rule 64    expression -> expression TIMES expression
Rule 65    expression -> expression DIVIDE expression
Rule 66    expression -> ID
Rule 67    expression -> NUMBER
Rule 68    expression -> REAL
Rule 69    empty -> <empty>

Terminals, with rules where they appear

AND                  : 47
ARRAY                : 
ASSIGN               : 36 44
BEGIN                : 1 15 58
BOOLEAN              : 10
CASE                 : 
COLON                : 6 15 16 17
COMMA                : 8 19 39
CONST                : 
DIV                  : 56
DIVIDE               : 65
DO                   : 44 61
DOT                  : 1
DOTDOT               : 
DOWNTO               : 
ELSE                 : 60
END                  : 1 15 58
EQ                   : 53
FALSE                : 46
FILE                 : 
FOR                  : 44
FUNCTION             : 15
GE                   : 52
GOTO                 : 
GT                   : 51
ID                   : 1 7 8 15 16 17 20 36 43 44 66
IF                   : 59 60
IN                   : 
INTEGER              : 9
LABEL                : 
LBRACKET             : 
LE                   : 50
LPAREN               : 15 20 37 38 43 55
LT                   : 49
MINUS                : 63
MOD                  : 57
NEQ                  : 54
NIL                  : 
NOT                  : 
NUMBER               : 67
OF                   : 
OR                   : 48
PACKED               : 
PLUS                 : 62
PROCEDURE            : 
PROGRAM              : 1
RBRACKET             : 
READ                 : 
READLN               : 43
REAL                 : 12 68
RECORD               : 
REPEAT               : 
RPAREN               : 15 20 37 38 43 55
SEMI                 : 1 6 15 15 17 25
SET                  : 
STRING               : 11
STRING_LITERAL       : 41
THEN                 : 59 60
TIMES                : 64
TO                   : 44
TRUE                 : 45
TYPE                 : 
UNTIL                : 
VAR                  : 2
WHILE                : 61
WITH                 : 
WRITE                : 38
WRITELN              : 37
error                : 

Nonterminals, with rules where they appear

argument_list        : 19 20
assignment_statement : 26
concrete_empty_statement : 34
declarations         : 1 15
empty                : 3 14
empty_statement_block : 22
expression           : 18 19 36 42 44 44 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 56 56 57 57 59 60 61 62 62 63 63 64 64 65 65
for_statement        : 30
function             : 13
functions            : 1 13
id_list              : 6 8
if_statement         : 31
param_list           : 15 17
program              : 0
readln_statement     : 29
statement            : 24 25 44 59 60 60 61
statement_compound   : 33
statement_sequence   : 21 25
statements           : 1 15 58
type                 : 6 15 16 17
var_declaration      : 4 5
var_declaration_list : 2 4
while_statement      : 32
write_statement      : 28
writeitem            : 39 40
writelist            : 37 38 39
writeln_statement    : 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMI declarations functions BEGIN statements END DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMI declarations functions BEGIN statements END DOT

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMI declarations functions BEGIN statements END DOT

    SEMI            shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMI . declarations functions BEGIN statements END DOT
    (2) declarations -> . VAR var_declaration_list
    (3) declarations -> . empty
    (69) empty -> .

    VAR             shift and go to state 6
    FUNCTION        reduce using rule 69 (empty -> .)
    BEGIN           reduce using rule 69 (empty -> .)

    declarations                   shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMI declarations . functions BEGIN statements END DOT
    (13) functions -> . function functions
    (14) functions -> . empty
    (15) function -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (69) empty -> .

    FUNCTION        shift and go to state 11
    BEGIN           reduce using rule 69 (empty -> .)

    functions                      shift and go to state 8
    function                       shift and go to state 9
    empty                          shift and go to state 10

state 6

    (2) declarations -> VAR . var_declaration_list
    (4) var_declaration_list -> . var_declaration_list var_declaration
    (5) var_declaration_list -> . var_declaration
    (6) var_declaration -> . id_list COLON type SEMI
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    ID              shift and go to state 15

    var_declaration_list           shift and go to state 12
    var_declaration                shift and go to state 13
    id_list                        shift and go to state 14

state 7

    (3) declarations -> empty .

    FUNCTION        reduce using rule 3 (declarations -> empty .)
    BEGIN           reduce using rule 3 (declarations -> empty .)


state 8

    (1) program -> PROGRAM ID SEMI declarations functions . BEGIN statements END DOT

    BEGIN           shift and go to state 16


state 9

    (13) functions -> function . functions
    (13) functions -> . function functions
    (14) functions -> . empty
    (15) function -> . FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (69) empty -> .

    FUNCTION        shift and go to state 11
    BEGIN           reduce using rule 69 (empty -> .)

    function                       shift and go to state 9
    functions                      shift and go to state 17
    empty                          shift and go to state 10

state 10

    (14) functions -> empty .

    BEGIN           reduce using rule 14 (functions -> empty .)


state 11

    (15) function -> FUNCTION . ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI

    ID              shift and go to state 18


state 12

    (2) declarations -> VAR var_declaration_list .
    (4) var_declaration_list -> var_declaration_list . var_declaration
    (6) var_declaration -> . id_list COLON type SEMI
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    FUNCTION        reduce using rule 2 (declarations -> VAR var_declaration_list .)
    BEGIN           reduce using rule 2 (declarations -> VAR var_declaration_list .)
    ID              shift and go to state 15

    var_declaration                shift and go to state 19
    id_list                        shift and go to state 14

state 13

    (5) var_declaration_list -> var_declaration .

    ID              reduce using rule 5 (var_declaration_list -> var_declaration .)
    FUNCTION        reduce using rule 5 (var_declaration_list -> var_declaration .)
    BEGIN           reduce using rule 5 (var_declaration_list -> var_declaration .)


state 14

    (6) var_declaration -> id_list . COLON type SEMI

    COLON           shift and go to state 20


state 15

    (7) id_list -> ID .
    (8) id_list -> ID . COMMA id_list

    COLON           reduce using rule 7 (id_list -> ID .)
    COMMA           shift and go to state 21


state 16

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN . statements END DOT
    (21) statements -> . statement_sequence
    (22) statements -> . empty_statement_block
    (24) statement_sequence -> . statement
    (25) statement_sequence -> . statement_sequence SEMI statement
    (23) empty_statement_block -> .
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) statement -> . concrete_empty_statement
    (36) assignment_statement -> . ID ASSIGN expression
    (37) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (38) write_statement -> . WRITE LPAREN writelist RPAREN
    (43) readln_statement -> . READLN LPAREN ID RPAREN
    (44) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (59) if_statement -> . IF expression THEN statement
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (58) statement_compound -> . BEGIN statements END
    (35) concrete_empty_statement -> .

  ! reduce/reduce conflict for END resolved using rule 23 (empty_statement_block -> .)
    END             reduce using rule 23 (empty_statement_block -> .)
    ID              shift and go to state 22
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 35 (concrete_empty_statement -> .)

  ! END             [ reduce using rule 35 (concrete_empty_statement -> .) ]

    statements                     shift and go to state 24
    statement_sequence             shift and go to state 25
    empty_statement_block          shift and go to state 26
    statement                      shift and go to state 27
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35
    concrete_empty_statement       shift and go to state 36

state 17

    (13) functions -> function functions .

    BEGIN           reduce using rule 13 (functions -> function functions .)


state 18

    (15) function -> FUNCTION ID . LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI

    LPAREN          shift and go to state 43


state 19

    (4) var_declaration_list -> var_declaration_list var_declaration .

    ID              reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)
    FUNCTION        reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)
    BEGIN           reduce using rule 4 (var_declaration_list -> var_declaration_list var_declaration .)


state 20

    (6) var_declaration -> id_list COLON . type SEMI
    (9) type -> . INTEGER
    (10) type -> . BOOLEAN
    (11) type -> . STRING
    (12) type -> . REAL

    INTEGER         shift and go to state 45
    BOOLEAN         shift and go to state 46
    STRING          shift and go to state 47
    REAL            shift and go to state 48

    type                           shift and go to state 44

state 21

    (8) id_list -> ID COMMA . id_list
    (7) id_list -> . ID
    (8) id_list -> . ID COMMA id_list

    ID              shift and go to state 15

    id_list                        shift and go to state 49

state 22

    (36) assignment_statement -> ID . ASSIGN expression

    ASSIGN          shift and go to state 50


state 23

    (58) statement_compound -> BEGIN . statements END
    (21) statements -> . statement_sequence
    (22) statements -> . empty_statement_block
    (24) statement_sequence -> . statement
    (25) statement_sequence -> . statement_sequence SEMI statement
    (23) empty_statement_block -> .
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) statement -> . concrete_empty_statement
    (36) assignment_statement -> . ID ASSIGN expression
    (37) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (38) write_statement -> . WRITE LPAREN writelist RPAREN
    (43) readln_statement -> . READLN LPAREN ID RPAREN
    (44) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (59) if_statement -> . IF expression THEN statement
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (58) statement_compound -> . BEGIN statements END
    (35) concrete_empty_statement -> .

  ! reduce/reduce conflict for END resolved using rule 23 (empty_statement_block -> .)
    END             reduce using rule 23 (empty_statement_block -> .)
    ID              shift and go to state 22
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 35 (concrete_empty_statement -> .)

  ! END             [ reduce using rule 35 (concrete_empty_statement -> .) ]

    statements                     shift and go to state 51
    statement_sequence             shift and go to state 25
    empty_statement_block          shift and go to state 26
    statement                      shift and go to state 27
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35
    concrete_empty_statement       shift and go to state 36

state 24

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statements . END DOT

    END             shift and go to state 52


state 25

    (21) statements -> statement_sequence .
    (25) statement_sequence -> statement_sequence . SEMI statement

    END             reduce using rule 21 (statements -> statement_sequence .)
    SEMI            shift and go to state 53


state 26

    (22) statements -> empty_statement_block .

    END             reduce using rule 22 (statements -> empty_statement_block .)


state 27

    (24) statement_sequence -> statement .

    SEMI            reduce using rule 24 (statement_sequence -> statement .)
    END             reduce using rule 24 (statement_sequence -> statement .)


state 28

    (26) statement -> assignment_statement .

    SEMI            reduce using rule 26 (statement -> assignment_statement .)
    END             reduce using rule 26 (statement -> assignment_statement .)
    ELSE            reduce using rule 26 (statement -> assignment_statement .)


state 29

    (27) statement -> writeln_statement .

    SEMI            reduce using rule 27 (statement -> writeln_statement .)
    END             reduce using rule 27 (statement -> writeln_statement .)
    ELSE            reduce using rule 27 (statement -> writeln_statement .)


state 30

    (28) statement -> write_statement .

    SEMI            reduce using rule 28 (statement -> write_statement .)
    END             reduce using rule 28 (statement -> write_statement .)
    ELSE            reduce using rule 28 (statement -> write_statement .)


state 31

    (29) statement -> readln_statement .

    SEMI            reduce using rule 29 (statement -> readln_statement .)
    END             reduce using rule 29 (statement -> readln_statement .)
    ELSE            reduce using rule 29 (statement -> readln_statement .)


state 32

    (30) statement -> for_statement .

    SEMI            reduce using rule 30 (statement -> for_statement .)
    END             reduce using rule 30 (statement -> for_statement .)
    ELSE            reduce using rule 30 (statement -> for_statement .)


state 33

    (31) statement -> if_statement .

    SEMI            reduce using rule 31 (statement -> if_statement .)
    END             reduce using rule 31 (statement -> if_statement .)
    ELSE            reduce using rule 31 (statement -> if_statement .)


state 34

    (32) statement -> while_statement .

    SEMI            reduce using rule 32 (statement -> while_statement .)
    END             reduce using rule 32 (statement -> while_statement .)
    ELSE            reduce using rule 32 (statement -> while_statement .)


state 35

    (33) statement -> statement_compound .

    SEMI            reduce using rule 33 (statement -> statement_compound .)
    END             reduce using rule 33 (statement -> statement_compound .)
    ELSE            reduce using rule 33 (statement -> statement_compound .)


state 36

    (34) statement -> concrete_empty_statement .

    SEMI            reduce using rule 34 (statement -> concrete_empty_statement .)
    END             reduce using rule 34 (statement -> concrete_empty_statement .)
    ELSE            reduce using rule 34 (statement -> concrete_empty_statement .)


state 37

    (37) writeln_statement -> WRITELN . LPAREN writelist RPAREN

    LPAREN          shift and go to state 54


state 38

    (38) write_statement -> WRITE . LPAREN writelist RPAREN

    LPAREN          shift and go to state 55


state 39

    (43) readln_statement -> READLN . LPAREN ID RPAREN

    LPAREN          shift and go to state 56


state 40

    (44) for_statement -> FOR . ID ASSIGN expression TO expression DO statement

    ID              shift and go to state 57


state 41

    (59) if_statement -> IF . expression THEN statement
    (60) if_statement -> IF . expression THEN statement ELSE statement
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 58

state 42

    (61) while_statement -> WHILE . expression DO statement
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 65

state 43

    (15) function -> FUNCTION ID LPAREN . param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (16) param_list -> . ID COLON type
    (17) param_list -> . param_list SEMI ID COLON type

    ID              shift and go to state 66

    param_list                     shift and go to state 67

state 44

    (6) var_declaration -> id_list COLON type . SEMI

    SEMI            shift and go to state 68


state 45

    (9) type -> INTEGER .

    SEMI            reduce using rule 9 (type -> INTEGER .)
    RPAREN          reduce using rule 9 (type -> INTEGER .)


state 46

    (10) type -> BOOLEAN .

    SEMI            reduce using rule 10 (type -> BOOLEAN .)
    RPAREN          reduce using rule 10 (type -> BOOLEAN .)


state 47

    (11) type -> STRING .

    SEMI            reduce using rule 11 (type -> STRING .)
    RPAREN          reduce using rule 11 (type -> STRING .)


state 48

    (12) type -> REAL .

    SEMI            reduce using rule 12 (type -> REAL .)
    RPAREN          reduce using rule 12 (type -> REAL .)


state 49

    (8) id_list -> ID COMMA id_list .

    COLON           reduce using rule 8 (id_list -> ID COMMA id_list .)


state 50

    (36) assignment_statement -> ID ASSIGN . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 69

state 51

    (58) statement_compound -> BEGIN statements . END

    END             shift and go to state 70


state 52

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statements END . DOT

    DOT             shift and go to state 71


state 53

    (25) statement_sequence -> statement_sequence SEMI . statement
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) statement -> . concrete_empty_statement
    (36) assignment_statement -> . ID ASSIGN expression
    (37) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (38) write_statement -> . WRITE LPAREN writelist RPAREN
    (43) readln_statement -> . READLN LPAREN ID RPAREN
    (44) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (59) if_statement -> . IF expression THEN statement
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (58) statement_compound -> . BEGIN statements END
    (35) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 35 (concrete_empty_statement -> .)
    END             reduce using rule 35 (concrete_empty_statement -> .)

    statement                      shift and go to state 72
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35
    concrete_empty_statement       shift and go to state 36

state 54

    (37) writeln_statement -> WRITELN LPAREN . writelist RPAREN
    (39) writelist -> . writelist COMMA writeitem
    (40) writelist -> . writeitem
    (41) writeitem -> . STRING_LITERAL
    (42) writeitem -> . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    STRING_LITERAL  shift and go to state 75
    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    writelist                      shift and go to state 73
    writeitem                      shift and go to state 74
    expression                     shift and go to state 76

state 55

    (38) write_statement -> WRITE LPAREN . writelist RPAREN
    (39) writelist -> . writelist COMMA writeitem
    (40) writelist -> . writeitem
    (41) writeitem -> . STRING_LITERAL
    (42) writeitem -> . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    STRING_LITERAL  shift and go to state 75
    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    writelist                      shift and go to state 77
    writeitem                      shift and go to state 74
    expression                     shift and go to state 76

state 56

    (43) readln_statement -> READLN LPAREN . ID RPAREN

    ID              shift and go to state 78


state 57

    (44) for_statement -> FOR ID . ASSIGN expression TO expression DO statement

    ASSIGN          shift and go to state 79


state 58

    (59) if_statement -> IF expression . THEN statement
    (60) if_statement -> IF expression . THEN statement ELSE statement
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94


state 59

    (20) expression -> ID . LPAREN argument_list RPAREN
    (66) expression -> ID .

    LPAREN          shift and go to state 95
    THEN            reduce using rule 66 (expression -> ID .)
    AND             reduce using rule 66 (expression -> ID .)
    OR              reduce using rule 66 (expression -> ID .)
    LT              reduce using rule 66 (expression -> ID .)
    LE              reduce using rule 66 (expression -> ID .)
    GT              reduce using rule 66 (expression -> ID .)
    GE              reduce using rule 66 (expression -> ID .)
    EQ              reduce using rule 66 (expression -> ID .)
    NEQ             reduce using rule 66 (expression -> ID .)
    DIV             reduce using rule 66 (expression -> ID .)
    MOD             reduce using rule 66 (expression -> ID .)
    PLUS            reduce using rule 66 (expression -> ID .)
    MINUS           reduce using rule 66 (expression -> ID .)
    TIMES           reduce using rule 66 (expression -> ID .)
    DIVIDE          reduce using rule 66 (expression -> ID .)
    DO              reduce using rule 66 (expression -> ID .)
    SEMI            reduce using rule 66 (expression -> ID .)
    END             reduce using rule 66 (expression -> ID .)
    ELSE            reduce using rule 66 (expression -> ID .)
    RPAREN          reduce using rule 66 (expression -> ID .)
    COMMA           reduce using rule 66 (expression -> ID .)
    TO              reduce using rule 66 (expression -> ID .)


state 60

    (55) expression -> LPAREN . expression RPAREN
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 96

state 61

    (45) expression -> TRUE .

    THEN            reduce using rule 45 (expression -> TRUE .)
    AND             reduce using rule 45 (expression -> TRUE .)
    OR              reduce using rule 45 (expression -> TRUE .)
    LT              reduce using rule 45 (expression -> TRUE .)
    LE              reduce using rule 45 (expression -> TRUE .)
    GT              reduce using rule 45 (expression -> TRUE .)
    GE              reduce using rule 45 (expression -> TRUE .)
    EQ              reduce using rule 45 (expression -> TRUE .)
    NEQ             reduce using rule 45 (expression -> TRUE .)
    DIV             reduce using rule 45 (expression -> TRUE .)
    MOD             reduce using rule 45 (expression -> TRUE .)
    PLUS            reduce using rule 45 (expression -> TRUE .)
    MINUS           reduce using rule 45 (expression -> TRUE .)
    TIMES           reduce using rule 45 (expression -> TRUE .)
    DIVIDE          reduce using rule 45 (expression -> TRUE .)
    DO              reduce using rule 45 (expression -> TRUE .)
    SEMI            reduce using rule 45 (expression -> TRUE .)
    END             reduce using rule 45 (expression -> TRUE .)
    ELSE            reduce using rule 45 (expression -> TRUE .)
    RPAREN          reduce using rule 45 (expression -> TRUE .)
    COMMA           reduce using rule 45 (expression -> TRUE .)
    TO              reduce using rule 45 (expression -> TRUE .)


state 62

    (46) expression -> FALSE .

    THEN            reduce using rule 46 (expression -> FALSE .)
    AND             reduce using rule 46 (expression -> FALSE .)
    OR              reduce using rule 46 (expression -> FALSE .)
    LT              reduce using rule 46 (expression -> FALSE .)
    LE              reduce using rule 46 (expression -> FALSE .)
    GT              reduce using rule 46 (expression -> FALSE .)
    GE              reduce using rule 46 (expression -> FALSE .)
    EQ              reduce using rule 46 (expression -> FALSE .)
    NEQ             reduce using rule 46 (expression -> FALSE .)
    DIV             reduce using rule 46 (expression -> FALSE .)
    MOD             reduce using rule 46 (expression -> FALSE .)
    PLUS            reduce using rule 46 (expression -> FALSE .)
    MINUS           reduce using rule 46 (expression -> FALSE .)
    TIMES           reduce using rule 46 (expression -> FALSE .)
    DIVIDE          reduce using rule 46 (expression -> FALSE .)
    DO              reduce using rule 46 (expression -> FALSE .)
    SEMI            reduce using rule 46 (expression -> FALSE .)
    END             reduce using rule 46 (expression -> FALSE .)
    ELSE            reduce using rule 46 (expression -> FALSE .)
    RPAREN          reduce using rule 46 (expression -> FALSE .)
    COMMA           reduce using rule 46 (expression -> FALSE .)
    TO              reduce using rule 46 (expression -> FALSE .)


state 63

    (67) expression -> NUMBER .

    THEN            reduce using rule 67 (expression -> NUMBER .)
    AND             reduce using rule 67 (expression -> NUMBER .)
    OR              reduce using rule 67 (expression -> NUMBER .)
    LT              reduce using rule 67 (expression -> NUMBER .)
    LE              reduce using rule 67 (expression -> NUMBER .)
    GT              reduce using rule 67 (expression -> NUMBER .)
    GE              reduce using rule 67 (expression -> NUMBER .)
    EQ              reduce using rule 67 (expression -> NUMBER .)
    NEQ             reduce using rule 67 (expression -> NUMBER .)
    DIV             reduce using rule 67 (expression -> NUMBER .)
    MOD             reduce using rule 67 (expression -> NUMBER .)
    PLUS            reduce using rule 67 (expression -> NUMBER .)
    MINUS           reduce using rule 67 (expression -> NUMBER .)
    TIMES           reduce using rule 67 (expression -> NUMBER .)
    DIVIDE          reduce using rule 67 (expression -> NUMBER .)
    DO              reduce using rule 67 (expression -> NUMBER .)
    SEMI            reduce using rule 67 (expression -> NUMBER .)
    END             reduce using rule 67 (expression -> NUMBER .)
    ELSE            reduce using rule 67 (expression -> NUMBER .)
    RPAREN          reduce using rule 67 (expression -> NUMBER .)
    COMMA           reduce using rule 67 (expression -> NUMBER .)
    TO              reduce using rule 67 (expression -> NUMBER .)


state 64

    (68) expression -> REAL .

    THEN            reduce using rule 68 (expression -> REAL .)
    AND             reduce using rule 68 (expression -> REAL .)
    OR              reduce using rule 68 (expression -> REAL .)
    LT              reduce using rule 68 (expression -> REAL .)
    LE              reduce using rule 68 (expression -> REAL .)
    GT              reduce using rule 68 (expression -> REAL .)
    GE              reduce using rule 68 (expression -> REAL .)
    EQ              reduce using rule 68 (expression -> REAL .)
    NEQ             reduce using rule 68 (expression -> REAL .)
    DIV             reduce using rule 68 (expression -> REAL .)
    MOD             reduce using rule 68 (expression -> REAL .)
    PLUS            reduce using rule 68 (expression -> REAL .)
    MINUS           reduce using rule 68 (expression -> REAL .)
    TIMES           reduce using rule 68 (expression -> REAL .)
    DIVIDE          reduce using rule 68 (expression -> REAL .)
    DO              reduce using rule 68 (expression -> REAL .)
    SEMI            reduce using rule 68 (expression -> REAL .)
    END             reduce using rule 68 (expression -> REAL .)
    ELSE            reduce using rule 68 (expression -> REAL .)
    RPAREN          reduce using rule 68 (expression -> REAL .)
    COMMA           reduce using rule 68 (expression -> REAL .)
    TO              reduce using rule 68 (expression -> REAL .)


state 65

    (61) while_statement -> WHILE expression . DO statement
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    DO              shift and go to state 97
    AND             shift and go to state 81
    OR              shift and go to state 82
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94


state 66

    (16) param_list -> ID . COLON type

    COLON           shift and go to state 98


state 67

    (15) function -> FUNCTION ID LPAREN param_list . RPAREN COLON type SEMI declarations BEGIN statements END SEMI
    (17) param_list -> param_list . SEMI ID COLON type

    RPAREN          shift and go to state 99
    SEMI            shift and go to state 100


state 68

    (6) var_declaration -> id_list COLON type SEMI .

    ID              reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)
    FUNCTION        reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)
    BEGIN           reduce using rule 6 (var_declaration -> id_list COLON type SEMI .)


state 69

    (36) assignment_statement -> ID ASSIGN expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    SEMI            reduce using rule 36 (assignment_statement -> ID ASSIGN expression .)
    END             reduce using rule 36 (assignment_statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 36 (assignment_statement -> ID ASSIGN expression .)
    AND             shift and go to state 81
    OR              shift and go to state 82
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94


state 70

    (58) statement_compound -> BEGIN statements END .

    SEMI            reduce using rule 58 (statement_compound -> BEGIN statements END .)
    END             reduce using rule 58 (statement_compound -> BEGIN statements END .)
    ELSE            reduce using rule 58 (statement_compound -> BEGIN statements END .)


state 71

    (1) program -> PROGRAM ID SEMI declarations functions BEGIN statements END DOT .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMI declarations functions BEGIN statements END DOT .)


state 72

    (25) statement_sequence -> statement_sequence SEMI statement .

    SEMI            reduce using rule 25 (statement_sequence -> statement_sequence SEMI statement .)
    END             reduce using rule 25 (statement_sequence -> statement_sequence SEMI statement .)


state 73

    (37) writeln_statement -> WRITELN LPAREN writelist . RPAREN
    (39) writelist -> writelist . COMMA writeitem

    RPAREN          shift and go to state 101
    COMMA           shift and go to state 102


state 74

    (40) writelist -> writeitem .

    RPAREN          reduce using rule 40 (writelist -> writeitem .)
    COMMA           reduce using rule 40 (writelist -> writeitem .)


state 75

    (41) writeitem -> STRING_LITERAL .

    RPAREN          reduce using rule 41 (writeitem -> STRING_LITERAL .)
    COMMA           reduce using rule 41 (writeitem -> STRING_LITERAL .)


state 76

    (42) writeitem -> expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 42 (writeitem -> expression .)
    COMMA           reduce using rule 42 (writeitem -> expression .)
    AND             shift and go to state 81
    OR              shift and go to state 82
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94


state 77

    (38) write_statement -> WRITE LPAREN writelist . RPAREN
    (39) writelist -> writelist . COMMA writeitem

    RPAREN          shift and go to state 103
    COMMA           shift and go to state 102


state 78

    (43) readln_statement -> READLN LPAREN ID . RPAREN

    RPAREN          shift and go to state 104


state 79

    (44) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 105

state 80

    (59) if_statement -> IF expression THEN . statement
    (60) if_statement -> IF expression THEN . statement ELSE statement
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) statement -> . concrete_empty_statement
    (36) assignment_statement -> . ID ASSIGN expression
    (37) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (38) write_statement -> . WRITE LPAREN writelist RPAREN
    (43) readln_statement -> . READLN LPAREN ID RPAREN
    (44) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (59) if_statement -> . IF expression THEN statement
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (58) statement_compound -> . BEGIN statements END
    (35) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 35 (concrete_empty_statement -> .)
    SEMI            reduce using rule 35 (concrete_empty_statement -> .)
    END             reduce using rule 35 (concrete_empty_statement -> .)

    statement                      shift and go to state 106
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35
    concrete_empty_statement       shift and go to state 36

state 81

    (47) expression -> expression AND . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 107

state 82

    (48) expression -> expression OR . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 108

state 83

    (49) expression -> expression LT . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 109

state 84

    (50) expression -> expression LE . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 110

state 85

    (51) expression -> expression GT . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 111

state 86

    (52) expression -> expression GE . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 112

state 87

    (53) expression -> expression EQ . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 113

state 88

    (54) expression -> expression NEQ . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 114

state 89

    (56) expression -> expression DIV . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 115

state 90

    (57) expression -> expression MOD . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 116

state 91

    (62) expression -> expression PLUS . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 117

state 92

    (63) expression -> expression MINUS . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 118

state 93

    (64) expression -> expression TIMES . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 119

state 94

    (65) expression -> expression DIVIDE . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 120

state 95

    (20) expression -> ID LPAREN . argument_list RPAREN
    (18) argument_list -> . expression
    (19) argument_list -> . argument_list COMMA expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    argument_list                  shift and go to state 121
    expression                     shift and go to state 122

state 96

    (55) expression -> LPAREN expression . RPAREN
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 123
    AND             shift and go to state 81
    OR              shift and go to state 82
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94


state 97

    (61) while_statement -> WHILE expression DO . statement
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) statement -> . concrete_empty_statement
    (36) assignment_statement -> . ID ASSIGN expression
    (37) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (38) write_statement -> . WRITE LPAREN writelist RPAREN
    (43) readln_statement -> . READLN LPAREN ID RPAREN
    (44) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (59) if_statement -> . IF expression THEN statement
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (58) statement_compound -> . BEGIN statements END
    (35) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 35 (concrete_empty_statement -> .)
    SEMI            reduce using rule 35 (concrete_empty_statement -> .)
    END             reduce using rule 35 (concrete_empty_statement -> .)

    statement                      shift and go to state 124
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35
    concrete_empty_statement       shift and go to state 36

state 98

    (16) param_list -> ID COLON . type
    (9) type -> . INTEGER
    (10) type -> . BOOLEAN
    (11) type -> . STRING
    (12) type -> . REAL

    INTEGER         shift and go to state 45
    BOOLEAN         shift and go to state 46
    STRING          shift and go to state 47
    REAL            shift and go to state 48

    type                           shift and go to state 125

state 99

    (15) function -> FUNCTION ID LPAREN param_list RPAREN . COLON type SEMI declarations BEGIN statements END SEMI

    COLON           shift and go to state 126


state 100

    (17) param_list -> param_list SEMI . ID COLON type

    ID              shift and go to state 127


state 101

    (37) writeln_statement -> WRITELN LPAREN writelist RPAREN .

    SEMI            reduce using rule 37 (writeln_statement -> WRITELN LPAREN writelist RPAREN .)
    END             reduce using rule 37 (writeln_statement -> WRITELN LPAREN writelist RPAREN .)
    ELSE            reduce using rule 37 (writeln_statement -> WRITELN LPAREN writelist RPAREN .)


state 102

    (39) writelist -> writelist COMMA . writeitem
    (41) writeitem -> . STRING_LITERAL
    (42) writeitem -> . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    STRING_LITERAL  shift and go to state 75
    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    writeitem                      shift and go to state 128
    expression                     shift and go to state 76

state 103

    (38) write_statement -> WRITE LPAREN writelist RPAREN .

    SEMI            reduce using rule 38 (write_statement -> WRITE LPAREN writelist RPAREN .)
    END             reduce using rule 38 (write_statement -> WRITE LPAREN writelist RPAREN .)
    ELSE            reduce using rule 38 (write_statement -> WRITE LPAREN writelist RPAREN .)


state 104

    (43) readln_statement -> READLN LPAREN ID RPAREN .

    SEMI            reduce using rule 43 (readln_statement -> READLN LPAREN ID RPAREN .)
    END             reduce using rule 43 (readln_statement -> READLN LPAREN ID RPAREN .)
    ELSE            reduce using rule 43 (readln_statement -> READLN LPAREN ID RPAREN .)


state 105

    (44) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    TO              shift and go to state 129
    AND             shift and go to state 81
    OR              shift and go to state 82
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94


state 106

    (59) if_statement -> IF expression THEN statement .
    (60) if_statement -> IF expression THEN statement . ELSE statement

    SEMI            reduce using rule 59 (if_statement -> IF expression THEN statement .)
    END             reduce using rule 59 (if_statement -> IF expression THEN statement .)
    ELSE            reduce using rule 59 (if_statement -> IF expression THEN statement .)

  ! ELSE            [ shift and go to state 130 ]


state 107

    (47) expression -> expression AND expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 47 (expression -> expression AND expression .)
    AND             reduce using rule 47 (expression -> expression AND expression .)
    OR              reduce using rule 47 (expression -> expression AND expression .)
    DO              reduce using rule 47 (expression -> expression AND expression .)
    SEMI            reduce using rule 47 (expression -> expression AND expression .)
    END             reduce using rule 47 (expression -> expression AND expression .)
    ELSE            reduce using rule 47 (expression -> expression AND expression .)
    RPAREN          reduce using rule 47 (expression -> expression AND expression .)
    COMMA           reduce using rule 47 (expression -> expression AND expression .)
    TO              reduce using rule 47 (expression -> expression AND expression .)
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

  ! LT              [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]


state 108

    (48) expression -> expression OR expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 48 (expression -> expression OR expression .)
    OR              reduce using rule 48 (expression -> expression OR expression .)
    DO              reduce using rule 48 (expression -> expression OR expression .)
    SEMI            reduce using rule 48 (expression -> expression OR expression .)
    END             reduce using rule 48 (expression -> expression OR expression .)
    ELSE            reduce using rule 48 (expression -> expression OR expression .)
    RPAREN          reduce using rule 48 (expression -> expression OR expression .)
    COMMA           reduce using rule 48 (expression -> expression OR expression .)
    TO              reduce using rule 48 (expression -> expression OR expression .)
    AND             shift and go to state 81
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

  ! AND             [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 82 ]


state 109

    (49) expression -> expression LT expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 49 (expression -> expression LT expression .)
    AND             reduce using rule 49 (expression -> expression LT expression .)
    OR              reduce using rule 49 (expression -> expression LT expression .)
    LT              reduce using rule 49 (expression -> expression LT expression .)
    LE              reduce using rule 49 (expression -> expression LT expression .)
    GT              reduce using rule 49 (expression -> expression LT expression .)
    GE              reduce using rule 49 (expression -> expression LT expression .)
    EQ              reduce using rule 49 (expression -> expression LT expression .)
    NEQ             reduce using rule 49 (expression -> expression LT expression .)
    DO              reduce using rule 49 (expression -> expression LT expression .)
    SEMI            reduce using rule 49 (expression -> expression LT expression .)
    END             reduce using rule 49 (expression -> expression LT expression .)
    ELSE            reduce using rule 49 (expression -> expression LT expression .)
    RPAREN          reduce using rule 49 (expression -> expression LT expression .)
    COMMA           reduce using rule 49 (expression -> expression LT expression .)
    TO              reduce using rule 49 (expression -> expression LT expression .)
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

  ! DIV             [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]


state 110

    (50) expression -> expression LE expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 50 (expression -> expression LE expression .)
    AND             reduce using rule 50 (expression -> expression LE expression .)
    OR              reduce using rule 50 (expression -> expression LE expression .)
    LT              reduce using rule 50 (expression -> expression LE expression .)
    LE              reduce using rule 50 (expression -> expression LE expression .)
    GT              reduce using rule 50 (expression -> expression LE expression .)
    GE              reduce using rule 50 (expression -> expression LE expression .)
    EQ              reduce using rule 50 (expression -> expression LE expression .)
    NEQ             reduce using rule 50 (expression -> expression LE expression .)
    DO              reduce using rule 50 (expression -> expression LE expression .)
    SEMI            reduce using rule 50 (expression -> expression LE expression .)
    END             reduce using rule 50 (expression -> expression LE expression .)
    ELSE            reduce using rule 50 (expression -> expression LE expression .)
    RPAREN          reduce using rule 50 (expression -> expression LE expression .)
    COMMA           reduce using rule 50 (expression -> expression LE expression .)
    TO              reduce using rule 50 (expression -> expression LE expression .)
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

  ! DIV             [ reduce using rule 50 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 50 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 50 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression LE expression .) ]
  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]


state 111

    (51) expression -> expression GT expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 51 (expression -> expression GT expression .)
    AND             reduce using rule 51 (expression -> expression GT expression .)
    OR              reduce using rule 51 (expression -> expression GT expression .)
    LT              reduce using rule 51 (expression -> expression GT expression .)
    LE              reduce using rule 51 (expression -> expression GT expression .)
    GT              reduce using rule 51 (expression -> expression GT expression .)
    GE              reduce using rule 51 (expression -> expression GT expression .)
    EQ              reduce using rule 51 (expression -> expression GT expression .)
    NEQ             reduce using rule 51 (expression -> expression GT expression .)
    DO              reduce using rule 51 (expression -> expression GT expression .)
    SEMI            reduce using rule 51 (expression -> expression GT expression .)
    END             reduce using rule 51 (expression -> expression GT expression .)
    ELSE            reduce using rule 51 (expression -> expression GT expression .)
    RPAREN          reduce using rule 51 (expression -> expression GT expression .)
    COMMA           reduce using rule 51 (expression -> expression GT expression .)
    TO              reduce using rule 51 (expression -> expression GT expression .)
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

  ! DIV             [ reduce using rule 51 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 51 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression GT expression .) ]
  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]


state 112

    (52) expression -> expression GE expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 52 (expression -> expression GE expression .)
    AND             reduce using rule 52 (expression -> expression GE expression .)
    OR              reduce using rule 52 (expression -> expression GE expression .)
    LT              reduce using rule 52 (expression -> expression GE expression .)
    LE              reduce using rule 52 (expression -> expression GE expression .)
    GT              reduce using rule 52 (expression -> expression GE expression .)
    GE              reduce using rule 52 (expression -> expression GE expression .)
    EQ              reduce using rule 52 (expression -> expression GE expression .)
    NEQ             reduce using rule 52 (expression -> expression GE expression .)
    DO              reduce using rule 52 (expression -> expression GE expression .)
    SEMI            reduce using rule 52 (expression -> expression GE expression .)
    END             reduce using rule 52 (expression -> expression GE expression .)
    ELSE            reduce using rule 52 (expression -> expression GE expression .)
    RPAREN          reduce using rule 52 (expression -> expression GE expression .)
    COMMA           reduce using rule 52 (expression -> expression GE expression .)
    TO              reduce using rule 52 (expression -> expression GE expression .)
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

  ! DIV             [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]


state 113

    (53) expression -> expression EQ expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 53 (expression -> expression EQ expression .)
    AND             reduce using rule 53 (expression -> expression EQ expression .)
    OR              reduce using rule 53 (expression -> expression EQ expression .)
    LT              reduce using rule 53 (expression -> expression EQ expression .)
    LE              reduce using rule 53 (expression -> expression EQ expression .)
    GT              reduce using rule 53 (expression -> expression EQ expression .)
    GE              reduce using rule 53 (expression -> expression EQ expression .)
    EQ              reduce using rule 53 (expression -> expression EQ expression .)
    NEQ             reduce using rule 53 (expression -> expression EQ expression .)
    DO              reduce using rule 53 (expression -> expression EQ expression .)
    SEMI            reduce using rule 53 (expression -> expression EQ expression .)
    END             reduce using rule 53 (expression -> expression EQ expression .)
    ELSE            reduce using rule 53 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 53 (expression -> expression EQ expression .)
    COMMA           reduce using rule 53 (expression -> expression EQ expression .)
    TO              reduce using rule 53 (expression -> expression EQ expression .)
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

  ! DIV             [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]


state 114

    (54) expression -> expression NEQ expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 54 (expression -> expression NEQ expression .)
    AND             reduce using rule 54 (expression -> expression NEQ expression .)
    OR              reduce using rule 54 (expression -> expression NEQ expression .)
    LT              reduce using rule 54 (expression -> expression NEQ expression .)
    LE              reduce using rule 54 (expression -> expression NEQ expression .)
    GT              reduce using rule 54 (expression -> expression NEQ expression .)
    GE              reduce using rule 54 (expression -> expression NEQ expression .)
    EQ              reduce using rule 54 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 54 (expression -> expression NEQ expression .)
    DO              reduce using rule 54 (expression -> expression NEQ expression .)
    SEMI            reduce using rule 54 (expression -> expression NEQ expression .)
    END             reduce using rule 54 (expression -> expression NEQ expression .)
    ELSE            reduce using rule 54 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 54 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 54 (expression -> expression NEQ expression .)
    TO              reduce using rule 54 (expression -> expression NEQ expression .)
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

  ! DIV             [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! PLUS            [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]


state 115

    (56) expression -> expression DIV expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 56 (expression -> expression DIV expression .)
    AND             reduce using rule 56 (expression -> expression DIV expression .)
    OR              reduce using rule 56 (expression -> expression DIV expression .)
    LT              reduce using rule 56 (expression -> expression DIV expression .)
    LE              reduce using rule 56 (expression -> expression DIV expression .)
    GT              reduce using rule 56 (expression -> expression DIV expression .)
    GE              reduce using rule 56 (expression -> expression DIV expression .)
    EQ              reduce using rule 56 (expression -> expression DIV expression .)
    NEQ             reduce using rule 56 (expression -> expression DIV expression .)
    DIV             reduce using rule 56 (expression -> expression DIV expression .)
    MOD             reduce using rule 56 (expression -> expression DIV expression .)
    PLUS            reduce using rule 56 (expression -> expression DIV expression .)
    MINUS           reduce using rule 56 (expression -> expression DIV expression .)
    TIMES           reduce using rule 56 (expression -> expression DIV expression .)
    DIVIDE          reduce using rule 56 (expression -> expression DIV expression .)
    DO              reduce using rule 56 (expression -> expression DIV expression .)
    SEMI            reduce using rule 56 (expression -> expression DIV expression .)
    END             reduce using rule 56 (expression -> expression DIV expression .)
    ELSE            reduce using rule 56 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 56 (expression -> expression DIV expression .)
    COMMA           reduce using rule 56 (expression -> expression DIV expression .)
    TO              reduce using rule 56 (expression -> expression DIV expression .)

  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]
  ! DIV             [ shift and go to state 89 ]
  ! MOD             [ shift and go to state 90 ]
  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]
  ! TIMES           [ shift and go to state 93 ]
  ! DIVIDE          [ shift and go to state 94 ]


state 116

    (57) expression -> expression MOD expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 57 (expression -> expression MOD expression .)
    AND             reduce using rule 57 (expression -> expression MOD expression .)
    OR              reduce using rule 57 (expression -> expression MOD expression .)
    LT              reduce using rule 57 (expression -> expression MOD expression .)
    LE              reduce using rule 57 (expression -> expression MOD expression .)
    GT              reduce using rule 57 (expression -> expression MOD expression .)
    GE              reduce using rule 57 (expression -> expression MOD expression .)
    EQ              reduce using rule 57 (expression -> expression MOD expression .)
    NEQ             reduce using rule 57 (expression -> expression MOD expression .)
    DIV             reduce using rule 57 (expression -> expression MOD expression .)
    MOD             reduce using rule 57 (expression -> expression MOD expression .)
    PLUS            reduce using rule 57 (expression -> expression MOD expression .)
    MINUS           reduce using rule 57 (expression -> expression MOD expression .)
    TIMES           reduce using rule 57 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 57 (expression -> expression MOD expression .)
    DO              reduce using rule 57 (expression -> expression MOD expression .)
    SEMI            reduce using rule 57 (expression -> expression MOD expression .)
    END             reduce using rule 57 (expression -> expression MOD expression .)
    ELSE            reduce using rule 57 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 57 (expression -> expression MOD expression .)
    COMMA           reduce using rule 57 (expression -> expression MOD expression .)
    TO              reduce using rule 57 (expression -> expression MOD expression .)

  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]
  ! DIV             [ shift and go to state 89 ]
  ! MOD             [ shift and go to state 90 ]
  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]
  ! TIMES           [ shift and go to state 93 ]
  ! DIVIDE          [ shift and go to state 94 ]


state 117

    (62) expression -> expression PLUS expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 62 (expression -> expression PLUS expression .)
    AND             reduce using rule 62 (expression -> expression PLUS expression .)
    OR              reduce using rule 62 (expression -> expression PLUS expression .)
    LT              reduce using rule 62 (expression -> expression PLUS expression .)
    LE              reduce using rule 62 (expression -> expression PLUS expression .)
    GT              reduce using rule 62 (expression -> expression PLUS expression .)
    GE              reduce using rule 62 (expression -> expression PLUS expression .)
    EQ              reduce using rule 62 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 62 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 62 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 62 (expression -> expression PLUS expression .)
    DO              reduce using rule 62 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 62 (expression -> expression PLUS expression .)
    END             reduce using rule 62 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 62 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 62 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 62 (expression -> expression PLUS expression .)
    TO              reduce using rule 62 (expression -> expression PLUS expression .)
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

  ! DIV             [ reduce using rule 62 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 62 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 62 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression PLUS expression .) ]
  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]
  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]


state 118

    (63) expression -> expression MINUS expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 63 (expression -> expression MINUS expression .)
    AND             reduce using rule 63 (expression -> expression MINUS expression .)
    OR              reduce using rule 63 (expression -> expression MINUS expression .)
    LT              reduce using rule 63 (expression -> expression MINUS expression .)
    LE              reduce using rule 63 (expression -> expression MINUS expression .)
    GT              reduce using rule 63 (expression -> expression MINUS expression .)
    GE              reduce using rule 63 (expression -> expression MINUS expression .)
    EQ              reduce using rule 63 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 63 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 63 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 63 (expression -> expression MINUS expression .)
    DO              reduce using rule 63 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 63 (expression -> expression MINUS expression .)
    END             reduce using rule 63 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 63 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 63 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 63 (expression -> expression MINUS expression .)
    TO              reduce using rule 63 (expression -> expression MINUS expression .)
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94

  ! DIV             [ reduce using rule 63 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 63 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 63 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression -> expression MINUS expression .) ]
  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]
  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]


state 119

    (64) expression -> expression TIMES expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 64 (expression -> expression TIMES expression .)
    AND             reduce using rule 64 (expression -> expression TIMES expression .)
    OR              reduce using rule 64 (expression -> expression TIMES expression .)
    LT              reduce using rule 64 (expression -> expression TIMES expression .)
    LE              reduce using rule 64 (expression -> expression TIMES expression .)
    GT              reduce using rule 64 (expression -> expression TIMES expression .)
    GE              reduce using rule 64 (expression -> expression TIMES expression .)
    EQ              reduce using rule 64 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 64 (expression -> expression TIMES expression .)
    DIV             reduce using rule 64 (expression -> expression TIMES expression .)
    MOD             reduce using rule 64 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 64 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 64 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 64 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 64 (expression -> expression TIMES expression .)
    DO              reduce using rule 64 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 64 (expression -> expression TIMES expression .)
    END             reduce using rule 64 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 64 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 64 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 64 (expression -> expression TIMES expression .)
    TO              reduce using rule 64 (expression -> expression TIMES expression .)

  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]
  ! DIV             [ shift and go to state 89 ]
  ! MOD             [ shift and go to state 90 ]
  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]
  ! TIMES           [ shift and go to state 93 ]
  ! DIVIDE          [ shift and go to state 94 ]


state 120

    (65) expression -> expression DIVIDE expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    THEN            reduce using rule 65 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 65 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 65 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 65 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 65 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 65 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 65 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 65 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 65 (expression -> expression DIVIDE expression .)
    DIV             reduce using rule 65 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 65 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 65 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 65 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 65 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 65 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 65 (expression -> expression DIVIDE expression .)
    SEMI            reduce using rule 65 (expression -> expression DIVIDE expression .)
    END             reduce using rule 65 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 65 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 65 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 65 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 65 (expression -> expression DIVIDE expression .)

  ! AND             [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! LT              [ shift and go to state 83 ]
  ! LE              [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GE              [ shift and go to state 86 ]
  ! EQ              [ shift and go to state 87 ]
  ! NEQ             [ shift and go to state 88 ]
  ! DIV             [ shift and go to state 89 ]
  ! MOD             [ shift and go to state 90 ]
  ! PLUS            [ shift and go to state 91 ]
  ! MINUS           [ shift and go to state 92 ]
  ! TIMES           [ shift and go to state 93 ]
  ! DIVIDE          [ shift and go to state 94 ]


state 121

    (20) expression -> ID LPAREN argument_list . RPAREN
    (19) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 131
    COMMA           shift and go to state 132


state 122

    (18) argument_list -> expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 18 (argument_list -> expression .)
    COMMA           reduce using rule 18 (argument_list -> expression .)
    AND             shift and go to state 81
    OR              shift and go to state 82
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94


state 123

    (55) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 55 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 55 (expression -> LPAREN expression RPAREN .)


state 124

    (61) while_statement -> WHILE expression DO statement .

    SEMI            reduce using rule 61 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 61 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 61 (while_statement -> WHILE expression DO statement .)


state 125

    (16) param_list -> ID COLON type .

    RPAREN          reduce using rule 16 (param_list -> ID COLON type .)
    SEMI            reduce using rule 16 (param_list -> ID COLON type .)


state 126

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON . type SEMI declarations BEGIN statements END SEMI
    (9) type -> . INTEGER
    (10) type -> . BOOLEAN
    (11) type -> . STRING
    (12) type -> . REAL

    INTEGER         shift and go to state 45
    BOOLEAN         shift and go to state 46
    STRING          shift and go to state 47
    REAL            shift and go to state 48

    type                           shift and go to state 133

state 127

    (17) param_list -> param_list SEMI ID . COLON type

    COLON           shift and go to state 134


state 128

    (39) writelist -> writelist COMMA writeitem .

    RPAREN          reduce using rule 39 (writelist -> writelist COMMA writeitem .)
    COMMA           reduce using rule 39 (writelist -> writelist COMMA writeitem .)


state 129

    (44) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 135

state 130

    (60) if_statement -> IF expression THEN statement ELSE . statement
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) statement -> . concrete_empty_statement
    (36) assignment_statement -> . ID ASSIGN expression
    (37) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (38) write_statement -> . WRITE LPAREN writelist RPAREN
    (43) readln_statement -> . READLN LPAREN ID RPAREN
    (44) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (59) if_statement -> . IF expression THEN statement
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (58) statement_compound -> . BEGIN statements END
    (35) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 35 (concrete_empty_statement -> .)
    SEMI            reduce using rule 35 (concrete_empty_statement -> .)
    END             reduce using rule 35 (concrete_empty_statement -> .)

    statement                      shift and go to state 136
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35
    concrete_empty_statement       shift and go to state 36

state 131

    (20) expression -> ID LPAREN argument_list RPAREN .

    THEN            reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    AND             reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    OR              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    LT              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    LE              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    GT              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    GE              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    EQ              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    NEQ             reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    DIV             reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    MOD             reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    DO              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    SEMI            reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    END             reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    ELSE            reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)
    TO              reduce using rule 20 (expression -> ID LPAREN argument_list RPAREN .)


state 132

    (19) argument_list -> argument_list COMMA . expression
    (20) expression -> . ID LPAREN argument_list RPAREN
    (45) expression -> . TRUE
    (46) expression -> . FALSE
    (47) expression -> . expression AND expression
    (48) expression -> . expression OR expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression LE expression
    (51) expression -> . expression GT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . LPAREN expression RPAREN
    (56) expression -> . expression DIV expression
    (57) expression -> . expression MOD expression
    (62) expression -> . expression PLUS expression
    (63) expression -> . expression MINUS expression
    (64) expression -> . expression TIMES expression
    (65) expression -> . expression DIVIDE expression
    (66) expression -> . ID
    (67) expression -> . NUMBER
    (68) expression -> . REAL

    ID              shift and go to state 59
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LPAREN          shift and go to state 60
    NUMBER          shift and go to state 63
    REAL            shift and go to state 64

    expression                     shift and go to state 137

state 133

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type . SEMI declarations BEGIN statements END SEMI

    SEMI            shift and go to state 138


state 134

    (17) param_list -> param_list SEMI ID COLON . type
    (9) type -> . INTEGER
    (10) type -> . BOOLEAN
    (11) type -> . STRING
    (12) type -> . REAL

    INTEGER         shift and go to state 45
    BOOLEAN         shift and go to state 46
    STRING          shift and go to state 47
    REAL            shift and go to state 48

    type                           shift and go to state 139

state 135

    (44) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    DO              shift and go to state 140
    AND             shift and go to state 81
    OR              shift and go to state 82
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94


state 136

    (60) if_statement -> IF expression THEN statement ELSE statement .

    SEMI            reduce using rule 60 (if_statement -> IF expression THEN statement ELSE statement .)
    END             reduce using rule 60 (if_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 60 (if_statement -> IF expression THEN statement ELSE statement .)


state 137

    (19) argument_list -> argument_list COMMA expression .
    (47) expression -> expression . AND expression
    (48) expression -> expression . OR expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . LE expression
    (51) expression -> expression . GT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (56) expression -> expression . DIV expression
    (57) expression -> expression . MOD expression
    (62) expression -> expression . PLUS expression
    (63) expression -> expression . MINUS expression
    (64) expression -> expression . TIMES expression
    (65) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 19 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 19 (argument_list -> argument_list COMMA expression .)
    AND             shift and go to state 81
    OR              shift and go to state 82
    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NEQ             shift and go to state 88
    DIV             shift and go to state 89
    MOD             shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94


state 138

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI . declarations BEGIN statements END SEMI
    (2) declarations -> . VAR var_declaration_list
    (3) declarations -> . empty
    (69) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 69 (empty -> .)

    declarations                   shift and go to state 141
    empty                          shift and go to state 7

state 139

    (17) param_list -> param_list SEMI ID COLON type .

    RPAREN          reduce using rule 17 (param_list -> param_list SEMI ID COLON type .)
    SEMI            reduce using rule 17 (param_list -> param_list SEMI ID COLON type .)


state 140

    (44) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) statement -> . concrete_empty_statement
    (36) assignment_statement -> . ID ASSIGN expression
    (37) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (38) write_statement -> . WRITE LPAREN writelist RPAREN
    (43) readln_statement -> . READLN LPAREN ID RPAREN
    (44) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (59) if_statement -> . IF expression THEN statement
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (58) statement_compound -> . BEGIN statements END
    (35) concrete_empty_statement -> .

    ID              shift and go to state 22
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    ELSE            reduce using rule 35 (concrete_empty_statement -> .)
    SEMI            reduce using rule 35 (concrete_empty_statement -> .)
    END             reduce using rule 35 (concrete_empty_statement -> .)

    statement                      shift and go to state 142
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35
    concrete_empty_statement       shift and go to state 36

state 141

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations . BEGIN statements END SEMI

    BEGIN           shift and go to state 143


state 142

    (44) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    SEMI            reduce using rule 44 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    END             reduce using rule 44 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 44 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 143

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN . statements END SEMI
    (21) statements -> . statement_sequence
    (22) statements -> . empty_statement_block
    (24) statement_sequence -> . statement
    (25) statement_sequence -> . statement_sequence SEMI statement
    (23) empty_statement_block -> .
    (26) statement -> . assignment_statement
    (27) statement -> . writeln_statement
    (28) statement -> . write_statement
    (29) statement -> . readln_statement
    (30) statement -> . for_statement
    (31) statement -> . if_statement
    (32) statement -> . while_statement
    (33) statement -> . statement_compound
    (34) statement -> . concrete_empty_statement
    (36) assignment_statement -> . ID ASSIGN expression
    (37) writeln_statement -> . WRITELN LPAREN writelist RPAREN
    (38) write_statement -> . WRITE LPAREN writelist RPAREN
    (43) readln_statement -> . READLN LPAREN ID RPAREN
    (44) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (59) if_statement -> . IF expression THEN statement
    (60) if_statement -> . IF expression THEN statement ELSE statement
    (61) while_statement -> . WHILE expression DO statement
    (58) statement_compound -> . BEGIN statements END
    (35) concrete_empty_statement -> .

  ! reduce/reduce conflict for END resolved using rule 23 (empty_statement_block -> .)
    END             reduce using rule 23 (empty_statement_block -> .)
    ID              shift and go to state 22
    WRITELN         shift and go to state 37
    WRITE           shift and go to state 38
    READLN          shift and go to state 39
    FOR             shift and go to state 40
    IF              shift and go to state 41
    WHILE           shift and go to state 42
    BEGIN           shift and go to state 23
    SEMI            reduce using rule 35 (concrete_empty_statement -> .)

  ! END             [ reduce using rule 35 (concrete_empty_statement -> .) ]

    statements                     shift and go to state 144
    statement_sequence             shift and go to state 25
    empty_statement_block          shift and go to state 26
    statement                      shift and go to state 27
    assignment_statement           shift and go to state 28
    writeln_statement              shift and go to state 29
    write_statement                shift and go to state 30
    readln_statement               shift and go to state 31
    for_statement                  shift and go to state 32
    if_statement                   shift and go to state 33
    while_statement                shift and go to state 34
    statement_compound             shift and go to state 35
    concrete_empty_statement       shift and go to state 36

state 144

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements . END SEMI

    END             shift and go to state 145


state 145

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END . SEMI

    SEMI            shift and go to state 146


state 146

    (15) function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI .

    FUNCTION        reduce using rule 15 (function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI .)
    BEGIN           reduce using rule 15 (function -> FUNCTION ID LPAREN param_list RPAREN COLON type SEMI declarations BEGIN statements END SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 16 resolved using rule (empty_statement_block -> <empty>)
WARNING: rejected rule (concrete_empty_statement -> <empty>) in state 16
WARNING: reduce/reduce conflict in state 23 resolved using rule (empty_statement_block -> <empty>)
WARNING: rejected rule (concrete_empty_statement -> <empty>) in state 23
WARNING: reduce/reduce conflict in state 143 resolved using rule (empty_statement_block -> <empty>)
WARNING: rejected rule (concrete_empty_statement -> <empty>) in state 143
